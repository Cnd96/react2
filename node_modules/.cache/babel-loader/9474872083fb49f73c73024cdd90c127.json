{"ast":null,"code":"import * as _ from 'lodash';\nimport validator from 'validator';\nimport { isValidPhoneNumber } from 'react-phone-number-input';\n/*\n* formValues\n*\n* validationObj {\n*   form_field_name : {\n*       'label' : ''\n*       'type' : {value : 'number', message : 'Not a number'}\n*       'max' : {value : 10, message : 'max value is 10'},\n*       'min' : {},\n*       'maxLength' : {},\n*       'required' : {message : 'required'}\n*   }\n* }\n* **/\n\nconst excludingItems = ['label'];\nexport default function customValidator(formValues, validationObj) {\n  let result = {\n    isValid: true,\n    errors: {}\n  };\n\n  let fields = _.keys(validationObj);\n\n  if (fields) {\n    for (let i = 0; i < fields.length; i++) {\n      let field = fields[i];\n      let fieldValidations = validationObj[field];\n      let fieldValue = formValues[field];\n\n      let validationItems = _.keys(fieldValidations);\n\n      for (let j = 0; j < validationItems.length; j++) {\n        let item = validationItems[j];\n\n        if (excludingItems.indexOf(item) === -1) {\n          let validatorFunction = item + 'ValidatorNotebook';\n          let fieldValidation = execute({\n            validatorFunction,\n            fieldValue,\n            item: fieldValidations[item],\n            label: fieldValidations.label\n          });\n\n          if (!fieldValidation.isValid) {\n            result.isValid = false;\n            result.errors[field] = fieldValidation.errorMessage;\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  return result;\n}\n;\n\nfunction execute(obj) {\n  let {\n    validatorFunction,\n    fieldValue,\n    item,\n    label\n  } = obj;\n\n  switch (validatorFunction) {\n    case 'typeValidatorNotebook':\n      return typeValidatorNotebook(fieldValue, item, label);\n\n    case 'requiredValidatorNotebook':\n      return requiredValidatorNotebook(fieldValue, item, label);\n\n    case 'maxLengthValidatorNotebook':\n      return maxLengthValidatorNotebook(fieldValue, item, label);\n\n    case 'emailValidatorNotebook':\n      return emailValidatorNotebook(fieldValue, item, label);\n\n    case 'phoneValidatorNotebook':\n      return phoneValidatorNotebook(fieldValue, item, label);\n\n    case 'urlValidatorNotebook':\n      return urlValidatorNotebook(fieldValue, item, label);\n\n    case 'nicLKValidatorNotebook':\n      return nicLKValidatorNotebook(fieldValue, item, label);\n\n    case 'defaultDateValidatorNotebook':\n      return defaultDateValidatorNotebook(fieldValue, item, label);\n\n    case 'defaultDateTimeValidatorNotebook':\n      return defaultDateTimeValidatorNotebook(fieldValue, item, label);\n\n    case 'hh24mmValidatorNotebook':\n      return hh24mmTimeValidatorNotebook(fieldValue, item, label);\n\n    case 'numberValidatorNotebook':\n      return numberValidatorNotebook(fieldValue, item, label);\n\n    case 'decimalValidatorNotebook':\n      return decimalValidatorNotebook(fieldValue, item, label);\n\n    case 'maxValidatorNotebook':\n      return maxValidatorNotebook(fieldValue, item, label);\n\n    case 'minValidatorNotebook':\n      return minValidatorNotebook(fieldValue, item, label);\n\n    case 'uppercaseValidatorNotebook':\n      return uppercaseValidatorNotebook(fieldValue, item, label);\n  }\n}\n\nfunction typeValidatorNotebook(value, validationItem) {\n  let type = validationItem.value;\n  let isValid = true;\n  let errorMessage = validationItem.message ? validationItem.message : `Not a ${type}`;\n\n  switch (type) {\n    case 'string':\n      isValid = typeof value === 'string';\n      break;\n\n    case 'number':\n      isValid = _.isNumber(value);\n      break;\n  }\n\n  return {\n    isValid,\n    errorMessage\n  };\n}\n\nfunction requiredValidatorNotebook(value, validationItem, label) {\n  let isValid = !_.isEmpty((value + '').trim());\n  label = label ? label + ' is' : '';\n  let errorMessage = validationItem.message ? validationItem.message : label ? `${label} Required` : 'Required';\n  return {\n    isValid,\n    errorMessage\n  };\n}\n\nfunction maxLengthValidatorNotebook(value, validationItem, label) {\n  value = value + '';\n  let isValid = value ? value.length <= validationItem.value : true;\n  let errorMessage = validationItem.message ? validationItem.message : `Max length is ${validationItem.value}`;\n  return {\n    isValid,\n    errorMessage\n  };\n}\n\nfunction emailValidatorNotebook(value, validationItem, label) {\n  let isValid = true;\n  let errorMessage = '';\n\n  if (value) {\n    isValid = validator.isEmail(value);\n    errorMessage = validationItem.message ? validationItem.message : `Not a valid email`;\n  }\n\n  return {\n    isValid,\n    errorMessage\n  };\n}\n\nfunction phoneValidatorNotebook(value, validationItem, label) {\n  let isValid = true;\n  let errorMessage = '';\n\n  if (value) {\n    isValid = isValidPhoneNumber(value);\n    errorMessage = validationItem.message ? validationItem.message : `Not a valid number`;\n  }\n\n  return {\n    isValid,\n    errorMessage\n  };\n}\n\nfunction urlValidatorNotebook(value, validationItem, label) {\n  let isValid = true;\n  let errorMessage = '';\n\n  if (value) {\n    isValid = validator.isURL(value);\n    errorMessage = validationItem.message ? validationItem.message : `Not a URL`;\n  }\n\n  return {\n    isValid,\n    errorMessage\n  };\n}\n\nfunction nicLKValidatorNotebook(value, validationItem, label) {\n  let isValid = true;\n  let errorMessage = '';\n\n  if (value) {\n    isValid = /^([0-9]{9}[x|X|v|V]|[0-9]{12})$/.test(value);\n    errorMessage = validationItem.message ? validationItem.message : `Invalid NIC`;\n  }\n\n  return {\n    isValid,\n    errorMessage\n  };\n}\n\nfunction defaultDateValidatorNotebook(value, validationItem, label) {\n  let isValid = true;\n  let errorMessage = '';\n\n  if (value) {\n    isValid = /((0[1-9]|[12]\\d|3[01])\\/(0[1-9]|1[0-2])\\/[12]\\d{3})/.test(value);\n    errorMessage = validationItem.message ? validationItem.message : `Invalid Date`;\n  }\n\n  return {\n    isValid,\n    errorMessage\n  };\n}\n\nfunction defaultDateTimeValidatorNotebook(value, validationItem, label) {\n  let isValid = true;\n  let errorMessage = '';\n\n  if (value) {\n    isValid = /((0[1-9]|[12]\\d|3[01])\\/(0[1-9]|1[0-2])\\/[12]\\d{3}) (00|[0-9]|1[0-9]|2[0-3]):([0-9]|[0-5][0-9]):([0-9]|[0-5][0-9])/.test(value);\n    errorMessage = validationItem.message ? validationItem.message : `Invalid Date Time`;\n  }\n\n  return {\n    isValid,\n    errorMessage\n  };\n}\n\nfunction hh24mmTimeValidatorNotebook(value, validationItem, label) {\n  let isValid = true;\n  let errorMessage = '';\n\n  if (value) {\n    isValid = /^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/.test(value);\n    errorMessage = validationItem.message ? validationItem.message : `Invalid Time`;\n  }\n\n  return {\n    isValid,\n    errorMessage\n  };\n}\n\nfunction numberValidatorNotebook(value, validationItem, label) {\n  let isValid = true;\n  let errorMessage = '';\n\n  if (value) {\n    isValid = _.isNumber(value);\n    errorMessage = validationItem.message ? validationItem.message : `Not a Number`;\n  }\n\n  return {\n    isValid,\n    errorMessage\n  };\n}\n\nfunction decimalValidatorNotebook(value, validationItem, label) {\n  let isValid = true;\n  let errorMessage = '';\n\n  if (value) {\n    let maxDecimalPlaces = validationItem.value;\n    let decimals = (value + '').split('.')[1];\n\n    if (decimals && decimals.length > maxDecimalPlaces) {\n      isValid = false;\n      errorMessage = validationItem.message ? validationItem.message : `Can have only ${maxDecimalPlaces} decimals`;\n    }\n  }\n\n  return {\n    isValid,\n    errorMessage\n  };\n}\n\nfunction maxValidatorNotebook(value, validationItem, label) {\n  let isValid = value ? value <= validationItem.value : true;\n  let errorMessage = validationItem.message ? validationItem.message : `Max Value is ${validationItem.value}`;\n  return {\n    isValid,\n    errorMessage\n  };\n}\n\nfunction minValidatorNotebook(value, validationItem, label) {\n  let isValid = value ? value >= validationItem.value : true;\n  let errorMessage = validationItem.message ? validationItem.message : `Min Value is ${validationItem.value}`;\n  return {\n    isValid,\n    errorMessage\n  };\n}\n\nfunction uppercaseValidatorNotebook(value, validationItem, label) {\n  let isValid = true;\n  let errorMessage = '';\n\n  if (value) {\n    isValid = /^(.[A-Z0-9!@#$%^&*]*)$/.test(value);\n    errorMessage = validationItem.message ? validationItem.message : `Invalid entry`;\n  }\n\n  return {\n    isValid,\n    errorMessage\n  };\n}","map":{"version":3,"sources":["C:/Users/chamald/Desktop/Chamal/react/react-app/src/utils/ValidationUtil.js"],"names":["_","validator","isValidPhoneNumber","excludingItems","customValidator","formValues","validationObj","result","isValid","errors","fields","keys","i","length","field","fieldValidations","fieldValue","validationItems","j","item","indexOf","validatorFunction","fieldValidation","execute","label","errorMessage","obj","typeValidatorNotebook","requiredValidatorNotebook","maxLengthValidatorNotebook","emailValidatorNotebook","phoneValidatorNotebook","urlValidatorNotebook","nicLKValidatorNotebook","defaultDateValidatorNotebook","defaultDateTimeValidatorNotebook","hh24mmTimeValidatorNotebook","numberValidatorNotebook","decimalValidatorNotebook","maxValidatorNotebook","minValidatorNotebook","uppercaseValidatorNotebook","value","validationItem","type","message","isNumber","isEmpty","trim","isEmail","isURL","test","maxDecimalPlaces","decimals","split"],"mappings":"AAAA,OAAO,KAAKA,CAAZ,MAAmB,QAAnB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,SAAQC,kBAAR,QAAiC,0BAAjC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,cAAc,GAAG,CAAC,OAAD,CAAvB;AAEA,eAAe,SAASC,eAAT,CAAyBC,UAAzB,EAAqCC,aAArC,EAAoD;AAC/D,MAAIC,MAAM,GAAG;AACTC,IAAAA,OAAO,EAAE,IADA;AAETC,IAAAA,MAAM,EAAE;AAFC,GAAb;;AAKA,MAAIC,MAAM,GAAGV,CAAC,CAACW,IAAF,CAAOL,aAAP,CAAb;;AACA,MAAII,MAAJ,EAAY;AACR,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,MAAM,CAACG,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACpC,UAAIE,KAAK,GAAGJ,MAAM,CAACE,CAAD,CAAlB;AACA,UAAIG,gBAAgB,GAAGT,aAAa,CAACQ,KAAD,CAApC;AACA,UAAIE,UAAU,GAAGX,UAAU,CAACS,KAAD,CAA3B;;AAEA,UAAIG,eAAe,GAAGjB,CAAC,CAACW,IAAF,CAAOI,gBAAP,CAAtB;;AAEA,WAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,eAAe,CAACJ,MAApC,EAA4CK,CAAC,EAA7C,EAAiD;AAC7C,YAAIC,IAAI,GAAGF,eAAe,CAACC,CAAD,CAA1B;;AACA,YAAIf,cAAc,CAACiB,OAAf,CAAuBD,IAAvB,MAAiC,CAAC,CAAtC,EAAyC;AACrC,cAAIE,iBAAiB,GAAGF,IAAI,GAAG,mBAA/B;AACA,cAAIG,eAAe,GAAGC,OAAO,CAAC;AAC1BF,YAAAA,iBAD0B;AAE1BL,YAAAA,UAF0B;AAG1BG,YAAAA,IAAI,EAAEJ,gBAAgB,CAACI,IAAD,CAHI;AAI1BK,YAAAA,KAAK,EAAET,gBAAgB,CAACS;AAJE,WAAD,CAA7B;;AAMA,cAAI,CAACF,eAAe,CAACd,OAArB,EAA8B;AAC1BD,YAAAA,MAAM,CAACC,OAAP,GAAiB,KAAjB;AACAD,YAAAA,MAAM,CAACE,MAAP,CAAcK,KAAd,IAAuBQ,eAAe,CAACG,YAAvC;AACA;AACH;AACJ;AACJ;AACJ;AACJ;;AAED,SAAOlB,MAAP;AACH;AAAA;;AAGD,SAASgB,OAAT,CAAiBG,GAAjB,EAAsB;AAClB,MAAI;AAACL,IAAAA,iBAAD;AAAoBL,IAAAA,UAApB;AAAgCG,IAAAA,IAAhC;AAAsCK,IAAAA;AAAtC,MAA+CE,GAAnD;;AACA,UAAQL,iBAAR;AACI,SAAK,uBAAL;AACI,aAAOM,qBAAqB,CAACX,UAAD,EAAaG,IAAb,EAAmBK,KAAnB,CAA5B;;AAEJ,SAAK,2BAAL;AACI,aAAOI,yBAAyB,CAACZ,UAAD,EAAaG,IAAb,EAAmBK,KAAnB,CAAhC;;AAEJ,SAAK,4BAAL;AACI,aAAOK,0BAA0B,CAACb,UAAD,EAAaG,IAAb,EAAmBK,KAAnB,CAAjC;;AAEJ,SAAK,wBAAL;AACI,aAAOM,sBAAsB,CAACd,UAAD,EAAaG,IAAb,EAAmBK,KAAnB,CAA7B;;AAEJ,SAAK,wBAAL;AACI,aAAOO,sBAAsB,CAACf,UAAD,EAAaG,IAAb,EAAmBK,KAAnB,CAA7B;;AAEJ,SAAK,sBAAL;AACI,aAAOQ,oBAAoB,CAAChB,UAAD,EAAaG,IAAb,EAAmBK,KAAnB,CAA3B;;AAEJ,SAAK,wBAAL;AACI,aAAOS,sBAAsB,CAACjB,UAAD,EAAaG,IAAb,EAAmBK,KAAnB,CAA7B;;AAEJ,SAAK,8BAAL;AACI,aAAOU,4BAA4B,CAAClB,UAAD,EAAaG,IAAb,EAAmBK,KAAnB,CAAnC;;AAEJ,SAAK,kCAAL;AACI,aAAOW,gCAAgC,CAACnB,UAAD,EAAaG,IAAb,EAAmBK,KAAnB,CAAvC;;AAEJ,SAAK,yBAAL;AACI,aAAOY,2BAA2B,CAACpB,UAAD,EAAaG,IAAb,EAAmBK,KAAnB,CAAlC;;AAEJ,SAAK,yBAAL;AACI,aAAOa,uBAAuB,CAACrB,UAAD,EAAaG,IAAb,EAAmBK,KAAnB,CAA9B;;AAEJ,SAAK,0BAAL;AACI,aAAOc,wBAAwB,CAACtB,UAAD,EAAaG,IAAb,EAAmBK,KAAnB,CAA/B;;AAEJ,SAAK,sBAAL;AACI,aAAOe,oBAAoB,CAACvB,UAAD,EAAaG,IAAb,EAAmBK,KAAnB,CAA3B;;AAEJ,SAAK,sBAAL;AACI,aAAOgB,oBAAoB,CAACxB,UAAD,EAAaG,IAAb,EAAmBK,KAAnB,CAA3B;;AAEJ,SAAK,4BAAL;AACI,aAAOiB,0BAA0B,CAACzB,UAAD,EAAaG,IAAb,EAAmBK,KAAnB,CAAjC;AA5CR;AA+CH;;AAED,SAASG,qBAAT,CAA+Be,KAA/B,EAAsCC,cAAtC,EAAsD;AAClD,MAAIC,IAAI,GAAGD,cAAc,CAACD,KAA1B;AACA,MAAIlC,OAAO,GAAG,IAAd;AACA,MAAIiB,YAAY,GAAGkB,cAAc,CAACE,OAAf,GAAyBF,cAAc,CAACE,OAAxC,GAAmD,SAAQD,IAAK,EAAnF;;AAEA,UAAQA,IAAR;AACI,SAAK,QAAL;AACIpC,MAAAA,OAAO,GAAG,OAAOkC,KAAP,KAAiB,QAA3B;AACA;;AAEJ,SAAK,QAAL;AACIlC,MAAAA,OAAO,GAAGR,CAAC,CAAC8C,QAAF,CAAWJ,KAAX,CAAV;AACA;AAPR;;AAUA,SAAO;AACHlC,IAAAA,OADG;AAEHiB,IAAAA;AAFG,GAAP;AAIH;;AAED,SAASG,yBAAT,CAAmCc,KAAnC,EAA0CC,cAA1C,EAA0DnB,KAA1D,EAAiE;AAE7D,MAAIhB,OAAO,GAAG,CAACR,CAAC,CAAC+C,OAAF,CAAU,CAACL,KAAK,GAAG,EAAT,EAAaM,IAAb,EAAV,CAAf;AACAxB,EAAAA,KAAK,GAAGA,KAAK,GAAGA,KAAK,GAAG,KAAX,GAAmB,EAAhC;AACA,MAAIC,YAAY,GAAGkB,cAAc,CAACE,OAAf,GAAyBF,cAAc,CAACE,OAAxC,GAAmDrB,KAAK,GAAI,GAAEA,KAAM,WAAZ,GAAyB,UAApG;AACA,SAAO;AACHhB,IAAAA,OADG;AAEHiB,IAAAA;AAFG,GAAP;AAIH;;AAED,SAASI,0BAAT,CAAoCa,KAApC,EAA2CC,cAA3C,EAA2DnB,KAA3D,EAAkE;AAC9DkB,EAAAA,KAAK,GAAGA,KAAK,GAAG,EAAhB;AACA,MAAIlC,OAAO,GAAGkC,KAAK,GAAGA,KAAK,CAAC7B,MAAN,IAAgB8B,cAAc,CAACD,KAAlC,GAA0C,IAA7D;AACA,MAAIjB,YAAY,GAAGkB,cAAc,CAACE,OAAf,GAAyBF,cAAc,CAACE,OAAxC,GAAmD,iBAAgBF,cAAc,CAACD,KAAM,EAA3G;AACA,SAAO;AACHlC,IAAAA,OADG;AAEHiB,IAAAA;AAFG,GAAP;AAIH;;AAED,SAASK,sBAAT,CAAgCY,KAAhC,EAAuCC,cAAvC,EAAuDnB,KAAvD,EAA8D;AAC1D,MAAIhB,OAAO,GAAG,IAAd;AACA,MAAIiB,YAAY,GAAG,EAAnB;;AAEA,MAAIiB,KAAJ,EAAW;AACPlC,IAAAA,OAAO,GAAGP,SAAS,CAACgD,OAAV,CAAkBP,KAAlB,CAAV;AACAjB,IAAAA,YAAY,GAAGkB,cAAc,CAACE,OAAf,GAAyBF,cAAc,CAACE,OAAxC,GAAmD,mBAAlE;AACH;;AAED,SAAO;AACHrC,IAAAA,OADG;AAEHiB,IAAAA;AAFG,GAAP;AAIH;;AAED,SAASM,sBAAT,CAAgCW,KAAhC,EAAuCC,cAAvC,EAAuDnB,KAAvD,EAA8D;AAC1D,MAAIhB,OAAO,GAAG,IAAd;AACA,MAAIiB,YAAY,GAAG,EAAnB;;AAEA,MAAIiB,KAAJ,EAAW;AACPlC,IAAAA,OAAO,GAAGN,kBAAkB,CAACwC,KAAD,CAA5B;AACAjB,IAAAA,YAAY,GAAGkB,cAAc,CAACE,OAAf,GAAyBF,cAAc,CAACE,OAAxC,GAAmD,oBAAlE;AACH;;AAED,SAAO;AACHrC,IAAAA,OADG;AAEHiB,IAAAA;AAFG,GAAP;AAIH;;AAED,SAASO,oBAAT,CAA8BU,KAA9B,EAAqCC,cAArC,EAAqDnB,KAArD,EAA4D;AACxD,MAAIhB,OAAO,GAAG,IAAd;AACA,MAAIiB,YAAY,GAAG,EAAnB;;AAEA,MAAIiB,KAAJ,EAAW;AACPlC,IAAAA,OAAO,GAAGP,SAAS,CAACiD,KAAV,CAAgBR,KAAhB,CAAV;AACAjB,IAAAA,YAAY,GAAGkB,cAAc,CAACE,OAAf,GAAyBF,cAAc,CAACE,OAAxC,GAAmD,WAAlE;AACH;;AAED,SAAO;AACHrC,IAAAA,OADG;AAEHiB,IAAAA;AAFG,GAAP;AAIH;;AAED,SAASQ,sBAAT,CAAgCS,KAAhC,EAAuCC,cAAvC,EAAuDnB,KAAvD,EAA8D;AAC1D,MAAIhB,OAAO,GAAG,IAAd;AACA,MAAIiB,YAAY,GAAG,EAAnB;;AAEA,MAAIiB,KAAJ,EAAW;AACPlC,IAAAA,OAAO,GAAG,kCAAkC2C,IAAlC,CAAuCT,KAAvC,CAAV;AACAjB,IAAAA,YAAY,GAAGkB,cAAc,CAACE,OAAf,GAAyBF,cAAc,CAACE,OAAxC,GAAmD,aAAlE;AACH;;AAED,SAAO;AACHrC,IAAAA,OADG;AAEHiB,IAAAA;AAFG,GAAP;AAIH;;AAGD,SAASS,4BAAT,CAAsCQ,KAAtC,EAA6CC,cAA7C,EAA6DnB,KAA7D,EAAoE;AAChE,MAAIhB,OAAO,GAAG,IAAd;AACA,MAAIiB,YAAY,GAAG,EAAnB;;AAEA,MAAIiB,KAAJ,EAAW;AACPlC,IAAAA,OAAO,GAAG,sDAAsD2C,IAAtD,CAA2DT,KAA3D,CAAV;AACAjB,IAAAA,YAAY,GAAGkB,cAAc,CAACE,OAAf,GAAyBF,cAAc,CAACE,OAAxC,GAAmD,cAAlE;AACH;;AAED,SAAO;AACHrC,IAAAA,OADG;AAEHiB,IAAAA;AAFG,GAAP;AAIH;;AAED,SAASU,gCAAT,CAA0CO,KAA1C,EAAiDC,cAAjD,EAAiEnB,KAAjE,EAAwE;AACpE,MAAIhB,OAAO,GAAG,IAAd;AACA,MAAIiB,YAAY,GAAG,EAAnB;;AAEA,MAAIiB,KAAJ,EAAW;AACPlC,IAAAA,OAAO,GAAG,qHAAqH2C,IAArH,CAA0HT,KAA1H,CAAV;AACAjB,IAAAA,YAAY,GAAGkB,cAAc,CAACE,OAAf,GAAyBF,cAAc,CAACE,OAAxC,GAAmD,mBAAlE;AACH;;AAED,SAAO;AACHrC,IAAAA,OADG;AAEHiB,IAAAA;AAFG,GAAP;AAIH;;AAED,SAASW,2BAAT,CAAqCM,KAArC,EAA4CC,cAA5C,EAA4DnB,KAA5D,EAAmE;AAC/D,MAAIhB,OAAO,GAAG,IAAd;AACA,MAAIiB,YAAY,GAAG,EAAnB;;AAEA,MAAIiB,KAAJ,EAAW;AACPlC,IAAAA,OAAO,GAAG,sCAAsC2C,IAAtC,CAA2CT,KAA3C,CAAV;AACAjB,IAAAA,YAAY,GAAGkB,cAAc,CAACE,OAAf,GAAyBF,cAAc,CAACE,OAAxC,GAAmD,cAAlE;AACH;;AAED,SAAO;AACHrC,IAAAA,OADG;AAEHiB,IAAAA;AAFG,GAAP;AAIH;;AAED,SAASY,uBAAT,CAAiCK,KAAjC,EAAwCC,cAAxC,EAAwDnB,KAAxD,EAA+D;AAC3D,MAAIhB,OAAO,GAAG,IAAd;AACA,MAAIiB,YAAY,GAAG,EAAnB;;AAEA,MAAIiB,KAAJ,EAAW;AACPlC,IAAAA,OAAO,GAAGR,CAAC,CAAC8C,QAAF,CAAWJ,KAAX,CAAV;AACAjB,IAAAA,YAAY,GAAGkB,cAAc,CAACE,OAAf,GAAyBF,cAAc,CAACE,OAAxC,GAAmD,cAAlE;AACH;;AAED,SAAO;AACHrC,IAAAA,OADG;AAEHiB,IAAAA;AAFG,GAAP;AAIH;;AAED,SAASa,wBAAT,CAAkCI,KAAlC,EAAyCC,cAAzC,EAAyDnB,KAAzD,EAAgE;AAC5D,MAAIhB,OAAO,GAAG,IAAd;AACA,MAAIiB,YAAY,GAAG,EAAnB;;AAEA,MAAIiB,KAAJ,EAAW;AACP,QAAIU,gBAAgB,GAAGT,cAAc,CAACD,KAAtC;AACA,QAAIW,QAAQ,GAAG,CAACX,KAAK,GAAG,EAAT,EAAaY,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,CAAf;;AACA,QAAID,QAAQ,IAAIA,QAAQ,CAACxC,MAAT,GAAkBuC,gBAAlC,EAAoD;AAChD5C,MAAAA,OAAO,GAAG,KAAV;AACAiB,MAAAA,YAAY,GAAGkB,cAAc,CAACE,OAAf,GAAyBF,cAAc,CAACE,OAAxC,GAAmD,iBAAgBO,gBAAiB,WAAnG;AACH;AAEJ;;AAED,SAAO;AACH5C,IAAAA,OADG;AAEHiB,IAAAA;AAFG,GAAP;AAIH;;AAED,SAASc,oBAAT,CAA8BG,KAA9B,EAAqCC,cAArC,EAAqDnB,KAArD,EAA4D;AACxD,MAAIhB,OAAO,GAAGkC,KAAK,GAAGA,KAAK,IAAIC,cAAc,CAACD,KAA3B,GAAmC,IAAtD;AACA,MAAIjB,YAAY,GAAGkB,cAAc,CAACE,OAAf,GAAyBF,cAAc,CAACE,OAAxC,GAAmD,gBAAeF,cAAc,CAACD,KAAM,EAA1G;AACA,SAAO;AACHlC,IAAAA,OADG;AAEHiB,IAAAA;AAFG,GAAP;AAIH;;AAED,SAASe,oBAAT,CAA8BE,KAA9B,EAAqCC,cAArC,EAAqDnB,KAArD,EAA4D;AACxD,MAAIhB,OAAO,GAAGkC,KAAK,GAAGA,KAAK,IAAIC,cAAc,CAACD,KAA3B,GAAmC,IAAtD;AACA,MAAIjB,YAAY,GAAGkB,cAAc,CAACE,OAAf,GAAyBF,cAAc,CAACE,OAAxC,GAAmD,gBAAeF,cAAc,CAACD,KAAM,EAA1G;AACA,SAAO;AACHlC,IAAAA,OADG;AAEHiB,IAAAA;AAFG,GAAP;AAIH;;AAED,SAASgB,0BAAT,CAAoCC,KAApC,EAA2CC,cAA3C,EAA2DnB,KAA3D,EAAkE;AAC9D,MAAIhB,OAAO,GAAG,IAAd;AACA,MAAIiB,YAAY,GAAG,EAAnB;;AAEA,MAAIiB,KAAJ,EAAW;AACPlC,IAAAA,OAAO,GAAG,yBAAyB2C,IAAzB,CAA8BT,KAA9B,CAAV;AACAjB,IAAAA,YAAY,GAAGkB,cAAc,CAACE,OAAf,GAAyBF,cAAc,CAACE,OAAxC,GAAmD,eAAlE;AACH;;AAED,SAAO;AACHrC,IAAAA,OADG;AAEHiB,IAAAA;AAFG,GAAP;AAKH","sourcesContent":["import * as _ from 'lodash';\nimport validator from 'validator';\nimport {isValidPhoneNumber} from 'react-phone-number-input';\n\n/*\n* formValues\n*\n* validationObj {\n*   form_field_name : {\n*       'label' : ''\n*       'type' : {value : 'number', message : 'Not a number'}\n*       'max' : {value : 10, message : 'max value is 10'},\n*       'min' : {},\n*       'maxLength' : {},\n*       'required' : {message : 'required'}\n*   }\n* }\n* **/\n\nconst excludingItems = ['label'];\n\nexport default function customValidator(formValues, validationObj) {\n    let result = {\n        isValid: true,\n        errors: {}\n    };\n\n    let fields = _.keys(validationObj);\n    if (fields) {\n        for (let i = 0; i < fields.length; i++) {\n            let field = fields[i];\n            let fieldValidations = validationObj[field];\n            let fieldValue = formValues[field];\n\n            let validationItems = _.keys(fieldValidations);\n\n            for (let j = 0; j < validationItems.length; j++) {\n                let item = validationItems[j];\n                if (excludingItems.indexOf(item) === -1) {\n                    let validatorFunction = item + 'ValidatorNotebook';\n                    let fieldValidation = execute({\n                        validatorFunction,\n                        fieldValue,\n                        item: fieldValidations[item],\n                        label: fieldValidations.label\n                    });\n                    if (!fieldValidation.isValid) {\n                        result.isValid = false;\n                        result.errors[field] = fieldValidation.errorMessage;\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    return result;\n};\n\n\nfunction execute(obj) {\n    let {validatorFunction, fieldValue, item, label} = obj;\n    switch (validatorFunction) {\n        case 'typeValidatorNotebook' :\n            return typeValidatorNotebook(fieldValue, item, label);\n\n        case 'requiredValidatorNotebook' :\n            return requiredValidatorNotebook(fieldValue, item, label);\n\n        case 'maxLengthValidatorNotebook' :\n            return maxLengthValidatorNotebook(fieldValue, item, label);\n\n        case 'emailValidatorNotebook' :\n            return emailValidatorNotebook(fieldValue, item, label);\n\n        case 'phoneValidatorNotebook' :\n            return phoneValidatorNotebook(fieldValue, item, label);\n\n        case 'urlValidatorNotebook' :\n            return urlValidatorNotebook(fieldValue, item, label);\n\n        case 'nicLKValidatorNotebook' :\n            return nicLKValidatorNotebook(fieldValue, item, label);\n\n        case 'defaultDateValidatorNotebook' :\n            return defaultDateValidatorNotebook(fieldValue, item, label);\n\n        case 'defaultDateTimeValidatorNotebook' :\n            return defaultDateTimeValidatorNotebook(fieldValue, item, label);\n\n        case 'hh24mmValidatorNotebook' :\n            return hh24mmTimeValidatorNotebook(fieldValue, item, label);\n\n        case 'numberValidatorNotebook' :\n            return numberValidatorNotebook(fieldValue, item, label);\n\n        case 'decimalValidatorNotebook' :\n            return decimalValidatorNotebook(fieldValue, item, label);\n\n        case 'maxValidatorNotebook':\n            return maxValidatorNotebook(fieldValue, item, label);\n\n        case 'minValidatorNotebook':\n            return minValidatorNotebook(fieldValue, item, label);\n\n        case 'uppercaseValidatorNotebook':\n            return uppercaseValidatorNotebook(fieldValue, item, label);\n\n    }\n}\n\nfunction typeValidatorNotebook(value, validationItem) {\n    let type = validationItem.value;\n    let isValid = true;\n    let errorMessage = validationItem.message ? validationItem.message : `Not a ${type}`;\n\n    switch (type) {\n        case 'string' :\n            isValid = typeof value === 'string';\n            break;\n\n        case 'number' :\n            isValid = _.isNumber(value);\n            break;\n    }\n\n    return {\n        isValid,\n        errorMessage\n    };\n}\n\nfunction requiredValidatorNotebook(value, validationItem, label) {\n\n    let isValid = !_.isEmpty((value + '').trim());\n    label = label ? label + ' is' : '';\n    let errorMessage = validationItem.message ? validationItem.message : (label ? `${label} Required` : 'Required');\n    return {\n        isValid,\n        errorMessage\n    };\n}\n\nfunction maxLengthValidatorNotebook(value, validationItem, label) {\n    value = value + '';\n    let isValid = value ? value.length <= validationItem.value : true;\n    let errorMessage = validationItem.message ? validationItem.message : `Max length is ${validationItem.value}`;\n    return {\n        isValid,\n        errorMessage\n    };\n}\n\nfunction emailValidatorNotebook(value, validationItem, label) {\n    let isValid = true;\n    let errorMessage = '';\n\n    if (value) {\n        isValid = validator.isEmail(value);\n        errorMessage = validationItem.message ? validationItem.message : `Not a valid email`;\n    }\n\n    return {\n        isValid,\n        errorMessage\n    };\n}\n\nfunction phoneValidatorNotebook(value, validationItem, label) {\n    let isValid = true;\n    let errorMessage = '';\n\n    if (value) {\n        isValid = isValidPhoneNumber(value);\n        errorMessage = validationItem.message ? validationItem.message : `Not a valid number`;\n    }\n\n    return {\n        isValid,\n        errorMessage\n    };\n}\n\nfunction urlValidatorNotebook(value, validationItem, label) {\n    let isValid = true;\n    let errorMessage = '';\n\n    if (value) {\n        isValid = validator.isURL(value);\n        errorMessage = validationItem.message ? validationItem.message : `Not a URL`;\n    }\n\n    return {\n        isValid,\n        errorMessage\n    };\n}\n\nfunction nicLKValidatorNotebook(value, validationItem, label) {\n    let isValid = true;\n    let errorMessage = '';\n\n    if (value) {\n        isValid = /^([0-9]{9}[x|X|v|V]|[0-9]{12})$/.test(value);\n        errorMessage = validationItem.message ? validationItem.message : `Invalid NIC`;\n    }\n\n    return {\n        isValid,\n        errorMessage\n    };\n}\n\n\nfunction defaultDateValidatorNotebook(value, validationItem, label) {\n    let isValid = true;\n    let errorMessage = '';\n\n    if (value) {\n        isValid = /((0[1-9]|[12]\\d|3[01])\\/(0[1-9]|1[0-2])\\/[12]\\d{3})/.test(value);\n        errorMessage = validationItem.message ? validationItem.message : `Invalid Date`;\n    }\n\n    return {\n        isValid,\n        errorMessage\n    };\n}\n\nfunction defaultDateTimeValidatorNotebook(value, validationItem, label) {\n    let isValid = true;\n    let errorMessage = '';\n\n    if (value) {\n        isValid = /((0[1-9]|[12]\\d|3[01])\\/(0[1-9]|1[0-2])\\/[12]\\d{3}) (00|[0-9]|1[0-9]|2[0-3]):([0-9]|[0-5][0-9]):([0-9]|[0-5][0-9])/.test(value);\n        errorMessage = validationItem.message ? validationItem.message : `Invalid Date Time`;\n    }\n\n    return {\n        isValid,\n        errorMessage\n    };\n}\n\nfunction hh24mmTimeValidatorNotebook(value, validationItem, label) {\n    let isValid = true;\n    let errorMessage = '';\n\n    if (value) {\n        isValid = /^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/.test(value);\n        errorMessage = validationItem.message ? validationItem.message : `Invalid Time`;\n    }\n\n    return {\n        isValid,\n        errorMessage\n    };\n}\n\nfunction numberValidatorNotebook(value, validationItem, label) {\n    let isValid = true;\n    let errorMessage = '';\n\n    if (value) {\n        isValid = _.isNumber(value);\n        errorMessage = validationItem.message ? validationItem.message : `Not a Number`;\n    }\n\n    return {\n        isValid,\n        errorMessage\n    };\n}\n\nfunction decimalValidatorNotebook(value, validationItem, label) {\n    let isValid = true;\n    let errorMessage = '';\n\n    if (value) {\n        let maxDecimalPlaces = validationItem.value;\n        let decimals = (value + '').split('.')[1];\n        if (decimals && decimals.length > maxDecimalPlaces) {\n            isValid = false;\n            errorMessage = validationItem.message ? validationItem.message : `Can have only ${maxDecimalPlaces} decimals`;\n        }\n\n    }\n\n    return {\n        isValid,\n        errorMessage\n    };\n}\n\nfunction maxValidatorNotebook(value, validationItem, label) {\n    let isValid = value ? value <= validationItem.value : true;\n    let errorMessage = validationItem.message ? validationItem.message : `Max Value is ${validationItem.value}`;\n    return {\n        isValid,\n        errorMessage\n    }\n}\n\nfunction minValidatorNotebook(value, validationItem, label) {\n    let isValid = value ? value >= validationItem.value : true;\n    let errorMessage = validationItem.message ? validationItem.message : `Min Value is ${validationItem.value}`;\n    return {\n        isValid,\n        errorMessage\n    }\n}\n\nfunction uppercaseValidatorNotebook(value, validationItem, label) {\n    let isValid = true;\n    let errorMessage = '';\n\n    if (value) {\n        isValid = /^(.[A-Z0-9!@#$%^&*]*)$/.test(value);\n        errorMessage = validationItem.message ? validationItem.message : `Invalid entry`;\n    }\n\n    return {\n        isValid,\n        errorMessage\n    };\n\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}