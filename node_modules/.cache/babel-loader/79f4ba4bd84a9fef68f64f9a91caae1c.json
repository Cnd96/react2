{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chamald\\\\Desktop\\\\Chamal\\\\react\\\\react-app\\\\src\\\\app\\\\views\\\\admin\\\\config\\\\role\\\\add-edit\\\\components\\\\RoleAddEditForm.js\";\nimport React, { Component } from 'react';\nimport customValidator from \"../../../../../../../utils/ValidationUtil\";\nimport Constants from \"../../../../../../../utils/Constants\";\nimport { ErrorMessage, Field, Form, Formik } from \"formik\";\nimport { getCommonStatusOptions, getInputFieldClassNames } from \"../../../../../../../utils/FormUtils\";\nimport { CCol, CFormGroup, CLabel, CRow, CSelect } from \"@coreui/react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass RoleAddEditForm extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      roleInit: {\n        roleName: '',\n        status: Constants.STATUS_CONST.ACT\n      }\n    };\n\n    this.getValidations = () => {\n      return {\n        roleName: {\n          required: {},\n          maxLength: {\n            value: 255\n          }\n        },\n        status: {\n          required: {}\n        }\n      };\n    };\n\n    this.onCustomValidation = values => {\n      const {\n        onFormChange\n      } = this.props;\n      let validate = customValidator(values, this.getValidations());\n      onFormChange({\n        isValid: validate.isValid,\n        values: values\n      });\n      return validate.errors;\n    };\n\n    this.setInitialValues = () => {\n      const {\n        role\n      } = this.props;\n      let roleInit = {\n        roleName: role.roleName ? role.roleName : '',\n        status: role.status ? role.status : 'ACT'\n      };\n      this.setState({\n        roleInit: roleInit\n      }, () => {\n        this.onCustomValidation(roleInit);\n      });\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (this.props.role != prevProps.role) {\n      this.setInitialValues();\n    }\n  }\n\n  render() {\n    const initialValues = this.state.roleInit;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Formik, {\n        enableReinitialize: true,\n        initialValues: initialValues,\n        onSubmit: (values, _ref) => {\n          let {\n            setSubmitting\n          } = _ref;\n          setTimeout(() => {\n            console.log(values);\n            setSubmitting(false);\n          }, 400);\n        },\n        validateOnChange: true,\n        validate: values => {\n          return this.onCustomValidation(values);\n        },\n        children: _ref2 => {\n          let {\n            isSubmitting,\n            dirty,\n            errors,\n            touched\n          } = _ref2;\n          return /*#__PURE__*/_jsxDEV(Form, {\n            children: /*#__PURE__*/_jsxDEV(CRow, {\n              children: [/*#__PURE__*/_jsxDEV(CCol, {\n                sm: \"12\",\n                children: [/*#__PURE__*/_jsxDEV(CFormGroup, {\n                  children: [/*#__PURE__*/_jsxDEV(CLabel, {\n                    htmlFor: \"roleName\",\n                    className: 'required',\n                    children: \"Role Name\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 91,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Field, {\n                    type: \"text\",\n                    name: \"roleName\",\n                    placeholder: 'Role Name',\n                    className: getInputFieldClassNames(touched.roleName, errors.roleName)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 93,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 90,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                  name: \"roleName\",\n                  render: msg => /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: 'formik-error-message',\n                    children: msg\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 103,\n                    columnNumber: 58\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 101,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(CCol, {\n                sm: \"12\",\n                children: [/*#__PURE__*/_jsxDEV(CFormGroup, {\n                  children: [/*#__PURE__*/_jsxDEV(CLabel, {\n                    htmlFor: \"status\",\n                    className: 'required',\n                    children: \"Status\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 110,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Field, {\n                    name: \"status\",\n                    className: getInputFieldClassNames(touched.status, errors.status),\n                    children: _ref3 => {\n                      let {\n                        field,\n                        // { name, value, onChange, onBlur }\n                        form: {\n                          touched,\n                          errors\n                        },\n                        // also values, setXXXX, handleXXXX, dirty, isValid, status, etc.\n                        meta\n                      } = _ref3;\n                      return /*#__PURE__*/_jsxDEV(CSelect, {\n                        custom: true,\n                        name: \"status\",\n                        ...field,\n                        children: getCommonStatusOptions(true).map(item => {\n                          return /*#__PURE__*/_jsxDEV(\"option\", {\n                            value: item.key,\n                            children: item.value\n                          }, item.key, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 125,\n                            columnNumber: 65\n                          }, this);\n                        })\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 121,\n                        columnNumber: 49\n                      }, this);\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 112,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 109,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                  name: \"status\",\n                  render: msg => /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: 'formik-error-message',\n                    children: msg\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 136,\n                    columnNumber: 58\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 134,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 25\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nexport default RoleAddEditForm;","map":{"version":3,"sources":["C:/Users/chamald/Desktop/Chamal/react/react-app/src/app/views/admin/config/role/add-edit/components/RoleAddEditForm.js"],"names":["React","Component","customValidator","Constants","ErrorMessage","Field","Form","Formik","getCommonStatusOptions","getInputFieldClassNames","CCol","CFormGroup","CLabel","CRow","CSelect","RoleAddEditForm","state","roleInit","roleName","status","STATUS_CONST","ACT","getValidations","required","maxLength","value","onCustomValidation","values","onFormChange","props","validate","isValid","errors","setInitialValues","role","setState","componentDidUpdate","prevProps","prevState","snapshot","render","initialValues","setSubmitting","setTimeout","console","log","isSubmitting","dirty","touched","msg","field","form","meta","map","item","key"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport customValidator from \"../../../../../../../utils/ValidationUtil\";\nimport Constants from \"../../../../../../../utils/Constants\";\nimport {ErrorMessage, Field, Form, Formik} from \"formik\";\nimport {getCommonStatusOptions, getInputFieldClassNames} from \"../../../../../../../utils/FormUtils\";\nimport {CCol, CFormGroup, CLabel, CRow, CSelect} from \"@coreui/react\";\n\nclass RoleAddEditForm extends Component {\n\n    state = {\n        roleInit: {\n            roleName: '',\n            status: Constants.STATUS_CONST.ACT,\n        }\n    };\n\n    getValidations = () => {\n        return {\n            roleName: {\n                required: {},\n                maxLength: {value: 255}\n            },\n\n            status: {\n                required: {},\n            },\n        };\n    };\n\n\n    onCustomValidation = (values) => {\n        const {onFormChange} = this.props;\n\n        let validate = customValidator(values, this.getValidations());\n\n        onFormChange({\n            isValid: validate.isValid,\n            values: values\n        });\n\n        return validate.errors;\n    };\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (this.props.role != prevProps.role) {\n            this.setInitialValues();\n        }\n    }\n\n    setInitialValues = () => {\n        const {role} = this.props;\n        let roleInit = {\n            roleName: role.roleName ? role.roleName : '',\n            status: role.status ? role.status : 'ACT',\n        };\n        this.setState({\n            roleInit: roleInit\n        }, () => {\n            this.onCustomValidation(roleInit);\n        });\n    };\n\n\n    render() {\n\n        const initialValues = this.state.roleInit;\n\n        return (\n            <>\n                <Formik\n                    enableReinitialize={true}\n                    initialValues={initialValues}\n                    onSubmit={(values, {setSubmitting}) => {\n                        setTimeout(() => {\n                            console.log(values);\n                            setSubmitting(false);\n                        }, 400);\n                    }}\n\n                    validateOnChange={true}\n                    validate={(values) => {\n                        return this.onCustomValidation(values);\n                    }}\n                >\n                    {({isSubmitting, dirty, errors, touched}) => (\n                        <Form>\n\n                            <CRow>\n                                <CCol sm=\"12\">\n                                    <CFormGroup>\n                                        <CLabel htmlFor=\"roleName\" className={'required'}>Role Name</CLabel>\n\n                                        <Field\n                                            type=\"text\"\n                                            name=\"roleName\"\n                                            placeholder={'Role Name'}\n                                            className={getInputFieldClassNames(touched.roleName, errors.roleName)}\n                                        />\n                                    </CFormGroup>\n\n                                    <ErrorMessage\n                                        name=\"roleName\"\n                                        render={(msg) => <div className={'formik-error-message'}>{msg}</div>}\n                                    />\n                                </CCol>\n\n                                <CCol sm=\"12\">\n\n                                    <CFormGroup>\n                                        <CLabel htmlFor=\"status\" className={'required'}>Status</CLabel>\n\n                                        <Field name=\"status\"\n                                               className={getInputFieldClassNames(touched.status, errors.status)}\n                                        >\n                                            {({\n                                                  field, // { name, value, onChange, onBlur }\n                                                  form: {touched, errors}, // also values, setXXXX, handleXXXX, dirty, isValid, status, etc.\n                                                  meta,\n                                              }) => (\n\n                                                <CSelect custom name=\"status\" {...field}>\n                                                    {\n                                                        getCommonStatusOptions(true).map((item) => {\n                                                            return (\n                                                                <option key={item.key}\n                                                                        value={item.key}>{item.value}</option>\n                                                            );\n                                                        })\n                                                    }\n                                                </CSelect>\n                                            )}\n                                        </Field>\n                                    </CFormGroup>\n                                    <ErrorMessage\n                                        name=\"status\"\n                                        render={(msg) => <div className={'formik-error-message'}>{msg}</div>}\n                                    />\n                                </CCol>\n\n                            </CRow>\n                        </Form>\n                    )}\n                </Formik>\n            </>\n        );\n    }\n}\n\nexport default RoleAddEditForm;\n"]},"metadata":{},"sourceType":"module"}