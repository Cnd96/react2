{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chamald\\\\Desktop\\\\Chamal\\\\react\\\\react-app\\\\src\\\\app\\\\views\\\\admin\\\\config\\\\user\\\\add-edit\\\\components\\\\UserAddEditForm.js\";\nimport React, { Component } from \"react\";\nimport { ErrorMessage, Field, Form, Formik } from \"formik\";\nimport { bindActionCreators } from \"redux\";\nimport * as Action from \"../../store/actions/index\";\nimport { connect } from \"react-redux\";\nimport Constants from \"../../../../../../../utils/Constants\";\nimport * as userAction from \"../../store/actions\";\nimport customValidator from \"../../../../../../../utils/ValidationUtil\";\nimport { CCol, CFormGroup, CLabel, CRow, CSelect } from \"@coreui/react\";\nimport { getCommonStatusOptions, getCommonTitleOptions, getInputFieldClassNames } from \"../../../../../../../utils/FormUtils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass UserAddEditForm extends Component {\n  constructor() {\n    super(...arguments);\n    this.location = null;\n    this.state = {\n      userInit: {\n        userName: '',\n        title: 'MR',\n        firstName: '',\n        lastName: '',\n        contactNo: '',\n        password: '',\n        passwordConfirm: '',\n        email: '',\n        status: 'ACT',\n        userType: ''\n      }\n    };\n\n    this.setInitialValues = () => {\n      const {\n        user\n      } = this.props;\n      let userInit = {\n        userName: user.userName ? user.userName : '',\n        title: user.title ? user.title : Constants.TITLE_CONST.MR,\n        firstName: user.firstName ? user.firstName : '',\n        lastName: user.lastName ? user.lastName : '',\n        contactNo: user.contactNo ? user.contactNo : '',\n        password: user.password ? user.password : '',\n        passwordConfirm: user.passwordConfirm ? user.passwordConfirm : '',\n        email: user.email ? user.email : '',\n        userType: user.userType ? user.userType : '',\n        status: user.status ? user.status : Constants.STATUS_CONST.ACT\n      };\n      this.setState({\n        userInit: userInit\n      }, () => {\n        this.onCustomValidation(userInit);\n      });\n    };\n\n    this.onCustomValidation = values => {\n      const {\n        onFormChange\n      } = this.props;\n      let validate = customValidator(values, this.getValidations());\n      this.passwordMatchValidation(values.password, values.passwordConfirm, validate);\n      onFormChange({\n        isValid: validate.isValid,\n        values: values\n      });\n      return validate.errors;\n    };\n\n    this.passwordMatchValidation = (password, passwordConfirm, validateObj) => {\n      const {\n        isNew\n      } = this.props;\n      let isValid;\n      let validationMessage = 'Password not match';\n\n      if (!isNew) {\n        return;\n      }\n\n      isValid = password === passwordConfirm;\n      validateObj.isValid = validateObj.isValid && isValid;\n\n      if (!isValid) {\n        validateObj.errors.password = validateObj.errors.password ? validateObj.errors.password + ', ' + validationMessage : validationMessage;\n        validateObj.errors.passwordConfirm = validateObj.errors.passwordConfirm ? validateObj.errors.passwordConfirm + ', ' + validationMessage : validationMessage;\n      }\n    };\n\n    this.getValidations = () => {\n      const {\n        isNew\n      } = this.props;\n      let passwordValidations = {};\n      let defaultValidations = {\n        userName: {\n          required: {\n            message: 'Required'\n          },\n          maxLength: {\n            value: 100\n          }\n        },\n        firstName: {\n          required: {\n            message: 'Required'\n          },\n          maxLength: {\n            value: 255\n          }\n        },\n        lastName: {\n          required: {\n            message: 'Required'\n          },\n          maxLength: {\n            value: 255\n          }\n        },\n        email: {\n          required: {\n            message: 'Required'\n          },\n          maxLength: {\n            value: 255\n          },\n          email: {}\n        },\n        contactNo: {\n          required: {\n            message: 'Required'\n          },\n          maxLength: {\n            value: 12\n          }\n        }\n      };\n\n      if (isNew) {\n        passwordValidations = {\n          password: {\n            required: {\n              message: 'Required'\n            },\n            maxLength: {\n              value: 100\n            }\n          },\n          passwordConfirm: {\n            required: {\n              message: 'Required'\n            },\n            maxLength: {\n              value: 100\n            }\n          }\n        };\n      }\n\n      return Object.assign({}, defaultValidations, passwordValidations);\n    };\n  }\n\n  componentDidMount() {\n    this.setInitialValues();\n  }\n\n  componentWillUnmount() {}\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (this.props.user !== prevProps.user) {\n      this.setInitialValues();\n    }\n  }\n\n  render() {\n    const {\n      isNew\n    } = this.props;\n    const initValues = this.state.userInit;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Formik, {\n        enableReinitialize: true,\n        initialValues: initValues,\n        onSubmit: (values, _ref) => {\n          let {\n            setSubmitting\n          } = _ref;\n          setTimeout(() => {\n            setSubmitting(false);\n          }, 200);\n        },\n        validateOnChange: true,\n        validate: values => {\n          return this.onCustomValidation(values);\n        },\n        children: _ref2 => {\n          let {\n            errors,\n            touched\n          } = _ref2;\n          return /*#__PURE__*/_jsxDEV(Form, {\n            children: /*#__PURE__*/_jsxDEV(CRow, {\n              children: [/*#__PURE__*/_jsxDEV(CCol, {\n                sm: \"12\",\n                md: \"6\",\n                lg: \"3\",\n                children: [/*#__PURE__*/_jsxDEV(CFormGroup, {\n                  children: [/*#__PURE__*/_jsxDEV(CLabel, {\n                    htmlFor: \"userName\",\n                    className: 'required',\n                    children: \"User Name\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 185,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(Field, {\n                    type: \"text\",\n                    name: \"userName\",\n                    placeholder: 'User Name',\n                    className: getInputFieldClassNames(touched.userName, errors.userName)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 187,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 184,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                  name: \"userName\",\n                  render: msg => /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: 'formik-error-message',\n                    children: msg\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 197,\n                    columnNumber: 62\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 195,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 183,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(CCol, {\n                sm: \"12\",\n                md: \"6\",\n                lg: \"3\",\n                children: [/*#__PURE__*/_jsxDEV(CFormGroup, {\n                  children: [/*#__PURE__*/_jsxDEV(CLabel, {\n                    htmlFor: \"title\",\n                    className: 'required',\n                    children: \"Title\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 205,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(Field, {\n                    name: \"title\",\n                    className: getInputFieldClassNames(touched.title, errors.title),\n                    children: _ref3 => {\n                      let {\n                        field,\n                        // { name, value, onChange, onBlur }\n                        form: {\n                          touched,\n                          errors\n                        },\n                        // also values, setXXXX, handleXXXX, dirty, isValid, status, etc.\n                        meta\n                      } = _ref3;\n                      return /*#__PURE__*/_jsxDEV(CSelect, {\n                        custom: true,\n                        name: \"title\",\n                        ...field,\n                        children: getCommonTitleOptions(false).map(item => {\n                          return /*#__PURE__*/_jsxDEV(\"option\", {\n                            value: item.key,\n                            children: item.value\n                          }, item.key, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 220,\n                            columnNumber: 69\n                          }, this);\n                        })\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 216,\n                        columnNumber: 53\n                      }, this);\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 207,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 204,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                  name: \"title\",\n                  render: msg => /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: 'formik-error-message',\n                    children: msg\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 231,\n                    columnNumber: 62\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 229,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 202,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(CCol, {\n                sm: \"12\",\n                md: \"6\",\n                lg: \"3\",\n                children: [/*#__PURE__*/_jsxDEV(CFormGroup, {\n                  children: [/*#__PURE__*/_jsxDEV(CLabel, {\n                    htmlFor: \"firstName\",\n                    className: 'required',\n                    children: \"First Name\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 238,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(Field, {\n                    type: \"text\",\n                    name: \"firstName\",\n                    placeholder: 'First Name',\n                    className: getInputFieldClassNames(touched.firstName, errors.firstName)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 240,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 237,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                  name: \"firstName\",\n                  render: msg => /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: 'formik-error-message',\n                    children: msg\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 250,\n                    columnNumber: 62\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 248,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 236,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(CCol, {\n                sm: \"12\",\n                md: \"6\",\n                lg: \"3\",\n                children: [/*#__PURE__*/_jsxDEV(CFormGroup, {\n                  children: [/*#__PURE__*/_jsxDEV(CLabel, {\n                    htmlFor: \"lastName\",\n                    className: 'required',\n                    children: \"Last Name\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 257,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(Field, {\n                    type: \"text\",\n                    name: \"lastName\",\n                    placeholder: 'Last Name',\n                    className: getInputFieldClassNames(touched.lastName, errors.lastName)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 259,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 256,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                  name: \"lastName\",\n                  render: msg => /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: 'formik-error-message',\n                    children: msg\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 269,\n                    columnNumber: 62\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 267,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 255,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(CCol, {\n                sm: \"12\",\n                md: \"6\",\n                lg: \"3\",\n                children: [/*#__PURE__*/_jsxDEV(CFormGroup, {\n                  children: [/*#__PURE__*/_jsxDEV(CLabel, {\n                    htmlFor: \"contactNo\",\n                    className: 'required',\n                    children: \"Contact Number\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 276,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(Field, {\n                    type: \"text\",\n                    name: \"contactNo\",\n                    placeholder: 'Contact Number',\n                    className: getInputFieldClassNames(touched.contactNo, errors.contactNo)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 278,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 275,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                  name: \"contactNo\",\n                  render: msg => /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: 'formik-error-message',\n                    children: msg\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 288,\n                    columnNumber: 62\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 286,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 274,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(CCol, {\n                sm: \"12\",\n                md: \"6\",\n                lg: \"3\",\n                children: [/*#__PURE__*/_jsxDEV(CFormGroup, {\n                  children: [/*#__PURE__*/_jsxDEV(CLabel, {\n                    htmlFor: \"email\",\n                    className: 'required',\n                    children: \"Email\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 295,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(Field, {\n                    type: \"text\",\n                    name: \"email\",\n                    placeholder: 'Email',\n                    className: getInputFieldClassNames(touched.email, errors.email)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 297,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 294,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                  name: \"email\",\n                  render: msg => /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: 'formik-error-message',\n                    children: msg\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 307,\n                    columnNumber: 62\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 305,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 293,\n                columnNumber: 37\n              }, this), isNew && /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(CCol, {\n                  sm: \"12\",\n                  md: \"6\",\n                  lg: \"3\",\n                  children: [/*#__PURE__*/_jsxDEV(CFormGroup, {\n                    children: [/*#__PURE__*/_jsxDEV(CLabel, {\n                      htmlFor: \"password\",\n                      className: 'required',\n                      children: \"Password\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 317,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(Field, {\n                      type: \"password\",\n                      name: \"password\",\n                      placeholder: 'Password',\n                      className: getInputFieldClassNames(touched.password, errors.password)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 320,\n                      columnNumber: 57\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 316,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                    name: \"password\",\n                    render: msg => /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: 'formik-error-message',\n                      children: msg\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 330,\n                      columnNumber: 74\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 328,\n                    columnNumber: 53\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 315,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(CCol, {\n                  sm: \"12\",\n                  md: \"6\",\n                  lg: \"3\",\n                  children: [/*#__PURE__*/_jsxDEV(CFormGroup, {\n                    children: [/*#__PURE__*/_jsxDEV(CLabel, {\n                      htmlFor: \"passwordConfirm\",\n                      className: 'required',\n                      children: \"Password Confirm\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 337,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(Field, {\n                      type: \"password\",\n                      name: \"passwordConfirm\",\n                      placeholder: 'Password Confirm',\n                      className: getInputFieldClassNames(touched.passwordConfirm, errors.passwordConfirm)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 340,\n                      columnNumber: 57\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 336,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                    name: \"passwordConfirm\",\n                    render: msg => /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: 'formik-error-message',\n                      children: msg\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 350,\n                      columnNumber: 74\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 348,\n                    columnNumber: 53\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 335,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true), /*#__PURE__*/_jsxDEV(CCol, {\n                sm: \"12\",\n                md: \"6\",\n                lg: \"3\",\n                children: [/*#__PURE__*/_jsxDEV(CFormGroup, {\n                  children: [/*#__PURE__*/_jsxDEV(CLabel, {\n                    htmlFor: \"status\",\n                    className: 'required',\n                    children: \"Status\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 361,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(Field, {\n                    name: \"status\",\n                    className: getInputFieldClassNames(touched.status, errors.status),\n                    children: _ref4 => {\n                      let {\n                        field,\n                        // { name, value, onChange, onBlur }\n                        form: {\n                          touched,\n                          errors\n                        },\n                        // also values, setXXXX, handleXXXX, dirty, isValid, status, etc.\n                        meta\n                      } = _ref4;\n                      return /*#__PURE__*/_jsxDEV(CSelect, {\n                        custom: true,\n                        name: \"status\",\n                        ...field,\n                        children: getCommonStatusOptions(false).map(item => {\n                          return /*#__PURE__*/_jsxDEV(\"option\", {\n                            value: item.key,\n                            children: item.value\n                          }, item.key, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 376,\n                            columnNumber: 69\n                          }, this);\n                        })\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 372,\n                        columnNumber: 53\n                      }, this);\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 363,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 360,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                  name: \"status\",\n                  render: msg => /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: 'formik-error-message',\n                    children: msg\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 387,\n                    columnNumber: 62\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 385,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 358,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 29\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({\n    onFormChange: Action.onFormChnange,\n    onCheckBoxChange: userAction.onRoleActionChange\n  }, dispatch);\n};\n\nconst mapStateToProps = _ref5 => {\n  let {\n    users\n  } = _ref5;\n  return {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserAddEditForm);","map":{"version":3,"sources":["C:/Users/chamald/Desktop/Chamal/react/react-app/src/app/views/admin/config/user/add-edit/components/UserAddEditForm.js"],"names":["React","Component","ErrorMessage","Field","Form","Formik","bindActionCreators","Action","connect","Constants","userAction","customValidator","CCol","CFormGroup","CLabel","CRow","CSelect","getCommonStatusOptions","getCommonTitleOptions","getInputFieldClassNames","UserAddEditForm","location","state","userInit","userName","title","firstName","lastName","contactNo","password","passwordConfirm","email","status","userType","setInitialValues","user","props","TITLE_CONST","MR","STATUS_CONST","ACT","setState","onCustomValidation","values","onFormChange","validate","getValidations","passwordMatchValidation","isValid","errors","validateObj","isNew","validationMessage","passwordValidations","defaultValidations","required","message","maxLength","value","Object","assign","componentDidMount","componentWillUnmount","componentDidUpdate","prevProps","prevState","snapshot","render","initValues","setSubmitting","setTimeout","touched","msg","field","form","meta","map","item","key","mapDispatchToProps","dispatch","onFormChnange","onCheckBoxChange","onRoleActionChange","mapStateToProps","users"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,YAAR,EAAsBC,KAAtB,EAA6BC,IAA7B,EAAmCC,MAAnC,QAAgD,QAAhD;AACA,SAAQC,kBAAR,QAAiC,OAAjC;AACA,OAAO,KAAKC,MAAZ,MAAwB,2BAAxB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAOC,SAAP,MAAsB,sCAAtB;AACA,OAAO,KAAKC,UAAZ,MAA4B,qBAA5B;AACA,OAAOC,eAAP,MAA4B,2CAA5B;AACA,SAAQC,IAAR,EAAcC,UAAd,EAA0BC,MAA1B,EAAkCC,IAAlC,EAAwCC,OAAxC,QAAsD,eAAtD;AACA,SACIC,sBADJ,EAEIC,qBAFJ,EAGIC,uBAHJ,QAIO,sCAJP;;;;AAOA,MAAMC,eAAN,SAA8BnB,SAA9B,CAAwC;AAAA;AAAA;AAAA,SAEpCoB,QAFoC,GAEzB,IAFyB;AAAA,SAIpCC,KAJoC,GAI5B;AACJC,MAAAA,QAAQ,EAAE;AACNC,QAAAA,QAAQ,EAAE,EADJ;AAENC,QAAAA,KAAK,EAAE,IAFD;AAGNC,QAAAA,SAAS,EAAE,EAHL;AAINC,QAAAA,QAAQ,EAAE,EAJJ;AAKNC,QAAAA,SAAS,EAAC,EALJ;AAMNC,QAAAA,QAAQ,EAAE,EANJ;AAONC,QAAAA,eAAe,EAAE,EAPX;AAQNC,QAAAA,KAAK,EAAE,EARD;AASNC,QAAAA,MAAM,EAAE,KATF;AAUNC,QAAAA,QAAQ,EAAE;AAVJ;AADN,KAJ4B;;AAAA,SAgCpCC,gBAhCoC,GAgCjB,MAAM;AACrB,YAAM;AAACC,QAAAA;AAAD,UAAS,KAAKC,KAApB;AACA,UAAIb,QAAQ,GAAG;AACXC,QAAAA,QAAQ,EAAEW,IAAI,CAACX,QAAL,GAAgBW,IAAI,CAACX,QAArB,GAAgC,EAD/B;AAEXC,QAAAA,KAAK,EAAEU,IAAI,CAACV,KAAL,GAAaU,IAAI,CAACV,KAAlB,GAA0BhB,SAAS,CAAC4B,WAAV,CAAsBC,EAF5C;AAGXZ,QAAAA,SAAS,EAAES,IAAI,CAACT,SAAL,GAAiBS,IAAI,CAACT,SAAtB,GAAkC,EAHlC;AAIXC,QAAAA,QAAQ,EAAEQ,IAAI,CAACR,QAAL,GAAgBQ,IAAI,CAACR,QAArB,GAAgC,EAJ/B;AAKXC,QAAAA,SAAS,EAAEO,IAAI,CAACP,SAAL,GAAiBO,IAAI,CAACP,SAAtB,GAAkC,EALlC;AAMXC,QAAAA,QAAQ,EAAEM,IAAI,CAACN,QAAL,GAAgBM,IAAI,CAACN,QAArB,GAAgC,EAN/B;AAOXC,QAAAA,eAAe,EAAEK,IAAI,CAACL,eAAL,GAAuBK,IAAI,CAACL,eAA5B,GAA8C,EAPpD;AAQXC,QAAAA,KAAK,EAAEI,IAAI,CAACJ,KAAL,GAAaI,IAAI,CAACJ,KAAlB,GAA0B,EARtB;AASXE,QAAAA,QAAQ,EAAEE,IAAI,CAACF,QAAL,GAAgBE,IAAI,CAACF,QAArB,GAAgC,EAT/B;AAUXD,QAAAA,MAAM,EAAEG,IAAI,CAACH,MAAL,GAAcG,IAAI,CAACH,MAAnB,GAA4BvB,SAAS,CAAC8B,YAAV,CAAuBC;AAVhD,OAAf;AAaA,WAAKC,QAAL,CAAc;AACVlB,QAAAA,QAAQ,EAAEA;AADA,OAAd,EAGG,MAAM;AACL,aAAKmB,kBAAL,CAAwBnB,QAAxB;AACH,OALD;AAMH,KArDmC;;AAAA,SAuDpCmB,kBAvDoC,GAuDdC,MAAD,IAAY;AAC7B,YAAM;AAACC,QAAAA;AAAD,UAAiB,KAAKR,KAA5B;AAEA,UAAIS,QAAQ,GAAGlC,eAAe,CAACgC,MAAD,EAAS,KAAKG,cAAL,EAAT,CAA9B;AAEA,WAAKC,uBAAL,CACIJ,MAAM,CAACd,QADX,EAEIc,MAAM,CAACb,eAFX,EAGIe,QAHJ;AAMAD,MAAAA,YAAY,CAAC;AACTI,QAAAA,OAAO,EAAEH,QAAQ,CAACG,OADT;AAETL,QAAAA,MAAM,EAAEA;AAFC,OAAD,CAAZ;AAKA,aAAOE,QAAQ,CAACI,MAAhB;AACH,KAxEmC;;AAAA,SA0EpCF,uBA1EoC,GA0EV,CAAClB,QAAD,EAAWC,eAAX,EAA4BoB,WAA5B,KAA4C;AAClE,YAAM;AAACC,QAAAA;AAAD,UAAU,KAAKf,KAArB;AACA,UAAIY,OAAJ;AACA,UAAII,iBAAiB,GAAG,oBAAxB;;AAEA,UAAI,CAACD,KAAL,EAAY;AACR;AACH;;AAEDH,MAAAA,OAAO,GAAGnB,QAAQ,KAAKC,eAAvB;AAEAoB,MAAAA,WAAW,CAACF,OAAZ,GAAsBE,WAAW,CAACF,OAAZ,IAAuBA,OAA7C;;AAEA,UAAI,CAACA,OAAL,EAAc;AACVE,QAAAA,WAAW,CAACD,MAAZ,CAAmBpB,QAAnB,GAA8BqB,WAAW,CAACD,MAAZ,CAAmBpB,QAAnB,GACzBqB,WAAW,CAACD,MAAZ,CAAmBpB,QAAnB,GAA8B,IAA9B,GAAqCuB,iBADZ,GACiCA,iBAD/D;AAGAF,QAAAA,WAAW,CAACD,MAAZ,CAAmBnB,eAAnB,GAAqCoB,WAAW,CAACD,MAAZ,CAAmBnB,eAAnB,GAChCoB,WAAW,CAACD,MAAZ,CAAmBnB,eAAnB,GAAqC,IAArC,GAA4CsB,iBADZ,GACiCA,iBADtE;AAEH;AACJ,KA9FmC;;AAAA,SAgGpCN,cAhGoC,GAgGnB,MAAM;AACnB,YAAM;AAACK,QAAAA;AAAD,UAAU,KAAKf,KAArB;AACA,UAAIiB,mBAAmB,GAAG,EAA1B;AACA,UAAIC,kBAAkB,GAAG;AACrB9B,QAAAA,QAAQ,EAAE;AACN+B,UAAAA,QAAQ,EAAE;AAACC,YAAAA,OAAO,EAAE;AAAV,WADJ;AAENC,UAAAA,SAAS,EAAE;AAACC,YAAAA,KAAK,EAAE;AAAR;AAFL,SADW;AAMrBhC,QAAAA,SAAS,EAAE;AACP6B,UAAAA,QAAQ,EAAE;AAACC,YAAAA,OAAO,EAAE;AAAV,WADH;AAEPC,UAAAA,SAAS,EAAE;AAACC,YAAAA,KAAK,EAAE;AAAR;AAFJ,SANU;AAWrB/B,QAAAA,QAAQ,EAAE;AACN4B,UAAAA,QAAQ,EAAE;AAACC,YAAAA,OAAO,EAAE;AAAV,WADJ;AAENC,UAAAA,SAAS,EAAE;AAACC,YAAAA,KAAK,EAAE;AAAR;AAFL,SAXW;AAgBrB3B,QAAAA,KAAK,EAAE;AACHwB,UAAAA,QAAQ,EAAE;AAACC,YAAAA,OAAO,EAAE;AAAV,WADP;AAEHC,UAAAA,SAAS,EAAE;AAACC,YAAAA,KAAK,EAAE;AAAR,WAFR;AAGH3B,UAAAA,KAAK,EAAE;AAHJ,SAhBc;AAqBrBH,QAAAA,SAAS,EAAE;AACP2B,UAAAA,QAAQ,EAAE;AAACC,YAAAA,OAAO,EAAE;AAAV,WADH;AAEPC,UAAAA,SAAS,EAAE;AAACC,YAAAA,KAAK,EAAE;AAAR;AAFJ;AArBU,OAAzB;;AA2BA,UAAIP,KAAJ,EAAW;AACPE,QAAAA,mBAAmB,GAAG;AAClBxB,UAAAA,QAAQ,EAAE;AACN0B,YAAAA,QAAQ,EAAE;AAACC,cAAAA,OAAO,EAAE;AAAV,aADJ;AAENC,YAAAA,SAAS,EAAE;AAACC,cAAAA,KAAK,EAAE;AAAR;AAFL,WADQ;AAMlB5B,UAAAA,eAAe,EAAE;AACbyB,YAAAA,QAAQ,EAAE;AAACC,cAAAA,OAAO,EAAE;AAAV,aADG;AAEbC,YAAAA,SAAS,EAAE;AAACC,cAAAA,KAAK,EAAE;AAAR;AAFE;AANC,SAAtB;AAWH;;AACD,aAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,kBAAlB,EAAsCD,mBAAtC,CAAP;AACH,KA5ImC;AAAA;;AAmBpCQ,EAAAA,iBAAiB,GAAG;AAChB,SAAK3B,gBAAL;AACH;;AAED4B,EAAAA,oBAAoB,GAAG,CACtB;;AAEDC,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuBC,QAAvB,EAAiC;AAC/C,QAAI,KAAK9B,KAAL,CAAWD,IAAX,KAAoB6B,SAAS,CAAC7B,IAAlC,EAAwC;AACpC,WAAKD,gBAAL;AACH;AACJ;;AAgHDiC,EAAAA,MAAM,GAAG;AAEL,UAAM;AAAChB,MAAAA;AAAD,QAAU,KAAKf,KAArB;AACA,UAAMgC,UAAU,GAAG,KAAK9C,KAAL,CAAWC,QAA9B;AAEA,wBACI;AAAA,6BACI,QAAC,MAAD;AACI,QAAA,kBAAkB,EAAE,IADxB;AAEI,QAAA,aAAa,EAAE6C,UAFnB;AAGI,QAAA,QAAQ,EAAE,CAACzB,MAAD,WAA6B;AAAA,cAApB;AAAC0B,YAAAA;AAAD,WAAoB;AACnCC,UAAAA,UAAU,CAAC,MAAM;AACbD,YAAAA,aAAa,CAAC,KAAD,CAAb;AACH,WAFS,EAEP,GAFO,CAAV;AAGH,SAPL;AAQI,QAAA,gBAAgB,EAAE,IARtB;AASI,QAAA,QAAQ,EAAG1B,MAAD,IAAY;AAClB,iBAAO,KAAKD,kBAAL,CAAwBC,MAAxB,CAAP;AACH,SAXL;AAAA,kBAaK,SAAuB;AAAA,cAAtB;AAACM,YAAAA,MAAD;AAASsB,YAAAA;AAAT,WAAsB;AACpB,8BACI,QAAC,IAAD;AAAA,mCACI,QAAC,IAAD;AAAA,sCACI,QAAC,IAAD;AAAM,gBAAA,EAAE,EAAC,IAAT;AAAc,gBAAA,EAAE,EAAC,GAAjB;AAAqB,gBAAA,EAAE,EAAC,GAAxB;AAAA,wCACI,QAAC,UAAD;AAAA,0CACI,QAAC,MAAD;AAAQ,oBAAA,OAAO,EAAC,UAAhB;AAA2B,oBAAA,SAAS,EAAE,UAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ,eAGI,QAAC,KAAD;AACI,oBAAA,IAAI,EAAC,MADT;AAEI,oBAAA,IAAI,EAAC,UAFT;AAGI,oBAAA,WAAW,EAAE,WAHjB;AAII,oBAAA,SAAS,EAAEpD,uBAAuB,CAACoD,OAAO,CAAC/C,QAAT,EAAmByB,MAAM,CAACzB,QAA1B;AAJtC;AAAA;AAAA;AAAA;AAAA,0BAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,eAYI,QAAC,YAAD;AACI,kBAAA,IAAI,EAAC,UADT;AAEI,kBAAA,MAAM,EAAGgD,GAAD,iBAAS;AACb,oBAAA,SAAS,EAAE,sBADE;AAAA,8BACuBA;AADvB;AAAA;AAAA;AAAA;AAAA;AAFrB;AAAA;AAAA;AAAA;AAAA,wBAZJ;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAoBI,QAAC,IAAD;AAAM,gBAAA,EAAE,EAAC,IAAT;AAAc,gBAAA,EAAE,EAAC,GAAjB;AAAqB,gBAAA,EAAE,EAAC,GAAxB;AAAA,wCAEI,QAAC,UAAD;AAAA,0CACI,QAAC,MAAD;AAAQ,oBAAA,OAAO,EAAC,OAAhB;AAAwB,oBAAA,SAAS,EAAE,UAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ,eAGI,QAAC,KAAD;AAAO,oBAAA,IAAI,EAAC,OAAZ;AACO,oBAAA,SAAS,EAAErD,uBAAuB,CAACoD,OAAO,CAAC9C,KAAT,EAAgBwB,MAAM,CAACxB,KAAvB,CADzC;AAAA,8BAGK;AAAA,0BAAC;AACIgD,wBAAAA,KADJ;AACW;AACPC,wBAAAA,IAAI,EAAE;AAACH,0BAAAA,OAAD;AAAUtB,0BAAAA;AAAV,yBAFV;AAE6B;AACzB0B,wBAAAA;AAHJ,uBAAD;AAAA,0CAMG,QAAC,OAAD;AAAS,wBAAA,MAAM,MAAf;AAAgB,wBAAA,IAAI,EAAC,OAArB;AAAA,2BAAiCF,KAAjC;AAAA,kCAEQvD,qBAAqB,CAAC,KAAD,CAArB,CAA6B0D,GAA7B,CAAkCC,IAAD,IAAU;AACvC,8CACI;AACQ,4BAAA,KAAK,EAAEA,IAAI,CAACC,GADpB;AAAA,sCAC0BD,IAAI,CAACnB;AAD/B,6BAAamB,IAAI,CAACC,GAAlB;AAAA;AAAA;AAAA;AAAA,kCADJ;AAIH,yBALD;AAFR;AAAA;AAAA;AAAA;AAAA,8BANH;AAAA;AAHL;AAAA;AAAA;AAAA;AAAA,0BAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,wBAFJ,eA2BI,QAAC,YAAD;AACI,kBAAA,IAAI,EAAC,OADT;AAEI,kBAAA,MAAM,EAAGN,GAAD,iBAAS;AACb,oBAAA,SAAS,EAAE,sBADE;AAAA,8BACuBA;AADvB;AAAA;AAAA;AAAA;AAAA;AAFrB;AAAA;AAAA;AAAA;AAAA,wBA3BJ;AAAA;AAAA;AAAA;AAAA;AAAA,sBApBJ,eAsDI,QAAC,IAAD;AAAM,gBAAA,EAAE,EAAC,IAAT;AAAc,gBAAA,EAAE,EAAC,GAAjB;AAAqB,gBAAA,EAAE,EAAC,GAAxB;AAAA,wCACI,QAAC,UAAD;AAAA,0CACI,QAAC,MAAD;AAAQ,oBAAA,OAAO,EAAC,WAAhB;AAA4B,oBAAA,SAAS,EAAE,UAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ,eAGI,QAAC,KAAD;AACI,oBAAA,IAAI,EAAC,MADT;AAEI,oBAAA,IAAI,EAAC,WAFT;AAGI,oBAAA,WAAW,EAAE,YAHjB;AAII,oBAAA,SAAS,EAAErD,uBAAuB,CAACoD,OAAO,CAAC7C,SAAT,EAAoBuB,MAAM,CAACvB,SAA3B;AAJtC;AAAA;AAAA;AAAA;AAAA,0BAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,eAYI,QAAC,YAAD;AACI,kBAAA,IAAI,EAAC,WADT;AAEI,kBAAA,MAAM,EAAG8C,GAAD,iBAAS;AACb,oBAAA,SAAS,EAAE,sBADE;AAAA,8BACuBA;AADvB;AAAA;AAAA;AAAA;AAAA;AAFrB;AAAA;AAAA;AAAA;AAAA,wBAZJ;AAAA;AAAA;AAAA;AAAA;AAAA,sBAtDJ,eAyEI,QAAC,IAAD;AAAM,gBAAA,EAAE,EAAC,IAAT;AAAc,gBAAA,EAAE,EAAC,GAAjB;AAAqB,gBAAA,EAAE,EAAC,GAAxB;AAAA,wCACI,QAAC,UAAD;AAAA,0CACI,QAAC,MAAD;AAAQ,oBAAA,OAAO,EAAC,UAAhB;AAA2B,oBAAA,SAAS,EAAE,UAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ,eAGI,QAAC,KAAD;AACI,oBAAA,IAAI,EAAC,MADT;AAEI,oBAAA,IAAI,EAAC,UAFT;AAGI,oBAAA,WAAW,EAAE,WAHjB;AAII,oBAAA,SAAS,EAAErD,uBAAuB,CAACoD,OAAO,CAAC5C,QAAT,EAAmBsB,MAAM,CAACtB,QAA1B;AAJtC;AAAA;AAAA;AAAA;AAAA,0BAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,eAYI,QAAC,YAAD;AACI,kBAAA,IAAI,EAAC,UADT;AAEI,kBAAA,MAAM,EAAG6C,GAAD,iBAAS;AACb,oBAAA,SAAS,EAAE,sBADE;AAAA,8BACuBA;AADvB;AAAA;AAAA;AAAA;AAAA;AAFrB;AAAA;AAAA;AAAA;AAAA,wBAZJ;AAAA;AAAA;AAAA;AAAA;AAAA,sBAzEJ,eA4FI,QAAC,IAAD;AAAM,gBAAA,EAAE,EAAC,IAAT;AAAc,gBAAA,EAAE,EAAC,GAAjB;AAAqB,gBAAA,EAAE,EAAC,GAAxB;AAAA,wCACI,QAAC,UAAD;AAAA,0CACI,QAAC,MAAD;AAAQ,oBAAA,OAAO,EAAC,WAAhB;AAA4B,oBAAA,SAAS,EAAE,UAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ,eAGI,QAAC,KAAD;AACI,oBAAA,IAAI,EAAC,MADT;AAEI,oBAAA,IAAI,EAAC,WAFT;AAGI,oBAAA,WAAW,EAAE,gBAHjB;AAII,oBAAA,SAAS,EAAErD,uBAAuB,CAACoD,OAAO,CAAC3C,SAAT,EAAoBqB,MAAM,CAACrB,SAA3B;AAJtC;AAAA;AAAA;AAAA;AAAA,0BAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,eAYI,QAAC,YAAD;AACI,kBAAA,IAAI,EAAC,WADT;AAEI,kBAAA,MAAM,EAAG4C,GAAD,iBAAS;AACb,oBAAA,SAAS,EAAE,sBADE;AAAA,8BACuBA;AADvB;AAAA;AAAA;AAAA;AAAA;AAFrB;AAAA;AAAA;AAAA;AAAA,wBAZJ;AAAA;AAAA;AAAA;AAAA;AAAA,sBA5FJ,eA+GI,QAAC,IAAD;AAAM,gBAAA,EAAE,EAAC,IAAT;AAAc,gBAAA,EAAE,EAAC,GAAjB;AAAqB,gBAAA,EAAE,EAAC,GAAxB;AAAA,wCACI,QAAC,UAAD;AAAA,0CACI,QAAC,MAAD;AAAQ,oBAAA,OAAO,EAAC,OAAhB;AAAwB,oBAAA,SAAS,EAAE,UAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ,eAGI,QAAC,KAAD;AACI,oBAAA,IAAI,EAAC,MADT;AAEI,oBAAA,IAAI,EAAC,OAFT;AAGI,oBAAA,WAAW,EAAE,OAHjB;AAII,oBAAA,SAAS,EAAErD,uBAAuB,CAACoD,OAAO,CAACxC,KAAT,EAAgBkB,MAAM,CAAClB,KAAvB;AAJtC;AAAA;AAAA;AAAA;AAAA,0BAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,eAYI,QAAC,YAAD;AACI,kBAAA,IAAI,EAAC,OADT;AAEI,kBAAA,MAAM,EAAGyC,GAAD,iBAAS;AACb,oBAAA,SAAS,EAAE,sBADE;AAAA,8BACuBA;AADvB;AAAA;AAAA;AAAA;AAAA;AAFrB;AAAA;AAAA;AAAA;AAAA,wBAZJ;AAAA;AAAA;AAAA;AAAA;AAAA,sBA/GJ,EAmIQrB,KAAK,iBACD;AAAA,wCACI,QAAC,IAAD;AAAM,kBAAA,EAAE,EAAC,IAAT;AAAc,kBAAA,EAAE,EAAC,GAAjB;AAAqB,kBAAA,EAAE,EAAC,GAAxB;AAAA,0CACI,QAAC,UAAD;AAAA,4CACI,QAAC,MAAD;AAAQ,sBAAA,OAAO,EAAC,UAAhB;AACQ,sBAAA,SAAS,EAAE,UADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADJ,eAII,QAAC,KAAD;AACI,sBAAA,IAAI,EAAC,UADT;AAEI,sBAAA,IAAI,EAAC,UAFT;AAGI,sBAAA,WAAW,EAAE,UAHjB;AAII,sBAAA,SAAS,EAAEhC,uBAAuB,CAACoD,OAAO,CAAC1C,QAAT,EAAmBoB,MAAM,CAACpB,QAA1B;AAJtC;AAAA;AAAA;AAAA;AAAA,4BAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ,eAaI,QAAC,YAAD;AACI,oBAAA,IAAI,EAAC,UADT;AAEI,oBAAA,MAAM,EAAG2C,GAAD,iBAAS;AACb,sBAAA,SAAS,EAAE,sBADE;AAAA,gCACuBA;AADvB;AAAA;AAAA;AAAA;AAAA;AAFrB;AAAA;AAAA;AAAA;AAAA,0BAbJ;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,eAqBI,QAAC,IAAD;AAAM,kBAAA,EAAE,EAAC,IAAT;AAAc,kBAAA,EAAE,EAAC,GAAjB;AAAqB,kBAAA,EAAE,EAAC,GAAxB;AAAA,0CACI,QAAC,UAAD;AAAA,4CACI,QAAC,MAAD;AAAQ,sBAAA,OAAO,EAAC,iBAAhB;AAAkC,sBAAA,SAAS,EAAE,UAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADJ,eAII,QAAC,KAAD;AACI,sBAAA,IAAI,EAAC,UADT;AAEI,sBAAA,IAAI,EAAC,iBAFT;AAGI,sBAAA,WAAW,EAAE,kBAHjB;AAII,sBAAA,SAAS,EAAErD,uBAAuB,CAACoD,OAAO,CAACzC,eAAT,EAA0BmB,MAAM,CAACnB,eAAjC;AAJtC;AAAA;AAAA;AAAA;AAAA,4BAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ,eAaI,QAAC,YAAD;AACI,oBAAA,IAAI,EAAC,iBADT;AAEI,oBAAA,MAAM,EAAG0C,GAAD,iBAAS;AACb,sBAAA,SAAS,EAAE,sBADE;AAAA,gCACuBA;AADvB;AAAA;AAAA;AAAA;AAAA;AAFrB;AAAA;AAAA;AAAA;AAAA,0BAbJ;AAAA;AAAA;AAAA;AAAA;AAAA,wBArBJ;AAAA,8BApIZ,eAgLI,QAAC,IAAD;AAAM,gBAAA,EAAE,EAAC,IAAT;AAAc,gBAAA,EAAE,EAAC,GAAjB;AAAqB,gBAAA,EAAE,EAAC,GAAxB;AAAA,wCAEI,QAAC,UAAD;AAAA,0CACI,QAAC,MAAD;AAAQ,oBAAA,OAAO,EAAC,QAAhB;AAAyB,oBAAA,SAAS,EAAE,UAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ,eAGI,QAAC,KAAD;AAAO,oBAAA,IAAI,EAAC,QAAZ;AACO,oBAAA,SAAS,EAAErD,uBAAuB,CAACoD,OAAO,CAACvC,MAAT,EAAiBiB,MAAM,CAACjB,MAAxB,CADzC;AAAA,8BAGK;AAAA,0BAAC;AACIyC,wBAAAA,KADJ;AACW;AACPC,wBAAAA,IAAI,EAAE;AAACH,0BAAAA,OAAD;AAAUtB,0BAAAA;AAAV,yBAFV;AAE6B;AACzB0B,wBAAAA;AAHJ,uBAAD;AAAA,0CAMG,QAAC,OAAD;AAAS,wBAAA,MAAM,MAAf;AAAgB,wBAAA,IAAI,EAAC,QAArB;AAAA,2BAAkCF,KAAlC;AAAA,kCAEQxD,sBAAsB,CAAC,KAAD,CAAtB,CAA8B2D,GAA9B,CAAmCC,IAAD,IAAU;AACxC,8CACI;AACQ,4BAAA,KAAK,EAAEA,IAAI,CAACC,GADpB;AAAA,sCAC0BD,IAAI,CAACnB;AAD/B,6BAAamB,IAAI,CAACC,GAAlB;AAAA;AAAA;AAAA;AAAA,kCADJ;AAIH,yBALD;AAFR;AAAA;AAAA;AAAA;AAAA,8BANH;AAAA;AAHL;AAAA;AAAA;AAAA;AAAA,0BAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,wBAFJ,eA2BI,QAAC,YAAD;AACI,kBAAA,IAAI,EAAC,QADT;AAEI,kBAAA,MAAM,EAAGN,GAAD,iBAAS;AACb,oBAAA,SAAS,EAAE,sBADE;AAAA,8BACuBA;AADvB;AAAA;AAAA;AAAA;AAAA;AAFrB;AAAA;AAAA;AAAA;AAAA,wBA3BJ;AAAA;AAAA;AAAA;AAAA;AAAA,sBAhLJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBADJ;AAsNH;AApOL;AAAA;AAAA;AAAA;AAAA;AADJ,qBADJ;AA0OH;;AA7XmC;;AAgYxC,MAAMO,kBAAkB,GAAIC,QAAD,IAAc;AACrC,SAAO1E,kBAAkB,CAAC;AACtBsC,IAAAA,YAAY,EAAErC,MAAM,CAAC0E,aADC;AAEtBC,IAAAA,gBAAgB,EAAExE,UAAU,CAACyE;AAFP,GAAD,EAItBH,QAJsB,CAAzB;AAMH,CAPD;;AASA,MAAMI,eAAe,GAAG;AAAA,MAAC;AAACC,IAAAA;AAAD,GAAD;AAAA,SAAc,EAAd;AAAA,CAAxB;;AAEA,eAAe7E,OAAO,CAAC4E,eAAD,EAAkBL,kBAAlB,CAAP,CAA6C3D,eAA7C,CAAf","sourcesContent":["import React, {Component} from \"react\";\nimport {ErrorMessage, Field, Form, Formik} from \"formik\";\nimport {bindActionCreators} from \"redux\";\nimport * as Action from \"../../store/actions/index\"\nimport {connect} from \"react-redux\";\nimport Constants from \"../../../../../../../utils/Constants\";\nimport * as userAction from \"../../store/actions\";\nimport customValidator from \"../../../../../../../utils/ValidationUtil\";\nimport {CCol, CFormGroup, CLabel, CRow, CSelect} from \"@coreui/react\";\nimport {\n    getCommonStatusOptions,\n    getCommonTitleOptions,\n    getInputFieldClassNames\n} from \"../../../../../../../utils/FormUtils\";\n\n\nclass UserAddEditForm extends Component {\n\n    location = null;\n\n    state = {\n        userInit: {\n            userName: '',\n            title: 'MR',\n            firstName: '',\n            lastName: '',\n            contactNo:'',\n            password: '',\n            passwordConfirm: '',\n            email: '',\n            status: 'ACT',\n            userType: '',\n        },\n    };\n\n    componentDidMount() {\n        this.setInitialValues();\n    }\n\n    componentWillUnmount() {\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (this.props.user !== prevProps.user) {\n            this.setInitialValues();\n        }\n    }\n\n    setInitialValues = () => {\n        const {user} = this.props;\n        let userInit = {\n            userName: user.userName ? user.userName : '',\n            title: user.title ? user.title : Constants.TITLE_CONST.MR,\n            firstName: user.firstName ? user.firstName : '',\n            lastName: user.lastName ? user.lastName : '',\n            contactNo: user.contactNo ? user.contactNo : '',\n            password: user.password ? user.password : '',\n            passwordConfirm: user.passwordConfirm ? user.passwordConfirm : '',\n            email: user.email ? user.email : '',\n            userType: user.userType ? user.userType : '',\n            status: user.status ? user.status : Constants.STATUS_CONST.ACT\n        };\n\n        this.setState({\n            userInit: userInit,\n\n        }, () => {\n            this.onCustomValidation(userInit);\n        })\n    };\n\n    onCustomValidation = (values) => {\n        const {onFormChange} = this.props;\n\n        let validate = customValidator(values, this.getValidations());\n\n        this.passwordMatchValidation(\n            values.password,\n            values.passwordConfirm,\n            validate\n        );\n\n        onFormChange({\n            isValid: validate.isValid,\n            values: values\n        });\n\n        return validate.errors;\n    };\n\n    passwordMatchValidation = (password, passwordConfirm, validateObj) => {\n        const {isNew} = this.props;\n        let isValid;\n        let validationMessage = 'Password not match';\n\n        if (!isNew) {\n            return;\n        }\n\n        isValid = password === passwordConfirm;\n\n        validateObj.isValid = validateObj.isValid && isValid;\n\n        if (!isValid) {\n            validateObj.errors.password = validateObj.errors.password ?\n                (validateObj.errors.password + ', ' + validationMessage) : validationMessage;\n\n            validateObj.errors.passwordConfirm = validateObj.errors.passwordConfirm ?\n                (validateObj.errors.passwordConfirm + ', ' + validationMessage) : validationMessage;\n        }\n    };\n\n    getValidations = () => {\n        const {isNew} = this.props;\n        let passwordValidations = {};\n        let defaultValidations = {\n            userName: {\n                required: {message: 'Required'},\n                maxLength: {value: 100}\n            },\n\n            firstName: {\n                required: {message: 'Required'},\n                maxLength: {value: 255}\n            },\n\n            lastName: {\n                required: {message: 'Required'},\n                maxLength: {value: 255}\n            },\n\n            email: {\n                required: {message: 'Required'},\n                maxLength: {value: 255},\n                email: {}\n            },\n            contactNo: {\n                required: {message: 'Required'},\n                maxLength: {value: 12}\n            }\n        };\n\n        if (isNew) {\n            passwordValidations = {\n                password: {\n                    required: {message: 'Required'},\n                    maxLength: {value: 100}\n                },\n\n                passwordConfirm: {\n                    required: {message: 'Required'},\n                    maxLength: {value: 100}\n                }\n            };\n        }\n        return Object.assign({}, defaultValidations, passwordValidations);\n    };\n\n    render() {\n\n        const {isNew} = this.props;\n        const initValues = this.state.userInit;\n\n        return (\n            <>\n                <Formik\n                    enableReinitialize={true}\n                    initialValues={initValues}\n                    onSubmit={(values, {setSubmitting}) => {\n                        setTimeout(() => {\n                            setSubmitting(false)\n                        }, 200)\n                    }}\n                    validateOnChange={true}\n                    validate={(values) => {\n                        return this.onCustomValidation(values);\n                    }}\n                >\n                    {({errors, touched}) => {\n                        return (\n                            <Form>\n                                <CRow>\n                                    <CCol sm=\"12\" md=\"6\" lg=\"3\">\n                                        <CFormGroup>\n                                            <CLabel htmlFor=\"userName\" className={'required'}>User Name</CLabel>\n\n                                            <Field\n                                                type=\"text\"\n                                                name=\"userName\"\n                                                placeholder={'User Name'}\n                                                className={getInputFieldClassNames(touched.userName, errors.userName)}\n                                            />\n                                        </CFormGroup>\n\n                                        <ErrorMessage\n                                            name=\"userName\"\n                                            render={(msg) => <div\n                                                className={'formik-error-message'}>{msg}</div>}\n                                        />\n                                    </CCol>\n\n                                    <CCol sm=\"12\" md=\"6\" lg=\"3\">\n\n                                        <CFormGroup>\n                                            <CLabel htmlFor=\"title\" className={'required'}>Title</CLabel>\n\n                                            <Field name=\"title\"\n                                                   className={getInputFieldClassNames(touched.title, errors.title)}\n                                            >\n                                                {({\n                                                      field, // { name, value, onChange, onBlur }\n                                                      form: {touched, errors}, // also values, setXXXX, handleXXXX, dirty, isValid, status, etc.\n                                                      meta,\n                                                  }) => (\n\n                                                    <CSelect custom name=\"title\" {...field}>\n                                                        {\n                                                            getCommonTitleOptions(false).map((item) => {\n                                                                return (\n                                                                    <option key={item.key}\n                                                                            value={item.key}>{item.value}</option>\n                                                                );\n                                                            })\n                                                        }\n                                                    </CSelect>\n                                                )}\n                                            </Field>\n                                        </CFormGroup>\n                                        <ErrorMessage\n                                            name=\"title\"\n                                            render={(msg) => <div\n                                                className={'formik-error-message'}>{msg}</div>}\n                                        />\n                                    </CCol>\n\n                                    <CCol sm=\"12\" md=\"6\" lg=\"3\">\n                                        <CFormGroup>\n                                            <CLabel htmlFor=\"firstName\" className={'required'}>First Name</CLabel>\n\n                                            <Field\n                                                type=\"text\"\n                                                name=\"firstName\"\n                                                placeholder={'First Name'}\n                                                className={getInputFieldClassNames(touched.firstName, errors.firstName)}\n                                            />\n                                        </CFormGroup>\n\n                                        <ErrorMessage\n                                            name=\"firstName\"\n                                            render={(msg) => <div\n                                                className={'formik-error-message'}>{msg}</div>}\n                                        />\n                                    </CCol>\n\n                                    <CCol sm=\"12\" md=\"6\" lg=\"3\">\n                                        <CFormGroup>\n                                            <CLabel htmlFor=\"lastName\" className={'required'}>Last Name</CLabel>\n\n                                            <Field\n                                                type=\"text\"\n                                                name=\"lastName\"\n                                                placeholder={'Last Name'}\n                                                className={getInputFieldClassNames(touched.lastName, errors.lastName)}\n                                            />\n                                        </CFormGroup>\n\n                                        <ErrorMessage\n                                            name=\"lastName\"\n                                            render={(msg) => <div\n                                                className={'formik-error-message'}>{msg}</div>}\n                                        />\n                                    </CCol>\n\n                                    <CCol sm=\"12\" md=\"6\" lg=\"3\">\n                                        <CFormGroup>\n                                            <CLabel htmlFor=\"contactNo\" className={'required'}>Contact Number</CLabel>\n\n                                            <Field\n                                                type=\"text\"\n                                                name=\"contactNo\"\n                                                placeholder={'Contact Number'}\n                                                className={getInputFieldClassNames(touched.contactNo, errors.contactNo)}\n                                            />\n                                        </CFormGroup>\n\n                                        <ErrorMessage\n                                            name=\"contactNo\"\n                                            render={(msg) => <div\n                                                className={'formik-error-message'}>{msg}</div>}\n                                        />\n                                    </CCol>\n\n                                    <CCol sm=\"12\" md=\"6\" lg=\"3\">\n                                        <CFormGroup>\n                                            <CLabel htmlFor=\"email\" className={'required'}>Email</CLabel>\n\n                                            <Field\n                                                type=\"text\"\n                                                name=\"email\"\n                                                placeholder={'Email'}\n                                                className={getInputFieldClassNames(touched.email, errors.email)}\n                                            />\n                                        </CFormGroup>\n\n                                        <ErrorMessage\n                                            name=\"email\"\n                                            render={(msg) => <div\n                                                className={'formik-error-message'}>{msg}</div>}\n                                        />\n                                    </CCol>\n\n                                    {\n                                        isNew && (\n                                            <>\n                                                <CCol sm=\"12\" md=\"6\" lg=\"3\">\n                                                    <CFormGroup>\n                                                        <CLabel htmlFor=\"password\"\n                                                                className={'required'}>Password</CLabel>\n\n                                                        <Field\n                                                            type=\"password\"\n                                                            name=\"password\"\n                                                            placeholder={'Password'}\n                                                            className={getInputFieldClassNames(touched.password, errors.password)}\n                                                        />\n                                                    </CFormGroup>\n\n                                                    <ErrorMessage\n                                                        name=\"password\"\n                                                        render={(msg) => <div\n                                                            className={'formik-error-message'}>{msg}</div>}\n                                                    />\n                                                </CCol>\n\n                                                <CCol sm=\"12\" md=\"6\" lg=\"3\">\n                                                    <CFormGroup>\n                                                        <CLabel htmlFor=\"passwordConfirm\" className={'required'}>Password\n                                                            Confirm</CLabel>\n\n                                                        <Field\n                                                            type=\"password\"\n                                                            name=\"passwordConfirm\"\n                                                            placeholder={'Password Confirm'}\n                                                            className={getInputFieldClassNames(touched.passwordConfirm, errors.passwordConfirm)}\n                                                        />\n                                                    </CFormGroup>\n\n                                                    <ErrorMessage\n                                                        name=\"passwordConfirm\"\n                                                        render={(msg) => <div\n                                                            className={'formik-error-message'}>{msg}</div>}\n                                                    />\n                                                </CCol>\n                                            </>\n                                        )\n                                    }\n\n                                    <CCol sm=\"12\" md=\"6\" lg=\"3\">\n\n                                        <CFormGroup>\n                                            <CLabel htmlFor=\"status\" className={'required'}>Status</CLabel>\n\n                                            <Field name=\"status\"\n                                                   className={getInputFieldClassNames(touched.status, errors.status)}\n                                            >\n                                                {({\n                                                      field, // { name, value, onChange, onBlur }\n                                                      form: {touched, errors}, // also values, setXXXX, handleXXXX, dirty, isValid, status, etc.\n                                                      meta,\n                                                  }) => (\n\n                                                    <CSelect custom name=\"status\" {...field}>\n                                                        {\n                                                            getCommonStatusOptions(false).map((item) => {\n                                                                return (\n                                                                    <option key={item.key}\n                                                                            value={item.key}>{item.value}</option>\n                                                                );\n                                                            })\n                                                        }\n                                                    </CSelect>\n                                                )}\n                                            </Field>\n                                        </CFormGroup>\n                                        <ErrorMessage\n                                            name=\"status\"\n                                            render={(msg) => <div\n                                                className={'formik-error-message'}>{msg}</div>}\n                                        />\n                                    </CCol>\n                                </CRow>\n                            </Form>\n                        );\n                    }}\n                </Formik>\n            </>\n        )\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return bindActionCreators({\n        onFormChange: Action.onFormChnange,\n        onCheckBoxChange: userAction.onRoleActionChange,\n\n    }, dispatch)\n\n};\n\nconst mapStateToProps = ({users}) => ({});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserAddEditForm)\n"]},"metadata":{},"sourceType":"module"}