{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chamald\\\\Desktop\\\\Chamal\\\\react\\\\react-app\\\\src\\\\app\\\\views\\\\admin\\\\patient\\\\newPatient\\\\stepper\\\\stepComponents\\\\medicalTests\\\\components\\\\MedicalTestRecord.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { getCommonStringForGrid } from \"../../../../../../../../../utils/GridUtil\";\nimport { CFormGroup, CInput } from \"@coreui/react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as Actions from '../store/actions/patient.add.medical.test.results.action';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MedicalTestRecord = _ref => {\n  _s();\n\n  let {\n    medicalTestRecord\n  } = _ref;\n  let dispatch = useDispatch();\n  const checkupData = useSelector(_ref2 => {\n    let {\n      checkup\n    } = _ref2;\n    return checkup.checkupAddEdit;\n  });\n  const patientMedicalTestsData = useSelector(_ref3 => {\n    let {\n      patientMedicalTest\n    } = _ref3;\n    return patientMedicalTest.patientMedicalTestAddEdit;\n  });\n  const [formValue, setFormValue] = useState({\n    value: '',\n    measureUnit: ''\n  });\n  const [isEdit, setIsEdit] = useState(false);\n  const [editedRow, setEditedRow] = useState(false);\n\n  const onChange = event => {\n    const target = event.target;\n    let value = target.type === 'checkbox' ? target.checked : target.value;\n    const name = target.name;\n    setEditedRow(true);\n    dispatch(Actions.onSetMedicalResult({\n      medicalTestRecordID: medicalTestRecord.medicalTestRecordID,\n      ...formValue,\n      [name]: value\n    }));\n    setFormValue({ ...formValue,\n      [name]: value\n    });\n  };\n\n  const setValue = () => {\n    let value = checkupData.checkup.medicalTestResults[medicalTestRecord.medicalTestRecordID] ? checkupData.checkup.medicalTestResults[medicalTestRecord.medicalTestRecordID].value : patientMedicalTestsData.formData[medicalTestRecord.medicalTestRecordID] ? patientMedicalTestsData.formData[medicalTestRecord.medicalTestRecordID].value : '';\n    let measureUnit = checkupData.checkup.medicalTestResults[medicalTestRecord.medicalTestRecordID] ? checkupData.checkup.medicalTestResults[medicalTestRecord.medicalTestRecordID].measureUnit : patientMedicalTestsData.formData[medicalTestRecord.medicalTestRecordID] ? patientMedicalTestsData.formData[medicalTestRecord.medicalTestRecordID].measureUnit : medicalTestRecord.measurementUnit;\n\n    if (value) {\n      setIsEdit(true);\n    }\n\n    setFormValue({ ...formValue,\n      value: value,\n      measureUnit: measureUnit\n    });\n  };\n\n  useEffect(() => {\n    setValue();\n  }, [checkupData.checkup.medicalTestResults]);\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    className: editedRow ? 'edited-data-row' : '',\n    onClick: e => {\n      setIsEdit(false);\n      e.preventDefault();\n      e.stopPropagation();\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n      children: getCommonStringForGrid(medicalTestRecord.measurementName)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(CFormGroup, {\n        children: /*#__PURE__*/_jsxDEV(CInput, {\n          type: \"text\",\n          name: 'value',\n          id: `value_${medicalTestRecord.medicalTestRecordID}`,\n          value: formValue.value ? formValue.value : '',\n          placeholder: 'Value',\n          onChange: onChange,\n          disabled: isEdit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(CFormGroup, {\n        children: /*#__PURE__*/_jsxDEV(CInput, {\n          type: \"text\",\n          name: \"measureUnit\",\n          id: `measureUnit_${medicalTestRecord.medicalTestRecordID}`,\n          value: formValue.measureUnit ? formValue.measureUnit : '',\n          onChange: onChange,\n          disabled: true,\n          className: \"unit-input-field\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this)]\n  }, medicalTestRecord.medicalTestRecordID, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MedicalTestRecord, \"R0ECq6EWKTF2ZRQdocPA2e32wz8=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = MedicalTestRecord;\nexport default MedicalTestRecord;\n\nvar _c;\n\n$RefreshReg$(_c, \"MedicalTestRecord\");","map":{"version":3,"sources":["C:/Users/chamald/Desktop/Chamal/react/react-app/src/app/views/admin/patient/newPatient/stepper/stepComponents/medicalTests/components/MedicalTestRecord.js"],"names":["React","useEffect","useState","getCommonStringForGrid","CFormGroup","CInput","useDispatch","useSelector","Actions","MedicalTestRecord","medicalTestRecord","dispatch","checkupData","checkup","checkupAddEdit","patientMedicalTestsData","patientMedicalTest","patientMedicalTestAddEdit","formValue","setFormValue","value","measureUnit","isEdit","setIsEdit","editedRow","setEditedRow","onChange","event","target","type","checked","name","onSetMedicalResult","medicalTestRecordID","setValue","medicalTestResults","formData","measurementUnit","e","preventDefault","stopPropagation","measurementName"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {getCommonStringForGrid} from \"../../../../../../../../../utils/GridUtil\";\nimport {CFormGroup, CInput} from \"@coreui/react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport * as Actions from '../store/actions/patient.add.medical.test.results.action'\n\n\nconst MedicalTestRecord = ({medicalTestRecord}) => {\n\n    let dispatch = useDispatch();\n    const checkupData = useSelector(({checkup}) => checkup.checkupAddEdit);\n    const patientMedicalTestsData = useSelector(({patientMedicalTest}) => patientMedicalTest.patientMedicalTestAddEdit);\n    const [formValue, setFormValue] = useState({value: '', measureUnit: ''});\n    const [isEdit, setIsEdit] = useState(false);\n    const [editedRow, setEditedRow] = useState(false);\n\n    const onChange = (event) => {\n        const target = event.target;\n        let value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n        setEditedRow(true);\n        dispatch(Actions.onSetMedicalResult({\n            medicalTestRecordID: medicalTestRecord.medicalTestRecordID,\n            ...formValue,\n            [name]: value\n        }));\n        setFormValue({...formValue, [name]: value});\n    };\n\n    const setValue = () => {\n        let value = checkupData.checkup.medicalTestResults[medicalTestRecord.medicalTestRecordID] ? checkupData.checkup.medicalTestResults[medicalTestRecord.medicalTestRecordID].value : (patientMedicalTestsData.formData[medicalTestRecord.medicalTestRecordID] ? patientMedicalTestsData.formData[medicalTestRecord.medicalTestRecordID].value : '');\n        let measureUnit = checkupData.checkup.medicalTestResults[medicalTestRecord.medicalTestRecordID] ? checkupData.checkup.medicalTestResults[medicalTestRecord.medicalTestRecordID].measureUnit : (patientMedicalTestsData.formData[medicalTestRecord.medicalTestRecordID] ? patientMedicalTestsData.formData[medicalTestRecord.medicalTestRecordID].measureUnit : medicalTestRecord.measurementUnit);\n        if (value) {\n            setIsEdit(true);\n        }\n        setFormValue({...formValue, value: value, measureUnit: measureUnit});\n    };\n\n    useEffect(() => {\n        setValue();\n    }, [checkupData.checkup.medicalTestResults]);\n\n    return (\n        <tr key={medicalTestRecord.medicalTestRecordID}\n            className={editedRow ? 'edited-data-row' : ''}\n            onClick={(e) => {\n                setIsEdit(false);\n                e.preventDefault();\n                e.stopPropagation();\n            }}\n        >\n            <td>{getCommonStringForGrid(medicalTestRecord.measurementName)}</td>\n\n            <td>\n                <CFormGroup>\n                    <CInput\n                        type=\"text\"\n                        name={'value'}\n                        id={`value_${medicalTestRecord.medicalTestRecordID}`}\n                        value={formValue.value ? formValue.value : ''}\n                        placeholder={'Value'}\n                        onChange={onChange}\n                        disabled={isEdit}\n                    />\n                </CFormGroup>\n            </td>\n\n            <td>\n                <CFormGroup>\n                    <CInput\n                        type=\"text\"\n                        name=\"measureUnit\"\n                        id={`measureUnit_${medicalTestRecord.medicalTestRecordID}`}\n                        value={formValue.measureUnit ? formValue.measureUnit : ''}\n                        onChange={onChange}\n                        disabled={true}\n                        className=\"unit-input-field\"\n                    />\n                </CFormGroup>\n            </td>\n        </tr>\n    );\n};\n\nexport default MedicalTestRecord;"]},"metadata":{},"sourceType":"module"}