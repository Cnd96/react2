{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chamald\\\\Desktop\\\\Chamal\\\\react\\\\react-app\\\\src\\\\app\\\\views\\\\common\\\\PasswordResetForm.js\";\nimport React, { Component } from 'react';\nimport customValidator from \"../../../utils/ValidationUtil\";\nimport { ErrorMessage, Field, Form, Formik } from \"formik\";\nimport { CCol, CFormGroup, CLabel, CRow } from \"@coreui/react\";\nimport { getInputFieldClassNames } from \"../../../utils/FormUtils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass PasswordResetForm extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      formInit: {\n        oldPassword: '',\n        newPassword: '',\n        newPasswordConfirm: ''\n      }\n    };\n\n    this.getValidations = () => {\n      return {\n        oldPassword: {\n          required: {},\n          maxLength: {\n            value: 100\n          }\n        },\n        newPassword: {\n          required: {},\n          maxLength: {\n            value: 100\n          }\n        },\n        newPasswordConfirm: {\n          required: {},\n          maxLength: {\n            value: 100\n          }\n        }\n      };\n    };\n\n    this.onCustomValidation = values => {\n      const {\n        onFormChange\n      } = this.props;\n      let validate = customValidator(values, this.getValidations());\n      this.passwordMatchValidation(values.newPassword, values.newPasswordConfirm, validate);\n      onFormChange({\n        isValid: validate.isValid,\n        values: values\n      });\n      return validate.errors;\n    };\n\n    this.passwordMatchValidation = (password, passwordConfirm, validateObj) => {\n      let isValid;\n      let validationMessage = 'Password not match';\n      isValid = password === passwordConfirm;\n      validateObj.isValid = validateObj.isValid && isValid;\n\n      if (!isValid) {\n        validateObj.errors.newPassword = validateObj.errors.newPassword ? validateObj.errors.newPassword + ', ' + validationMessage : validationMessage;\n        validateObj.errors.newPasswordConfirm = validateObj.errors.newPasswordConfirm ? validateObj.errors.newPasswordConfirm + ', ' + validationMessage : validationMessage;\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.onCustomValidation(this.state.formInit);\n  }\n\n  render() {\n    const initialValues = this.state.formInit;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Formik, {\n        enableReinitialize: true,\n        initialValues: initialValues,\n        onSubmit: (values, _ref) => {\n          let {\n            setSubmitting\n          } = _ref;\n          setTimeout(() => {\n            setSubmitting(false);\n          }, 400);\n        },\n        validateOnChange: true,\n        validate: values => {\n          return this.onCustomValidation(values);\n        },\n        children: _ref2 => {\n          let {\n            isSubmitting,\n            dirty,\n            errors,\n            touched\n          } = _ref2;\n          return /*#__PURE__*/_jsxDEV(Form, {\n            children: /*#__PURE__*/_jsxDEV(CRow, {\n              children: [/*#__PURE__*/_jsxDEV(CCol, {\n                sm: \"12\",\n                children: [/*#__PURE__*/_jsxDEV(CFormGroup, {\n                  children: [/*#__PURE__*/_jsxDEV(CLabel, {\n                    htmlFor: \"oldPassword\",\n                    className: 'required',\n                    children: \"Current Password\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 103,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Field, {\n                    type: \"password\",\n                    name: \"oldPassword\",\n                    placeholder: 'Current Password',\n                    className: getInputFieldClassNames(touched.oldPassword, errors.oldPassword)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 106,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 102,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                  name: \"oldPassword\",\n                  render: msg => /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: 'formik-error-message',\n                    children: msg\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 116,\n                    columnNumber: 58\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 114,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(CCol, {\n                sm: \"12\",\n                children: [/*#__PURE__*/_jsxDEV(CFormGroup, {\n                  children: [/*#__PURE__*/_jsxDEV(CLabel, {\n                    htmlFor: \"newPassword\",\n                    className: 'required',\n                    children: \"New Password\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 123,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Field, {\n                    type: \"password\",\n                    name: \"newPassword\",\n                    placeholder: 'New Password',\n                    className: getInputFieldClassNames(touched.newPassword, errors.newPassword)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 126,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 122,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                  name: \"newPassword\",\n                  render: msg => /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: 'formik-error-message',\n                    children: msg\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 136,\n                    columnNumber: 58\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 134,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(CCol, {\n                sm: \"12\",\n                children: [/*#__PURE__*/_jsxDEV(CFormGroup, {\n                  children: [/*#__PURE__*/_jsxDEV(CLabel, {\n                    htmlFor: \"newPasswordConfirm\",\n                    className: 'required',\n                    children: \"Confirm New Password\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 143,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Field, {\n                    type: \"password\",\n                    name: \"newPasswordConfirm\",\n                    placeholder: 'Confirm New Password',\n                    className: getInputFieldClassNames(touched.newPasswordConfirm, errors.newPasswordConfirm)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 146,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 142,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                  name: \"newPasswordConfirm\",\n                  render: msg => /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: 'formik-error-message',\n                    children: msg\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 156,\n                    columnNumber: 58\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 154,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 141,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 25\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nexport default PasswordResetForm;","map":{"version":3,"sources":["C:/Users/chamald/Desktop/Chamal/react/react-app/src/app/views/common/PasswordResetForm.js"],"names":["React","Component","customValidator","ErrorMessage","Field","Form","Formik","CCol","CFormGroup","CLabel","CRow","getInputFieldClassNames","PasswordResetForm","state","formInit","oldPassword","newPassword","newPasswordConfirm","getValidations","required","maxLength","value","onCustomValidation","values","onFormChange","props","validate","passwordMatchValidation","isValid","errors","password","passwordConfirm","validateObj","validationMessage","componentDidMount","render","initialValues","setSubmitting","setTimeout","isSubmitting","dirty","touched","msg"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport customValidator from \"../../../utils/ValidationUtil\";\nimport {ErrorMessage, Field, Form, Formik} from \"formik\";\nimport {CCol, CFormGroup, CLabel, CRow} from \"@coreui/react\";\nimport {getInputFieldClassNames} from \"../../../utils/FormUtils\";\n\nclass PasswordResetForm extends Component {\n\n    state = {\n        formInit: {\n            oldPassword: '',\n            newPassword: '',\n            newPasswordConfirm: '',\n        }\n    };\n\n    componentDidMount() {\n        this.onCustomValidation(this.state.formInit);\n    }\n\n    getValidations = () => {\n        return {\n            oldPassword: {\n                required: {},\n                maxLength: {value: 100}\n            },\n\n            newPassword: {\n                required: {},\n                maxLength: {value: 100}\n            },\n\n            newPasswordConfirm: {\n                required: {},\n                maxLength: {value: 100}\n            },\n        };\n    };\n\n\n    onCustomValidation = (values) => {\n        const {onFormChange} = this.props;\n\n        let validate = customValidator(values, this.getValidations());\n\n        this.passwordMatchValidation(\n            values.newPassword,\n            values.newPasswordConfirm,\n            validate\n        );\n\n        onFormChange({\n            isValid: validate.isValid,\n            values: values\n        });\n\n        return validate.errors;\n    };\n\n    passwordMatchValidation = (password, passwordConfirm, validateObj) => {\n        let isValid;\n        let validationMessage = 'Password not match';\n\n        isValid = password === passwordConfirm;\n\n        validateObj.isValid = validateObj.isValid && isValid;\n\n        if (!isValid) {\n            validateObj.errors.newPassword = validateObj.errors.newPassword ?\n                (validateObj.errors.newPassword + ', ' + validationMessage) : validationMessage;\n\n            validateObj.errors.newPasswordConfirm = validateObj.errors.newPasswordConfirm ?\n                (validateObj.errors.newPasswordConfirm + ', ' + validationMessage) : validationMessage;\n        }\n    };\n\n    render() {\n\n        const initialValues = this.state.formInit;\n\n        return (\n            <>\n                <Formik\n                    enableReinitialize={true}\n                    initialValues={initialValues}\n                    onSubmit={(values, {setSubmitting}) => {\n                        setTimeout(() => {\n                            setSubmitting(false);\n                        }, 400);\n                    }}\n\n                    validateOnChange={true}\n                    validate={(values) => {\n                        return this.onCustomValidation(values);\n                    }}\n                >\n                    {({isSubmitting, dirty, errors, touched}) => (\n                        <Form>\n\n                            <CRow>\n                                <CCol sm=\"12\">\n                                    <CFormGroup>\n                                        <CLabel htmlFor=\"oldPassword\"\n                                                className={'required'}>Current Password</CLabel>\n\n                                        <Field\n                                            type=\"password\"\n                                            name=\"oldPassword\"\n                                            placeholder={'Current Password'}\n                                            className={getInputFieldClassNames(touched.oldPassword, errors.oldPassword)}\n                                        />\n                                    </CFormGroup>\n\n                                    <ErrorMessage\n                                        name=\"oldPassword\"\n                                        render={(msg) => <div\n                                            className={'formik-error-message'}>{msg}</div>}\n                                    />\n                                </CCol>\n\n                                <CCol sm=\"12\">\n                                    <CFormGroup>\n                                        <CLabel htmlFor=\"newPassword\"\n                                                className={'required'}>New Password</CLabel>\n\n                                        <Field\n                                            type=\"password\"\n                                            name=\"newPassword\"\n                                            placeholder={'New Password'}\n                                            className={getInputFieldClassNames(touched.newPassword, errors.newPassword)}\n                                        />\n                                    </CFormGroup>\n\n                                    <ErrorMessage\n                                        name=\"newPassword\"\n                                        render={(msg) => <div\n                                            className={'formik-error-message'}>{msg}</div>}\n                                    />\n                                </CCol>\n\n                                <CCol sm=\"12\">\n                                    <CFormGroup>\n                                        <CLabel htmlFor=\"newPasswordConfirm\"\n                                                className={'required'}>Confirm New Password</CLabel>\n\n                                        <Field\n                                            type=\"password\"\n                                            name=\"newPasswordConfirm\"\n                                            placeholder={'Confirm New Password'}\n                                            className={getInputFieldClassNames(touched.newPasswordConfirm, errors.newPasswordConfirm)}\n                                        />\n                                    </CFormGroup>\n\n                                    <ErrorMessage\n                                        name=\"newPasswordConfirm\"\n                                        render={(msg) => <div\n                                            className={'formik-error-message'}>{msg}</div>}\n                                    />\n                                </CCol>\n\n                            </CRow>\n                        </Form>\n                    )}\n                </Formik>\n            </>\n        );\n    }\n}\n\nexport default PasswordResetForm;\n"]},"metadata":{},"sourceType":"module"}