{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chamald\\\\Desktop\\\\Chamal\\\\react\\\\react-app\\\\src\\\\app\\\\views\\\\admin\\\\config\\\\medicine\\\\add-edit\\\\components\\\\MedicineAddEditFrom.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { removeStorageItem } from \"../../../../../../../utils/StorageUtils\";\nimport Constants from \"../../../../../../../utils/Constants\";\nimport * as Actions from \"../../store/action/index\";\nimport customValidator from \"../../../../../../../utils/ValidationUtil\";\nimport { ErrorMessage, Field, Form, Formik } from \"formik\";\nimport { CCol, CFormGroup, CLabel, CRow, CSelect } from \"@coreui/react\";\nimport { getCommonStatusOptions, getInputFieldClassNames } from \"../../../../../../../utils/FormUtils\";\nimport { getCommaSeparatedVales } from \"./SupportFuntions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst initValues = {\n  medicineID: '',\n  medicineName: '',\n  medicineDose: '',\n  medicineFrequent: '',\n  medicineMealTime: '',\n  trade: '',\n  status: Constants.STATUS_CONST.ACT\n};\n\nconst getValidations = () => {\n  return {\n    medicineName: {\n      required: {\n        message: 'Required'\n      }\n    }\n  };\n};\n\nconst MedicineAddEditFrom = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const [formValues, setFormValues] = useState(initValues);\n  const data = useSelector(_ref => {\n    let {\n      medicine\n    } = _ref;\n    return medicine.medicineAddEdit;\n  });\n  useEffect(() => {\n    let medicine = data.medicine;\n    let initData = {\n      medicineID: medicine.medicineID ? medicine.medicineID : initValues.medicineID,\n      medicineName: medicine.medicineName ? medicine.medicineName : initValues.medicineName,\n      medicineDose: getCommaSeparatedVales(medicine.doseDTOS ? medicine.doseDTOS : [], 'dose'),\n      medicineFrequent: getCommaSeparatedVales(medicine.frequentDTOS ? medicine.frequentDTOS : [], 'frequent'),\n      medicineMealTime: getCommaSeparatedVales(medicine.mealTimeDTOS ? medicine.mealTimeDTOS : [], 'mealTime'),\n      trade: getCommaSeparatedVales(medicine.tradeDTOS ? medicine.tradeDTOS : [], 'tradeName'),\n      status: medicine.status ? medicine.status : initValues.status\n    };\n    setFormValues(initData);\n  }, [dispatch, data.medicine]);\n  useEffect(() => {\n    return () => {\n      removeStorageItem(Constants.STORAGE.SELECTED_MEDICINE_ID);\n      dispatch(Actions.reset());\n    };\n  }, []);\n\n  const onCustomValidation = values => {\n    let validate = customValidator(values, getValidations());\n    dispatch(Actions.onFormChange({\n      isValid: validate.isValid,\n      values: values\n    }));\n    return validate.errors;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      enableReinitialize: true,\n      initialValues: formValues,\n      onSubmit: (values, _ref2) => {\n        let {\n          setSubmitting\n        } = _ref2;\n        setTimeout(() => {\n          setSubmitting(false);\n        }, 200);\n      },\n      validateOnChange: true,\n      validate: values => {\n        return onCustomValidation(values);\n      },\n      children: _ref3 => {\n        let {\n          errors,\n          touched\n        } = _ref3;\n        return /*#__PURE__*/_jsxDEV(Form, {\n          children: /*#__PURE__*/_jsxDEV(CRow, {\n            children: [/*#__PURE__*/_jsxDEV(CCol, {\n              sm: \"12\",\n              md: \"6\",\n              lg: \"6\",\n              children: [/*#__PURE__*/_jsxDEV(CFormGroup, {\n                children: [/*#__PURE__*/_jsxDEV(CLabel, {\n                  htmlFor: \"medicineName\",\n                  className: 'required',\n                  children: \"Medicine Name\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 95,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Field, {\n                  type: \"text\",\n                  name: \"medicineName\",\n                  placeholder: 'Medicine Name',\n                  className: getInputFieldClassNames(touched.medicineName, errors.medicineName)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 100,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                name: \"medicineName\",\n                render: msg => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: 'formik-error-message',\n                  children: msg\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 111,\n                  columnNumber: 58\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(CCol, {\n              sm: \"12\",\n              md: \"6\",\n              lg: \"6\",\n              children: [/*#__PURE__*/_jsxDEV(CFormGroup, {\n                children: [/*#__PURE__*/_jsxDEV(CLabel, {\n                  htmlFor: \"medicineDose\",\n                  children: \"Medicine Dose\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 118,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Field, {\n                  type: \"text\",\n                  name: \"medicineDose\",\n                  placeholder: 'eg : 5mg, 1g, 2g  separate by comma',\n                  className: getInputFieldClassNames(touched.medicineDose, errors.medicineDose)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 122,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                name: \"medicineDose\",\n                render: msg => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: 'formik-error-message',\n                  children: msg\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 133,\n                  columnNumber: 58\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 131,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(CCol, {\n              sm: \"12\",\n              md: \"6\",\n              lg: \"6\",\n              children: [/*#__PURE__*/_jsxDEV(CFormGroup, {\n                children: [/*#__PURE__*/_jsxDEV(CLabel, {\n                  htmlFor: \"medicineFrequent\",\n                  children: \"Medicine Frequent\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 141,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Field, {\n                  type: \"text\",\n                  name: \"medicineFrequent\",\n                  placeholder: 'eg: Once a day, Twice a Day  separated by comma ',\n                  className: getInputFieldClassNames(touched.medicineFrequent, errors.medicineFrequent)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 145,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                name: \"medicineFrequent\",\n                render: msg => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: 'formik-error-message',\n                  children: msg\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 156,\n                  columnNumber: 58\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(CCol, {\n              sm: \"12\",\n              md: \"6\",\n              lg: \"6\",\n              children: [/*#__PURE__*/_jsxDEV(CFormGroup, {\n                children: [/*#__PURE__*/_jsxDEV(CLabel, {\n                  htmlFor: \"medicineMealTime\",\n                  children: \"Medicine Meal Time\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 163,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Field, {\n                  type: \"text\",\n                  name: \"medicineMealTime\",\n                  placeholder: 'eg: After dinner, Before dinner separated by comma',\n                  className: getInputFieldClassNames(touched.medicineMealTime, errors.medicineMealTime)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 167,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                name: \"medicineMealTime\",\n                render: msg => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: 'formik-error-message',\n                  children: msg\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 178,\n                  columnNumber: 58\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 176,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(CCol, {\n              sm: \"12\",\n              md: \"6\",\n              lg: \"6\",\n              children: [/*#__PURE__*/_jsxDEV(CFormGroup, {\n                children: [/*#__PURE__*/_jsxDEV(CLabel, {\n                  htmlFor: \"trade\",\n                  children: \"Trade\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 186,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Field, {\n                  type: \"text\",\n                  name: \"trade\",\n                  placeholder: 'eg: Trade 1, Trade 2 separated by comma',\n                  className: getInputFieldClassNames(touched.trade, errors.trade)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 190,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 185,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                name: \"trade\",\n                render: msg => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: 'formik-error-message',\n                  children: msg\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 201,\n                  columnNumber: 58\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 199,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(CCol, {\n              sm: \"12\",\n              md: \"6\",\n              lg: \"6\",\n              children: [/*#__PURE__*/_jsxDEV(CFormGroup, {\n                children: [/*#__PURE__*/_jsxDEV(CLabel, {\n                  htmlFor: \"status\",\n                  className: 'required',\n                  children: \"Status\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 209,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Field, {\n                  name: \"status\",\n                  className: getInputFieldClassNames(touched.status, errors.status),\n                  children: _ref4 => {\n                    let {\n                      field,\n                      // { name, value, onChange, onBlur }\n                      form: {\n                        touched,\n                        errors\n                      },\n                      // also values, setXXXX, handleXXXX, dirty, isValid, status, etc.\n                      meta\n                    } = _ref4;\n                    return /*#__PURE__*/_jsxDEV(CSelect, {\n                      custom: true,\n                      name: \"status\",\n                      ...field,\n                      children: getCommonStatusOptions(false).map(item => {\n                        return /*#__PURE__*/_jsxDEV(\"option\", {\n                          value: item.key,\n                          children: item.value\n                        }, item.key, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 224,\n                          columnNumber: 65\n                        }, this);\n                      })\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 220,\n                      columnNumber: 49\n                    }, this);\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 211,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 208,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                name: \"status\",\n                render: msg => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: 'formik-error-message',\n                  children: msg\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 235,\n                  columnNumber: 58\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 233,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 25\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(MedicineAddEditFrom, \"S3woDSqtEJJajHJBMG9tCQULSmQ=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = MedicineAddEditFrom;\nexport default MedicineAddEditFrom;\n\nvar _c;\n\n$RefreshReg$(_c, \"MedicineAddEditFrom\");","map":{"version":3,"sources":["C:/Users/chamald/Desktop/Chamal/react/react-app/src/app/views/admin/config/medicine/add-edit/components/MedicineAddEditFrom.js"],"names":["React","useEffect","useState","useDispatch","useSelector","removeStorageItem","Constants","Actions","customValidator","ErrorMessage","Field","Form","Formik","CCol","CFormGroup","CLabel","CRow","CSelect","getCommonStatusOptions","getInputFieldClassNames","getCommaSeparatedVales","initValues","medicineID","medicineName","medicineDose","medicineFrequent","medicineMealTime","trade","status","STATUS_CONST","ACT","getValidations","required","message","MedicineAddEditFrom","dispatch","formValues","setFormValues","data","medicine","medicineAddEdit","initData","doseDTOS","frequentDTOS","mealTimeDTOS","tradeDTOS","STORAGE","SELECTED_MEDICINE_ID","reset","onCustomValidation","values","validate","onFormChange","isValid","errors","setSubmitting","setTimeout","touched","msg","field","form","meta","map","item","key","value"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {removeStorageItem} from \"../../../../../../../utils/StorageUtils\";\nimport Constants from \"../../../../../../../utils/Constants\";\nimport * as Actions from \"../../store/action/index\";\nimport customValidator from \"../../../../../../../utils/ValidationUtil\";\nimport {ErrorMessage, Field, Form, Formik} from \"formik\";\nimport {CCol, CFormGroup, CLabel, CRow, CSelect} from \"@coreui/react\";\nimport {getCommonStatusOptions, getInputFieldClassNames} from \"../../../../../../../utils/FormUtils\";\nimport {getCommaSeparatedVales} from \"./SupportFuntions\"\n\nconst initValues = {\n    medicineID: '',\n    medicineName: '',\n    medicineDose: '',\n    medicineFrequent: '',\n    medicineMealTime: '',\n    trade: '',\n    status: Constants.STATUS_CONST.ACT,\n};\n\nconst getValidations = () => {\n    return {\n        medicineName: {\n            required: {message: 'Required'},\n        }\n    };\n};\n\n\nconst MedicineAddEditFrom = () => {\n\n    const dispatch = useDispatch();\n    const [formValues, setFormValues] = useState(initValues);\n    const data = useSelector(({medicine}) => medicine.medicineAddEdit);\n\n\n    useEffect(() => {\n\n        let medicine = data.medicine;\n\n        let initData = {\n            medicineID: medicine.medicineID ? medicine.medicineID : initValues.medicineID,\n            medicineName: medicine.medicineName ? medicine.medicineName : initValues.medicineName,\n            medicineDose: getCommaSeparatedVales(medicine.doseDTOS ? medicine.doseDTOS : [], 'dose'),\n            medicineFrequent: getCommaSeparatedVales(medicine.frequentDTOS ? medicine.frequentDTOS : [], 'frequent'),\n            medicineMealTime: getCommaSeparatedVales(medicine.mealTimeDTOS ? medicine.mealTimeDTOS : [], 'mealTime'),\n            trade: getCommaSeparatedVales(medicine.tradeDTOS ? medicine.tradeDTOS : [], 'tradeName'),\n            status: medicine.status ? medicine.status : initValues.status,\n        };\n        setFormValues(initData);\n\n    }, [dispatch, data.medicine]);\n\n    useEffect(() => {\n        return (() => {\n            removeStorageItem(Constants.STORAGE.SELECTED_MEDICINE_ID);\n            dispatch(Actions.reset());\n        })\n    }, []);\n\n    const onCustomValidation = (values) => {\n\n        let validate = customValidator(values, getValidations());\n        dispatch(Actions.onFormChange(\n            {\n                isValid: validate.isValid,\n                values: values\n            }));\n        return validate.errors;\n    };\n\n    return (\n        <>\n            <Formik\n                enableReinitialize={true}\n                initialValues={formValues}\n                onSubmit={(values, {setSubmitting}) => {\n                    setTimeout(() => {\n                        setSubmitting(false)\n                    }, 200)\n                }}\n                validateOnChange={true}\n                validate={(values) => {\n                    return onCustomValidation(values);\n                }}\n            >\n                {({errors, touched}) => {\n                    return (\n                        <Form>\n                            <CRow>\n\n                                <CCol sm=\"12\" md=\"6\" lg=\"6\">\n                                    <CFormGroup>\n                                        <CLabel htmlFor=\"medicineName\"\n                                                className={'required'}>\n                                            Medicine Name\n                                        </CLabel>\n\n                                        <Field\n                                            type=\"text\"\n                                            name=\"medicineName\"\n                                            placeholder={'Medicine Name'}\n                                            className={getInputFieldClassNames(touched.medicineName, errors.medicineName)}\n                                        />\n\n                                    </CFormGroup>\n\n                                    <ErrorMessage\n                                        name=\"medicineName\"\n                                        render={(msg) => <div\n                                            className={'formik-error-message'}>{msg}</div>}\n                                    />\n                                </CCol>\n\n                                <CCol sm=\"12\" md=\"6\" lg=\"6\">\n                                    <CFormGroup>\n                                        <CLabel htmlFor=\"medicineDose\">\n                                            Medicine Dose\n                                        </CLabel>\n\n                                        <Field\n                                            type=\"text\"\n                                            name=\"medicineDose\"\n                                            placeholder={'eg : 5mg, 1g, 2g  separate by comma'}\n                                            className={getInputFieldClassNames(touched.medicineDose, errors.medicineDose)}\n                                        />\n\n                                    </CFormGroup>\n\n                                    <ErrorMessage\n                                        name=\"medicineDose\"\n                                        render={(msg) => <div\n                                            className={'formik-error-message'}>{msg}</div>}\n                                    />\n                                </CCol>\n\n\n                                <CCol sm=\"12\" md=\"6\" lg=\"6\">\n                                    <CFormGroup>\n                                        <CLabel htmlFor=\"medicineFrequent\">\n                                            Medicine Frequent\n                                        </CLabel>\n\n                                        <Field\n                                            type=\"text\"\n                                            name=\"medicineFrequent\"\n                                            placeholder={'eg: Once a day, Twice a Day  separated by comma '}\n                                            className={getInputFieldClassNames(touched.medicineFrequent, errors.medicineFrequent)}\n                                        />\n\n                                    </CFormGroup>\n\n                                    <ErrorMessage\n                                        name=\"medicineFrequent\"\n                                        render={(msg) => <div\n                                            className={'formik-error-message'}>{msg}</div>}\n                                    />\n                                </CCol>\n\n                                <CCol sm=\"12\" md=\"6\" lg=\"6\">\n                                    <CFormGroup>\n                                        <CLabel htmlFor=\"medicineMealTime\">\n                                            Medicine Meal Time\n                                        </CLabel>\n\n                                        <Field\n                                            type=\"text\"\n                                            name=\"medicineMealTime\"\n                                            placeholder={'eg: After dinner, Before dinner separated by comma'}\n                                            className={getInputFieldClassNames(touched.medicineMealTime, errors.medicineMealTime)}\n                                        />\n\n                                    </CFormGroup>\n\n                                    <ErrorMessage\n                                        name=\"medicineMealTime\"\n                                        render={(msg) => <div\n                                            className={'formik-error-message'}>{msg}</div>}\n                                    />\n                                </CCol>\n\n\n                                <CCol sm=\"12\" md=\"6\" lg=\"6\">\n                                    <CFormGroup>\n                                        <CLabel htmlFor=\"trade\">\n                                            Trade\n                                        </CLabel>\n\n                                        <Field\n                                            type=\"text\"\n                                            name=\"trade\"\n                                            placeholder={'eg: Trade 1, Trade 2 separated by comma'}\n                                            className={getInputFieldClassNames(touched.trade, errors.trade)}\n                                        />\n\n                                    </CFormGroup>\n\n                                    <ErrorMessage\n                                        name=\"trade\"\n                                        render={(msg) => <div\n                                            className={'formik-error-message'}>{msg}</div>}\n                                    />\n                                </CCol>\n\n                                <CCol sm=\"12\" md=\"6\" lg=\"6\">\n\n                                    <CFormGroup>\n                                        <CLabel htmlFor=\"status\" className={'required'}>Status</CLabel>\n\n                                        <Field name=\"status\"\n                                               className={getInputFieldClassNames(touched.status, errors.status)}\n                                        >\n                                            {({\n                                                  field, // { name, value, onChange, onBlur }\n                                                  form: {touched, errors}, // also values, setXXXX, handleXXXX, dirty, isValid, status, etc.\n                                                  meta,\n                                              }) => (\n\n                                                <CSelect custom name=\"status\" {...field}>\n                                                    {\n                                                        getCommonStatusOptions(false).map((item) => {\n                                                            return (\n                                                                <option key={item.key}\n                                                                        value={item.key}>{item.value}</option>\n                                                            );\n                                                        })\n                                                    }\n                                                </CSelect>\n                                            )}\n                                        </Field>\n                                    </CFormGroup>\n                                    <ErrorMessage\n                                        name=\"status\"\n                                        render={(msg) => <div\n                                            className={'formik-error-message'}>{msg}</div>}\n                                    />\n                                </CCol>\n\n                            </CRow>\n                        </Form>\n                    );\n                }}\n            </Formik>\n        </>\n    );\n\n};\n\nexport default MedicineAddEditFrom;"]},"metadata":{},"sourceType":"module"}