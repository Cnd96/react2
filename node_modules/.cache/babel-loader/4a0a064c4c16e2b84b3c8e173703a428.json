{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chamald\\\\Desktop\\\\Chamal\\\\react\\\\react-app\\\\src\\\\app\\\\views\\\\admin\\\\config\\\\user\\\\add-edit\\\\UserAddEditApp.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getStorageItem, removeStorageItem } from \"../../../../../../utils/StorageUtils\";\nimport Constants from \"../../../../../../utils/Constants\";\nimport * as Action from \"../store/actions/index\";\nimport { trimData } from \"../../../../../../utils/DataExtractHelper\";\nimport withReducer from \"../../../../../store/withReducer\";\nimport reducer from \"../store/reducers\";\nimport * as _ from \"lodash\";\nimport UserAddEditBase from \"./components/UserAddEditBase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction UserAddEditApp() {\n  _s();\n\n  const dispatch = useDispatch();\n  const data = useSelector(_ref => {\n    let {\n      users\n    } = _ref;\n    return users.userAddEdit;\n  });\n  useEffect(() => {\n    dispatch(Action.getAllRoles());\n    const userID = getStorageItem(Constants.STORAGE.SELECTED_USER_ID);\n\n    if (userID) {\n      dispatch(Action.getUserDTO(userID));\n    }\n\n    return () => {\n      dispatch(Action.reSet());\n      removeStorageItem(Constants.STORAGE.SELECTED_USER_ID);\n    };\n  }, [dispatch]);\n  let isNew = !(data.user && data.user.userID);\n\n  let roleChangeUpdate = data => {\n    console.log(data);\n    dispatch(Action.onRoleActionChange(data));\n  };\n\n  let isValid = () => {\n    return data.formData && data.formData.isValid;\n  };\n\n  let save = () => {\n    let user = Object.assign({}, data.user, data.formData.values);\n    let selectedRolesList = data.selectedRolesList;\n    user.userType = Constants.USER_TYPE_CONST.ADMIN;\n\n    if (isNew) {\n      user.password = data.formData.values.password;\n      user.roles = selectedRolesList;\n      dispatch(Action.addAdminUser(trimData(user)));\n    } else {\n      let added = _.difference(selectedRolesList, data.user.roles);\n\n      let removed = _.difference(data.user.roles, selectedRolesList);\n\n      user.addedRoles = added;\n      user.removedRoles = removed;\n      dispatch(Action.updateAdminUser(trimData(user)));\n    }\n  };\n\n  let onPasswordReset = userID => {\n    dispatch(Action.resetUserPassword(userID));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(UserAddEditBase, {\n      isNew: isNew,\n      user: data.user,\n      roles: data.roles,\n      checkedRoleIDs: data.selectedRolesList,\n      onRoleChange: roleChangeUpdate,\n      onPasswordReset: onPasswordReset,\n      isValid: isValid(),\n      onSaveUpdate: save\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(UserAddEditApp, \"8ZSi0OBRHkt2uIn6fVrA7mYaxeA=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = UserAddEditApp;\nexport default withReducer('users', reducer)(UserAddEditApp);\n\nvar _c;\n\n$RefreshReg$(_c, \"UserAddEditApp\");","map":{"version":3,"sources":["C:/Users/chamald/Desktop/Chamal/react/react-app/src/app/views/admin/config/user/add-edit/UserAddEditApp.js"],"names":["React","useEffect","useDispatch","useSelector","getStorageItem","removeStorageItem","Constants","Action","trimData","withReducer","reducer","_","UserAddEditBase","UserAddEditApp","dispatch","data","users","userAddEdit","getAllRoles","userID","STORAGE","SELECTED_USER_ID","getUserDTO","reSet","isNew","user","roleChangeUpdate","console","log","onRoleActionChange","isValid","formData","save","Object","assign","values","selectedRolesList","userType","USER_TYPE_CONST","ADMIN","password","roles","addAdminUser","added","difference","removed","addedRoles","removedRoles","updateAdminUser","onPasswordReset","resetUserPassword"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,SAAQC,cAAR,EAAwBC,iBAAxB,QAAgD,sCAAhD;AACA,OAAOC,SAAP,MAAsB,mCAAtB;AACA,OAAO,KAAKC,MAAZ,MAAwB,wBAAxB;AACA,SAAQC,QAAR,QAAuB,2CAAvB;AACA,OAAOC,WAAP,MAAwB,kCAAxB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAO,KAAKC,CAAZ,MAAmB,QAAnB;AACA,OAAOC,eAAP,MAA4B,8BAA5B;;;;AAGA,SAASC,cAAT,GAA0B;AAAA;;AAEtB,QAAMC,QAAQ,GAAGZ,WAAW,EAA5B;AACA,QAAMa,IAAI,GAAGZ,WAAW,CAAC;AAAA,QAAC;AAACa,MAAAA;AAAD,KAAD;AAAA,WAAaA,KAAK,CAACC,WAAnB;AAAA,GAAD,CAAxB;AAEAhB,EAAAA,SAAS,CAAC,MAAM;AACZa,IAAAA,QAAQ,CAACP,MAAM,CAACW,WAAP,EAAD,CAAR;AACA,UAAMC,MAAM,GAAGf,cAAc,CAACE,SAAS,CAACc,OAAV,CAAkBC,gBAAnB,CAA7B;;AAEA,QAAIF,MAAJ,EAAY;AACRL,MAAAA,QAAQ,CAACP,MAAM,CAACe,UAAP,CAAkBH,MAAlB,CAAD,CAAR;AACH;;AAED,WAAO,MAAM;AACTL,MAAAA,QAAQ,CAACP,MAAM,CAACgB,KAAP,EAAD,CAAR;AACAlB,MAAAA,iBAAiB,CAACC,SAAS,CAACc,OAAV,CAAkBC,gBAAnB,CAAjB;AACH,KAHD;AAIH,GAZQ,EAYN,CAACP,QAAD,CAZM,CAAT;AAcA,MAAIU,KAAK,GAAG,EAAET,IAAI,CAACU,IAAL,IAAaV,IAAI,CAACU,IAAL,CAAUN,MAAzB,CAAZ;;AAEA,MAAIO,gBAAgB,GAAIX,IAAD,IAAU;AAC7BY,IAAAA,OAAO,CAACC,GAAR,CAAYb,IAAZ;AACAD,IAAAA,QAAQ,CAACP,MAAM,CAACsB,kBAAP,CAA0Bd,IAA1B,CAAD,CAAR;AACH,GAHD;;AAKA,MAAIe,OAAO,GAAG,MAAM;AAChB,WAAOf,IAAI,CAACgB,QAAL,IAAiBhB,IAAI,CAACgB,QAAL,CAAcD,OAAtC;AACH,GAFD;;AAIA,MAAIE,IAAI,GAAG,MAAM;AACb,QAAIP,IAAI,GAAGQ,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBnB,IAAI,CAACU,IAAvB,EAA6BV,IAAI,CAACgB,QAAL,CAAcI,MAA3C,CAAX;AACA,QAAIC,iBAAiB,GAAGrB,IAAI,CAACqB,iBAA7B;AAEAX,IAAAA,IAAI,CAACY,QAAL,GAAgB/B,SAAS,CAACgC,eAAV,CAA0BC,KAA1C;;AAEA,QAAIf,KAAJ,EAAW;AACPC,MAAAA,IAAI,CAACe,QAAL,GAAgBzB,IAAI,CAACgB,QAAL,CAAcI,MAAd,CAAqBK,QAArC;AACAf,MAAAA,IAAI,CAACgB,KAAL,GAAaL,iBAAb;AAEAtB,MAAAA,QAAQ,CAACP,MAAM,CAACmC,YAAP,CAAoBlC,QAAQ,CAACiB,IAAD,CAA5B,CAAD,CAAR;AACH,KALD,MAKO;AACH,UAAIkB,KAAK,GAAGhC,CAAC,CAACiC,UAAF,CAAaR,iBAAb,EAAgCrB,IAAI,CAACU,IAAL,CAAUgB,KAA1C,CAAZ;;AACA,UAAII,OAAO,GAAGlC,CAAC,CAACiC,UAAF,CAAa7B,IAAI,CAACU,IAAL,CAAUgB,KAAvB,EAA8BL,iBAA9B,CAAd;;AACAX,MAAAA,IAAI,CAACqB,UAAL,GAAkBH,KAAlB;AACAlB,MAAAA,IAAI,CAACsB,YAAL,GAAoBF,OAApB;AAEA/B,MAAAA,QAAQ,CAACP,MAAM,CAACyC,eAAP,CAAuBxC,QAAQ,CAACiB,IAAD,CAA/B,CAAD,CAAR;AACH;AACJ,GAnBD;;AAqBA,MAAIwB,eAAe,GAAI9B,MAAD,IAAY;AAC9BL,IAAAA,QAAQ,CAACP,MAAM,CAAC2C,iBAAP,CAAyB/B,MAAzB,CAAD,CAAR;AACH,GAFD;;AAIA,sBACI;AAAA,2BACI,QAAC,eAAD;AACI,MAAA,KAAK,EAAEK,KADX;AAEI,MAAA,IAAI,EAAET,IAAI,CAACU,IAFf;AAII,MAAA,KAAK,EAAEV,IAAI,CAAC0B,KAJhB;AAKI,MAAA,cAAc,EAAE1B,IAAI,CAACqB,iBALzB;AAMI,MAAA,YAAY,EAAEV,gBANlB;AAOI,MAAA,eAAe,EAAEuB,eAPrB;AASI,MAAA,OAAO,EAAEnB,OAAO,EATpB;AAUI,MAAA,YAAY,EAAEE;AAVlB;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AAgBH;;GAvEQnB,c;UAEYX,W,EACJC,W;;;KAHRU,c;AAyET,eAAeJ,WAAW,CAAC,OAAD,EAAUC,OAAV,CAAX,CAA8BG,cAA9B,CAAf","sourcesContent":["import React, {useEffect} from 'react'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {getStorageItem, removeStorageItem} from \"../../../../../../utils/StorageUtils\";\nimport Constants from \"../../../../../../utils/Constants\";\nimport * as Action from \"../store/actions/index\"\nimport {trimData} from \"../../../../../../utils/DataExtractHelper\";\nimport withReducer from \"../../../../../store/withReducer\";\nimport reducer from \"../store/reducers\";\nimport * as _ from \"lodash\";\nimport UserAddEditBase from \"./components/UserAddEditBase\";\n\n\nfunction UserAddEditApp() {\n\n    const dispatch = useDispatch();\n    const data = useSelector(({users}) => users.userAddEdit);\n\n    useEffect(() => {\n        dispatch(Action.getAllRoles());\n        const userID = getStorageItem(Constants.STORAGE.SELECTED_USER_ID);\n\n        if (userID) {\n            dispatch(Action.getUserDTO(userID))\n        }\n\n        return () => {\n            dispatch(Action.reSet());\n            removeStorageItem(Constants.STORAGE.SELECTED_USER_ID)\n        }\n    }, [dispatch]);\n\n    let isNew = !(data.user && data.user.userID);\n\n    let roleChangeUpdate = (data) => {\n        console.log(data);\n        dispatch(Action.onRoleActionChange(data));\n    };\n\n    let isValid = () => {\n        return data.formData && data.formData.isValid\n    };\n\n    let save = () => {\n        let user = Object.assign({}, data.user, data.formData.values);\n        let selectedRolesList = data.selectedRolesList;\n\n        user.userType = Constants.USER_TYPE_CONST.ADMIN;\n\n        if (isNew) {\n            user.password = data.formData.values.password;\n            user.roles = selectedRolesList;\n\n            dispatch(Action.addAdminUser(trimData(user)));\n        } else {\n            let added = _.difference(selectedRolesList, data.user.roles);\n            let removed = _.difference(data.user.roles, selectedRolesList);\n            user.addedRoles = added;\n            user.removedRoles = removed;\n\n            dispatch(Action.updateAdminUser(trimData(user)));\n        }\n    };\n\n    let onPasswordReset = (userID) => {\n        dispatch(Action.resetUserPassword(userID));\n    };\n\n    return (\n        <>\n            <UserAddEditBase\n                isNew={isNew}\n                user={data.user}\n\n                roles={data.roles}\n                checkedRoleIDs={data.selectedRolesList}\n                onRoleChange={roleChangeUpdate}\n                onPasswordReset={onPasswordReset}\n\n                isValid={isValid()}\n                onSaveUpdate={save}\n            />\n        </>\n    )\n}\n\nexport default withReducer('users', reducer)(UserAddEditApp)\n"]},"metadata":{},"sourceType":"module"}