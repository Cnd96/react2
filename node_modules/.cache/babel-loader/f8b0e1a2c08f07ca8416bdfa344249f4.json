{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chamald\\\\Desktop\\\\Chamal\\\\react\\\\react-app\\\\src\\\\app\\\\views\\\\admin\\\\config\\\\prescriptionTemplate\\\\add-edit\\\\components\\\\PrescriptionTemplateMedicineRow.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { CButton, CCol, CFormGroup, CRow, CTooltip } from \"@coreui/react\";\nimport * as Action from \"../../store/actions\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Formik } from \"formik\";\nimport CreatableSelect from 'react-select/creatable';\nimport CIcon from \"@coreui/icons-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet initValues = {\n  prescriptionTemplateMedicineID: '',\n  medicineID: '',\n  medicineName: '',\n  doseID: '',\n  dose: '',\n  mealTimeID: '',\n  mealTime: '',\n  frequentID: '',\n  frequent: ''\n};\nlet defaultOption = null;\n\nconst PrescriptionTemplateMedicineRow = _ref => {\n  _s();\n\n  let {\n    dataRow,\n    index\n  } = _ref;\n  const dispatch = useDispatch();\n  const data = useSelector(_ref2 => {\n    let {\n      prescriptionTemplate\n    } = _ref2;\n    return prescriptionTemplate.prescriptionTemplateAddEdit;\n  });\n  const [medicineID, setMedicineID] = useState();\n  const [doses, setDoses] = useState([]);\n  const [mealTimes, setMealTimes] = useState([]);\n  const [frequents, setFrequents] = useState([]);\n  const [defaultMedicine, setDefaultMedicine] = useState(defaultOption);\n  const [defaultDose, setDefaultDoses] = useState(defaultOption);\n  const [defaultMealTime, setDefaultMealTimes] = useState(defaultOption);\n  const [defaultFrequent, setDefaultFrequents] = useState(defaultOption);\n  useEffect(() => {\n    let defaultMedicine = Object.assign({}, {\n      label: dataRow.medicineName,\n      value: dataRow.medicineName,\n      medicineID: dataRow.medicineID,\n      uuid: dataRow.uuid\n    });\n\n    if (dataRow.medicineID) {\n      getDosesMealTimesFrequents(dataRow.medicineID);\n    }\n\n    let defaultDose = Object.assign({}, {\n      label: dataRow.dose,\n      value: dataRow.dose,\n      medicineID: dataRow.medicineID,\n      doseID: dataRow.doseID,\n      uuid: dataRow.uuid\n    });\n    let defaultMealTime = Object.assign({}, {\n      label: dataRow.mealTime,\n      value: dataRow.mealTime,\n      medicineID: dataRow.medicineID,\n      mealTimeID: dataRow.mealTimeID,\n      uuid: dataRow.uuid\n    });\n    let defaultFrequent = Object.assign({}, {\n      label: dataRow.frequent,\n      value: dataRow.frequent,\n      medicineID: dataRow.medicineID,\n      frequentID: dataRow.frequentID,\n      uuid: dataRow.uuid\n    });\n    setDefaultMedicine(defaultMedicine);\n    setDefaultDoses(defaultDose);\n    setDefaultMealTimes(defaultMealTime);\n    setDefaultFrequents(defaultFrequent);\n  }, [data.addedTemplateMedicine]);\n  useEffect(() => {\n    setDoses(data.dose[medicineID]);\n  }, [data.dose[medicineID]]);\n  useEffect(() => {\n    setMealTimes(data.mealTime[medicineID]);\n  }, [data.mealTime[medicineID]]);\n  useEffect(() => {\n    setFrequents(data.frequents[medicineID]);\n  }, [data.frequents[medicineID]]);\n\n  const getDosesMealTimesFrequents = medicineID => {\n    if (!data.dose[medicineID]) {\n      dispatch(Action.getDoseList({\n        medicineID: medicineID\n      }));\n    }\n\n    if (!data.mealTime[medicineID]) {\n      dispatch(Action.getMealTimeList({\n        medicineID: medicineID\n      }));\n    }\n\n    if (!data.frequents[medicineID]) {\n      dispatch(Action.getFrequentList({\n        medicineID: medicineID\n      }));\n    }\n  };\n\n  const handleChangeMedicine = (newValue, actionMeta) => {\n    if (newValue) {\n      setDefaultMedicine(newValue);\n\n      if (newValue.medicineID) {\n        getDosesMealTimesFrequents(newValue.medicineID);\n        setMedicineID(newValue.medicineID);\n      }\n\n      dispatch(Action.addTemplateMedicine({\n        uuid: dataRow.uuid,\n        medicineID: newValue.medicineID,\n        medicineName: newValue.label\n      }));\n    }\n  };\n\n  const handleChangeDose = (newValue, actionMeta) => {\n    if (newValue) {\n      setDefaultDoses(newValue);\n      dispatch(Action.addTemplateMedicine({\n        uuid: dataRow.uuid,\n        doseID: newValue.doseID,\n        dose: newValue.label\n      }));\n    }\n  };\n\n  const handleChangeMealTime = (newValue, actionMeta) => {\n    if (newValue) {\n      setDefaultMealTimes(newValue);\n      dispatch(Action.addTemplateMedicine({\n        uuid: dataRow.uuid,\n        mealTimeID: newValue.mealTimeID,\n        mealTime: newValue.label\n      }));\n    }\n  };\n\n  const handleChangeFrequent = (newValue, actionMeta) => {\n    if (newValue) {\n      setDefaultFrequents(newValue);\n      dispatch(Action.addTemplateMedicine({\n        uuid: dataRow.uuid,\n        frequentID: newValue.frequentID,\n        frequent: newValue.label\n      }));\n    }\n  };\n\n  const toggleState = () => {\n    dispatch(Action.toggleState(dataRow));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    enableReinitialize: true,\n    initialValues: initValues,\n    onSubmit: (values, _ref3) => {\n      let {\n        setSubmitting\n      } = _ref3;\n      setTimeout(() => {\n        setSubmitting(false);\n      }, 200);\n    },\n    validateOnMount: true,\n    validateOnChange: true,\n    validate: values => {},\n    children: /*#__PURE__*/_jsxDEV(CRow, {\n      className: 'clickable-data-row',\n      style: dataRow.removed ? {\n        backgroundColor: '#dee6f3',\n        paddingTop: '10px'\n      } : null,\n      children: [/*#__PURE__*/_jsxDEV(CCol, {\n        children: /*#__PURE__*/_jsxDEV(CFormGroup, {\n          children: /*#__PURE__*/_jsxDEV(CreatableSelect, {\n            isClearable: true,\n            value: defaultMedicine,\n            onChange: handleChangeMedicine,\n            options: data.medicineList\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CCol, {\n        children: /*#__PURE__*/_jsxDEV(CFormGroup, {\n          children: /*#__PURE__*/_jsxDEV(CreatableSelect, {\n            isClearable: true,\n            value: defaultDose,\n            onChange: handleChangeDose,\n            options: doses\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CCol, {\n        children: /*#__PURE__*/_jsxDEV(CFormGroup, {\n          children: /*#__PURE__*/_jsxDEV(CreatableSelect, {\n            isClearable: true,\n            value: defaultMealTime,\n            onChange: handleChangeMealTime,\n            options: mealTimes\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CCol, {\n        children: /*#__PURE__*/_jsxDEV(CFormGroup, {\n          children: /*#__PURE__*/_jsxDEV(CreatableSelect, {\n            value: defaultFrequent,\n            isClearable: true,\n            onChange: handleChangeFrequent,\n            options: frequents\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CCol, {\n        className: \"text-align-center\",\n        children: /*#__PURE__*/_jsxDEV(CFormGroup, {\n          children: /*#__PURE__*/_jsxDEV(CTooltip, {\n            content: 'Add new Prescription Template',\n            children: /*#__PURE__*/_jsxDEV(CButton, {\n              onClick: () => {\n                toggleState();\n              },\n              color: \"danger\",\n              children: /*#__PURE__*/_jsxDEV(CIcon, {\n                size: 'sm',\n                name: dataRow.removed ? \"cil-reload\" : \"cil-x-circle\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 224,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 17\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PrescriptionTemplateMedicineRow, \"UOo4f2UCGqyAa1TmsB0kTj8ko0Q=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = PrescriptionTemplateMedicineRow;\nexport default PrescriptionTemplateMedicineRow;\n\nvar _c;\n\n$RefreshReg$(_c, \"PrescriptionTemplateMedicineRow\");","map":{"version":3,"sources":["C:/Users/chamald/Desktop/Chamal/react/react-app/src/app/views/admin/config/prescriptionTemplate/add-edit/components/PrescriptionTemplateMedicineRow.js"],"names":["React","useEffect","useState","CButton","CCol","CFormGroup","CRow","CTooltip","Action","useDispatch","useSelector","Formik","CreatableSelect","CIcon","initValues","prescriptionTemplateMedicineID","medicineID","medicineName","doseID","dose","mealTimeID","mealTime","frequentID","frequent","defaultOption","PrescriptionTemplateMedicineRow","dataRow","index","dispatch","data","prescriptionTemplate","prescriptionTemplateAddEdit","setMedicineID","doses","setDoses","mealTimes","setMealTimes","frequents","setFrequents","defaultMedicine","setDefaultMedicine","defaultDose","setDefaultDoses","defaultMealTime","setDefaultMealTimes","defaultFrequent","setDefaultFrequents","Object","assign","label","value","uuid","getDosesMealTimesFrequents","addedTemplateMedicine","getDoseList","getMealTimeList","getFrequentList","handleChangeMedicine","newValue","actionMeta","addTemplateMedicine","handleChangeDose","handleChangeMealTime","handleChangeFrequent","toggleState","values","setSubmitting","setTimeout","removed","backgroundColor","paddingTop","medicineList"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {CButton, CCol, CFormGroup, CRow, CTooltip} from \"@coreui/react\";\nimport * as Action from \"../../store/actions\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {Formik} from \"formik\";\nimport CreatableSelect from 'react-select/creatable';\nimport CIcon from \"@coreui/icons-react\";\n\nlet initValues = {\n    prescriptionTemplateMedicineID: '',\n    medicineID: '',\n    medicineName: '',\n    doseID: '',\n    dose: '',\n    mealTimeID: '',\n    mealTime: '',\n    frequentID: '',\n    frequent: ''\n};\n\nlet defaultOption = null;\n\nconst PrescriptionTemplateMedicineRow = ({dataRow, index}) => {\n    const dispatch = useDispatch();\n    const data = useSelector(({prescriptionTemplate}) => prescriptionTemplate.prescriptionTemplateAddEdit);\n    const [medicineID, setMedicineID] = useState();\n\n    const [doses, setDoses] = useState([]);\n    const [mealTimes, setMealTimes] = useState([]);\n    const [frequents, setFrequents] = useState([]);\n\n    const [defaultMedicine, setDefaultMedicine] = useState(defaultOption);\n    const [defaultDose, setDefaultDoses] = useState(defaultOption);\n    const [defaultMealTime, setDefaultMealTimes] = useState(defaultOption);\n    const [defaultFrequent, setDefaultFrequents] = useState(defaultOption);\n\n\n    useEffect(() => {\n        let defaultMedicine = Object.assign({}, {\n            label: dataRow.medicineName,\n            value: dataRow.medicineName,\n            medicineID: dataRow.medicineID,\n            uuid: dataRow.uuid\n        });\n\n        if (dataRow.medicineID) {\n            getDosesMealTimesFrequents(dataRow.medicineID);\n        }\n\n        let defaultDose = Object.assign({}, {\n            label: dataRow.dose,\n            value: dataRow.dose,\n            medicineID: dataRow.medicineID,\n            doseID: dataRow.doseID,\n            uuid: dataRow.uuid\n        });\n        let defaultMealTime = Object.assign({}, {\n            label: dataRow.mealTime,\n            value: dataRow.mealTime,\n            medicineID: dataRow.medicineID,\n            mealTimeID: dataRow.mealTimeID,\n            uuid: dataRow.uuid\n        });\n        let defaultFrequent = Object.assign({}, {\n            label: dataRow.frequent,\n            value: dataRow.frequent,\n            medicineID: dataRow.medicineID,\n            frequentID: dataRow.frequentID,\n            uuid: dataRow.uuid\n        });\n\n        setDefaultMedicine(defaultMedicine);\n        setDefaultDoses(defaultDose);\n        setDefaultMealTimes(defaultMealTime);\n        setDefaultFrequents(defaultFrequent);\n\n    }, [data.addedTemplateMedicine]);\n\n    useEffect(() => {\n        setDoses(data.dose[medicineID]);\n    }, [data.dose[medicineID]]);\n\n    useEffect(() => {\n        setMealTimes(data.mealTime[medicineID]);\n    }, [data.mealTime[medicineID]]);\n\n    useEffect(() => {\n        setFrequents(data.frequents[medicineID]);\n    }, [data.frequents[medicineID]]);\n\n\n    const getDosesMealTimesFrequents = (medicineID) => {\n        if (!data.dose[medicineID]) {\n            dispatch(Action.getDoseList({medicineID: medicineID}));\n        }\n\n        if (!data.mealTime[medicineID]) {\n            dispatch(Action.getMealTimeList({medicineID: medicineID}));\n        }\n\n        if (!data.frequents[medicineID]) {\n            dispatch(Action.getFrequentList({medicineID: medicineID}));\n        }\n    };\n\n    const handleChangeMedicine = (newValue, actionMeta) => {\n        if (newValue) {\n            setDefaultMedicine(newValue);\n            if (newValue.medicineID) {\n                getDosesMealTimesFrequents(newValue.medicineID);\n                setMedicineID(newValue.medicineID);\n            }\n            dispatch(Action.addTemplateMedicine({\n                uuid: dataRow.uuid,\n                medicineID: newValue.medicineID,\n                medicineName: newValue.label\n            }))\n        }\n    };\n\n    const handleChangeDose = (newValue, actionMeta) => {\n        if (newValue) {\n            setDefaultDoses(newValue);\n            dispatch(Action.addTemplateMedicine({uuid: dataRow.uuid, doseID: newValue.doseID, dose: newValue.label}))\n        }\n    };\n\n    const handleChangeMealTime = (newValue, actionMeta) => {\n        if (newValue) {\n            setDefaultMealTimes(newValue);\n            dispatch(Action.addTemplateMedicine({\n                uuid: dataRow.uuid,\n                mealTimeID: newValue.mealTimeID,\n                mealTime: newValue.label\n            }));\n        }\n    };\n\n    const handleChangeFrequent = (newValue, actionMeta) => {\n        if (newValue) {\n            setDefaultFrequents(newValue);\n            dispatch(Action.addTemplateMedicine({\n                uuid: dataRow.uuid,\n                frequentID: newValue.frequentID,\n                frequent: newValue.label\n            }));\n        }\n    };\n\n    const toggleState = () => {\n        dispatch(Action.toggleState(dataRow));\n    };\n\n    return (\n        <Formik\n            enableReinitialize={true}\n            initialValues={initValues}\n            onSubmit={(values, {setSubmitting}) => {\n                setTimeout(() => {\n                    setSubmitting(false)\n                }, 200)\n            }}\n            validateOnMount={true}\n            validateOnChange={true}\n            validate={(values => {\n            })}\n        >\n            <CRow key={index}\n                  className={'clickable-data-row'}\n                  style={dataRow.removed ? {backgroundColor: '#dee6f3', paddingTop: '10px'} : null}\n            >\n                <CCol>\n                    <CFormGroup>\n                        <CreatableSelect\n                            isClearable\n                            value={defaultMedicine}\n                            onChange={handleChangeMedicine}\n                            options={data.medicineList}\n                        />\n                    </CFormGroup>\n                </CCol>\n\n                <CCol>\n                    <CFormGroup>\n                        <CreatableSelect\n                            isClearable\n                            value={defaultDose}\n                            onChange={handleChangeDose}\n                            options={doses}\n                        />\n                    </CFormGroup>\n                </CCol>\n\n                <CCol>\n                    <CFormGroup>\n                        <CreatableSelect\n                            isClearable\n                            value={defaultMealTime}\n                            onChange={handleChangeMealTime}\n                            options={mealTimes}\n                        />\n                    </CFormGroup>\n                </CCol>\n                <CCol>\n                    <CFormGroup>\n                        <CreatableSelect\n                            value={defaultFrequent}\n                            isClearable\n                            onChange={handleChangeFrequent}\n                            options={frequents}\n                        />\n                    </CFormGroup>\n                </CCol>\n                <CCol className=\"text-align-center\">\n                    <CFormGroup>\n                        <CTooltip\n                            content={'Add new Prescription Template'}\n                        >\n                            <CButton\n                                onClick={() => {\n                                    toggleState()\n                                }}\n                                color=\"danger\">\n                                <CIcon size={'sm'} name={dataRow.removed ? \"cil-reload\" : \"cil-x-circle\"}/>\n                            </CButton>\n                        </CTooltip>\n                    </CFormGroup>\n                </CCol>\n            </CRow>\n        </Formik>\n    );\n};\n\nexport default PrescriptionTemplateMedicineRow;"]},"metadata":{},"sourceType":"module"}