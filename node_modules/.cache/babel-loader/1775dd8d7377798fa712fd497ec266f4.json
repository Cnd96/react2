{"ast":null,"code":"import _ from 'lodash';\nimport Constants from \"./Constants\";\nimport { getUUID } from \"./UUIDUtils\";\n\nclass EventEmitter {\n  constructor() {\n    this.events = {};\n  }\n\n  _getEventListByName(eventName) {\n    if (typeof this.events[eventName] === 'undefined') {\n      this.events[eventName] = new Set();\n    }\n\n    return this.events[eventName];\n  }\n\n  on(eventName, fn) {\n    this._getEventListByName(eventName).add(fn);\n  }\n\n  once(eventName, fn) {\n    const self = this;\n\n    const onceFn = function () {\n      self.removeListener(eventName, onceFn);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      fn.apply(self, args);\n    };\n\n    this.on(eventName, onceFn);\n  }\n\n  emit(eventName) {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n\n    this._getEventListByName(eventName).forEach(function (fn) {\n      fn.apply(this, args);\n    }.bind(this));\n  }\n\n  removeListener(eventName, fn) {\n    this._getEventListByName(eventName).delete(fn);\n  }\n\n}\n\nclass HealthTrackerUtils {\n  static generateRoutesFromConfigs(configs) {\n    let allRoutes = [];\n    configs.forEach(config => {\n      allRoutes = [...allRoutes, ...this.setRoutes(config)];\n    });\n    return allRoutes;\n  }\n\n  static setRoutes(config) {\n    let routes = [...config.routes];\n\n    if (config.settings || config.auth) {\n      routes = routes.map(route => {\n        let auth = config.auth ? [...config.auth] : null;\n        auth = route.auth ? [...auth, ...route.auth] : auth;\n        return { ...route,\n          settings: { ...config.settings,\n            ...route.settings\n          },\n          auth\n        };\n      });\n    }\n\n    return [...routes];\n  }\n\n  static updateNavItem(nav, id, item) {\n    return nav.map(_item => {\n      if (_item.id === id) {\n        return _.merge({}, _item, item);\n      }\n\n      if (_item.children) {\n        return _.merge({}, _item, {\n          children: this.updateNavItem(_item.children, id, item)\n        });\n      } else {\n        return _.merge({}, _item);\n      }\n    });\n  }\n\n  static removeNavItem(nav, id) {\n    return nav.map(_item => {\n      if (_item.id === id) {\n        return null;\n      }\n\n      if (_item.children) {\n        return _.merge({}, _.omit(_item, ['children']), {\n          children: this.removeNavItem(_item.children, id)\n        });\n      } else {\n        return _.merge({}, _item);\n      }\n    }).filter(s => s);\n  }\n\n  static prependNavItem(nav, item, parentId) {\n    if (!parentId) {\n      return [item, ...nav];\n    }\n\n    return nav.map(_item => {\n      if (_item.id === parentId && _item.children) {\n        return {\n          _item,\n          children: [item, ..._item.children]\n        };\n      }\n\n      if (_item.children) {\n        return _.merge({}, _item, {\n          children: this.prependNavItem(_item.children, item, parentId)\n        });\n      } else {\n        return _.merge({}, _item);\n      }\n    });\n  }\n\n  static appendNavItem(nav, item, parentId) {\n    if (!parentId) {\n      return [...nav, item];\n    }\n\n    return nav.map(_item => {\n      if (_item.id === parentId && _item.children) {\n        return {\n          _item,\n          children: [..._item.children, item]\n        };\n      }\n\n      if (_item.children) {\n        return _.merge({}, _item, {\n          children: this.appendNavItem(_item.children, item, parentId)\n        });\n      } else {\n        return _.merge({}, _item);\n      }\n    });\n  }\n\n  static hasPrivilege(privilege, allPrivileges) {\n    return _.indexOf(allPrivileges, privilege.trim()) !== -1;\n  }\n\n  static hasAnyPrivilege(privileges, allPrivileges) {\n    let hasPrivilege = false;\n\n    for (let i = 0; i < privileges.length; i++) {\n      if (this.hasPrivilege(privileges[i], allPrivileges)) {\n        hasPrivilege = true;\n        break;\n      }\n    }\n\n    return hasPrivilege;\n  }\n\n}\n\nHealthTrackerUtils.EventEmitter = EventEmitter;\nexport default HealthTrackerUtils;\nexport const isValueIsNumber = value => {\n  return /^-?[\\d.]+(?:e-?\\d+)?$/.test(value);\n};\nexport const toDate = date_string => {\n  let date_components = date_string.substr(0, 10).split(\"/\");\n  let day = date_components[0];\n  let month = date_components[1];\n  let year = date_components[2];\n  return new Date(year, month - 1, day);\n};\nexport const getFullName = patient => {\n  let {\n    title,\n    firstName,\n    middleName,\n    lastName\n  } = patient;\n  title = _.trim(title);\n  firstName = _.trim(firstName);\n  middleName = _.trim(middleName);\n  lastName = _.trim(lastName);\n  return title.concat(' .').concat(firstName).concat(' ').concat(middleName).concat(' ').concat(lastName);\n};\nexport const initialDataRow = () => {\n  return {\n    prescriptionTemplateMedicineID: '',\n    medicineID: '',\n    medicineName: '',\n    doseID: '',\n    dose: '',\n    mealTimeID: '',\n    mealTime: '',\n    frequent: '',\n    frequentID: '',\n    updated: false,\n    removed: false\n  };\n};\nexport const initMedicineLines = () => {\n  const lineItems = [];\n\n  for (let i = 0; i < Constants.MAX_ROW_COUNT; i++) {\n    let dataRow = {\n      uuid: getUUID(),\n      ...initialDataRow()\n    };\n    lineItems.push(dataRow);\n  }\n\n  return lineItems;\n};\nexport const setMedicineLines = val => {\n  const lineItems = [];\n\n  for (let i = 0; i < val; i++) {\n    let dataRow = {\n      uuid: getUUID(),\n      ...initialDataRow()\n    };\n    lineItems.push(dataRow);\n  }\n\n  return lineItems;\n};\nexport const addMedicineLine = () => {\n  return {\n    uuid: getUUID(),\n    ...initialDataRow()\n  };\n};","map":{"version":3,"sources":["C:/Users/chamald/Desktop/Chamal/react/react-app/src/utils/HealthTrackerUtils.js"],"names":["_","Constants","getUUID","EventEmitter","constructor","events","_getEventListByName","eventName","Set","on","fn","add","once","self","onceFn","removeListener","args","apply","emit","forEach","bind","delete","HealthTrackerUtils","generateRoutesFromConfigs","configs","allRoutes","config","setRoutes","routes","settings","auth","map","route","updateNavItem","nav","id","item","_item","merge","children","removeNavItem","omit","filter","s","prependNavItem","parentId","appendNavItem","hasPrivilege","privilege","allPrivileges","indexOf","trim","hasAnyPrivilege","privileges","i","length","isValueIsNumber","value","test","toDate","date_string","date_components","substr","split","day","month","year","Date","getFullName","patient","title","firstName","middleName","lastName","concat","initialDataRow","prescriptionTemplateMedicineID","medicineID","medicineName","doseID","dose","mealTimeID","mealTime","frequent","frequentID","updated","removed","initMedicineLines","lineItems","MAX_ROW_COUNT","dataRow","uuid","push","setMedicineLines","val","addMedicineLine"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport Constants from \"./Constants\";\nimport {getUUID} from \"./UUIDUtils\";\n\nclass EventEmitter {\n\n    constructor() {\n        this.events = {};\n    }\n\n    _getEventListByName(eventName) {\n        if (typeof this.events[eventName] === 'undefined') {\n            this.events[eventName] = new Set();\n        }\n        return this.events[eventName]\n    }\n\n    on(eventName, fn) {\n        this._getEventListByName(eventName).add(fn);\n    }\n\n    once(eventName, fn) {\n\n        const self = this;\n\n        const onceFn = function (...args) {\n            self.removeListener(eventName, onceFn);\n            fn.apply(self, args);\n        };\n        this.on(eventName, onceFn);\n\n    }\n\n    emit(eventName, ...args) {\n\n        this._getEventListByName(eventName).forEach(function (fn) {\n\n            fn.apply(this, args);\n\n        }.bind(this));\n\n    }\n\n    removeListener(eventName, fn) {\n        this._getEventListByName(eventName).delete(fn);\n    }\n}\n\nclass HealthTrackerUtils {\n\n    static generateRoutesFromConfigs(configs) {\n        let allRoutes = [];\n        configs.forEach((config) => {\n            allRoutes = [\n                ...allRoutes,\n                ...this.setRoutes(config)\n            ]\n        });\n        return allRoutes;\n    }\n\n    static setRoutes(config) {\n        let routes = [...config.routes];\n\n        if (config.settings || config.auth) {\n            routes = routes.map((route) => {\n                let auth = config.auth ? [...config.auth] : null;\n                auth = route.auth ? [...auth, ...route.auth] : auth;\n                return {\n                    ...route,\n                    settings: {...config.settings, ...route.settings},\n                    auth\n                };\n            });\n        }\n\n        return [...routes];\n    }\n\n    static updateNavItem(nav, id, item) {\n        return nav.map(_item => {\n\n            if (_item.id === id) {\n                return _.merge({}, _item, item);\n            }\n\n            if (_item.children) {\n                return _.merge({}, _item, {\n                    children: this.updateNavItem(_item.children, id, item)\n                });\n            } else {\n                return _.merge({}, _item);\n            }\n        })\n    }\n\n    static removeNavItem(nav, id) {\n        return nav.map(_item => {\n            if (_item.id === id) {\n                return null;\n            }\n\n            if (_item.children) {\n                return _.merge({}, _.omit(_item, ['children']), {\n                    children: this.removeNavItem(_item.children, id)\n                });\n            } else {\n                return _.merge({}, _item);\n            }\n        }).filter(s => s)\n    }\n\n    static prependNavItem(nav, item, parentId) {\n        if (!parentId) {\n            return [\n                item,\n                ...nav\n            ]\n        }\n\n        return nav.map(_item => {\n\n            if (_item.id === parentId && _item.children) {\n                return {\n                    _item,\n                    children: [\n                        item,\n                        ..._item.children\n                    ]\n                };\n            }\n\n            if (_item.children) {\n                return _.merge({}, _item, {\n                    children: this.prependNavItem(_item.children, item, parentId)\n                });\n            } else {\n                return _.merge({}, _item);\n            }\n        })\n    }\n\n    static appendNavItem(nav, item, parentId) {\n        if (!parentId) {\n            return [\n                ...nav,\n                item\n            ]\n        }\n\n        return nav.map(_item => {\n\n            if (_item.id === parentId && _item.children) {\n                return {\n                    _item,\n                    children: [\n                        ..._item.children,\n                        item\n                    ]\n                };\n            }\n\n            if (_item.children) {\n                return _.merge({}, _item, {\n                    children: this.appendNavItem(_item.children, item, parentId)\n                });\n            } else {\n                return _.merge({}, _item);\n            }\n        })\n    }\n\n    static hasPrivilege(privilege, allPrivileges) {\n        return _.indexOf(allPrivileges, privilege.trim()) !== -1;\n    }\n\n    static hasAnyPrivilege(privileges, allPrivileges) {\n        let hasPrivilege = false;\n\n        for (let i = 0; i < privileges.length; i++) {\n            if (this.hasPrivilege(privileges[i], allPrivileges)) {\n                hasPrivilege = true;\n                break;\n            }\n        }\n\n        return hasPrivilege;\n    }\n\n    static EventEmitter = EventEmitter;\n\n\n}\n\nexport default HealthTrackerUtils;\n\nexport const isValueIsNumber = (value) => {\n    return /^-?[\\d.]+(?:e-?\\d+)?$/.test(value)\n};\n\nexport const toDate = (date_string) => {\n    let date_components = date_string.substr(0, 10).split(\"/\");\n    let day = date_components[0];\n    let month = date_components[1];\n    let year = date_components[2];\n    return new Date(year, month - 1, day);\n};\n\nexport const getFullName = (patient) => {\n    let {title, firstName, middleName, lastName} = patient;\n    title = _.trim(title);\n    firstName = _.trim(firstName);\n    middleName = _.trim(middleName);\n    lastName = _.trim(lastName);\n    return title.concat(' .').concat(firstName).concat(' ').concat(middleName).concat(' ').concat(lastName);\n};\n\nexport const initialDataRow = () => {\n    return {\n        prescriptionTemplateMedicineID: '',\n        medicineID: '',\n        medicineName: '',\n        doseID: '',\n        dose: '',\n        mealTimeID: '',\n        mealTime: '',\n        frequent: '',\n        frequentID: '',\n        updated: false,\n        removed: false\n    }\n};\n\nexport const initMedicineLines = () => {\n    const lineItems = [];\n    for (let i = 0; i < Constants.MAX_ROW_COUNT; i++) {\n        let dataRow = {\n            uuid: getUUID(),\n            ...initialDataRow()\n        };\n        lineItems.push(dataRow);\n    }\n    return lineItems;\n};\n\nexport const setMedicineLines = (val) => {\n    const lineItems = [];\n    for (let i = 0; i < val; i++) {\n        let dataRow = {\n            uuid: getUUID(),\n            ...initialDataRow()\n        };\n        lineItems.push(dataRow);\n    }\n    return lineItems;\n};\n\nexport const addMedicineLine = () => {\n    return {\n        uuid: getUUID(),\n        ...initialDataRow()\n    };\n};\n\n"]},"metadata":{},"sourceType":"module"}