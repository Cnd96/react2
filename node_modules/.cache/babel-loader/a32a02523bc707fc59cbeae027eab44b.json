{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chamald\\\\Desktop\\\\Chamal\\\\react\\\\react-app\\\\src\\\\app\\\\views\\\\admin\\\\config\\\\dietaryHabit\\\\add-edit\\\\components\\\\DietaryHabitAddEditFrom.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { ErrorMessage, Field, Form, Formik } from \"formik\";\nimport { CCol, CFormGroup, CLabel, CRow, CSelect } from \"@coreui/react\";\nimport { getCommonStatusOptions, getInputFieldClassNames, getOptionsListByObjectListForCustomSelect } from \"../../../../../../../utils/FormUtils\";\nimport Constants from \"../../../../../../../utils/Constants\";\nimport customValidator from \"../../../../../../../utils/ValidationUtil\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as Actions from '../../store/action/dietary.habit.add.edit.action';\nimport { removeStorageItem } from \"../../../../../../../utils/StorageUtils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst initValues = {\n  dietaryHabitID: '',\n  dietaryCategoryID: '',\n  dietaryHabit: '',\n  status: Constants.STATUS_CONST.ACT\n};\n\nconst getValidations = () => {\n  return {\n    dietaryHabit: {\n      required: {\n        message: 'Required'\n      }\n    },\n    dietaryCategoryID: {\n      required: {\n        message: 'Required'\n      }\n    }\n  };\n};\n\nconst DietaryHabitAddEditFrom = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const [formValues, setFormValues] = useState(initValues);\n  const data = useSelector(_ref => {\n    let {\n      dietaryHabit\n    } = _ref;\n    return dietaryHabit.dietaryHabitAddEdit;\n  });\n  useEffect(() => {\n    let dietaryHabit = data.dietaryHabit;\n    let initData = {\n      dietaryHabitID: dietaryHabit.dietaryHabitID ? dietaryHabit.dietaryHabitID : initValues.dietaryHabitID,\n      dietaryCategoryID: dietaryHabit.dietaryCategoryID ? dietaryHabit.dietaryCategoryID : initValues.dietaryCategoryID,\n      dietaryHabit: dietaryHabit.dietaryHabit ? dietaryHabit.dietaryHabit : initValues.dietaryHabit,\n      status: dietaryHabit.status ? dietaryHabit.status : initValues.status\n    };\n    setFormValues(initData);\n  }, [dispatch, data.dietaryHabit]);\n  useEffect(() => {\n    return () => {\n      removeStorageItem(Constants.STORAGE.SELECTED_DIETARY_HABIT_ID);\n      dispatch(Actions.reset());\n    };\n  }, []);\n\n  const onCustomValidation = values => {\n    let validate = customValidator(values, getValidations());\n    dispatch(Actions.onFormChange({\n      isValid: validate.isValid,\n      values: values\n    }));\n    return validate.errors;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      enableReinitialize: true,\n      initialValues: formValues,\n      onSubmit: (values, _ref2) => {\n        let {\n          setSubmitting\n        } = _ref2;\n        setTimeout(() => {\n          setSubmitting(false);\n        }, 200);\n      },\n      validateOnChange: true,\n      validate: values => {\n        return onCustomValidation(values);\n      },\n      children: _ref3 => {\n        let {\n          errors,\n          touched\n        } = _ref3;\n        return /*#__PURE__*/_jsxDEV(Form, {\n          children: /*#__PURE__*/_jsxDEV(CRow, {\n            children: [/*#__PURE__*/_jsxDEV(CCol, {\n              sm: \"12\",\n              md: \"6\",\n              lg: \"3\",\n              children: [/*#__PURE__*/_jsxDEV(CFormGroup, {\n                children: [/*#__PURE__*/_jsxDEV(CLabel, {\n                  htmlFor: \"dietaryHabit\",\n                  className: 'required',\n                  children: \"Dietary Habit Quiz\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 92,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Field, {\n                  type: \"text\",\n                  name: \"dietaryHabit\",\n                  placeholder: 'Quiz',\n                  className: getInputFieldClassNames(touched.dietaryHabit, errors.dietaryHabit)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 97,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                name: \"dietaryHabit\",\n                render: msg => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: 'formik-error-message',\n                  children: msg\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 108,\n                  columnNumber: 58\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(CCol, {\n              sm: \"12\",\n              md: \"6\",\n              lg: \"3\",\n              children: [/*#__PURE__*/_jsxDEV(CFormGroup, {\n                children: [/*#__PURE__*/_jsxDEV(CLabel, {\n                  htmlFor: \"\",\n                  className: 'required',\n                  children: \"Dietary Habit Category\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 115,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Field, {\n                  name: \"dietaryCategoryID\",\n                  children: _ref4 => {\n                    let {\n                      field,\n                      // { name, value, onChange, onBlur }\n                      form: {\n                        touched,\n                        errors\n                      },\n                      // also values, setXXXX, handleXXXX, dirty, isValid, status, etc.\n                      meta\n                    } = _ref4;\n                    return /*#__PURE__*/_jsxDEV(CSelect, {\n                      custom: true,\n                      name: \"dietaryCategoryID\",\n                      ...field,\n                      children: data && getOptionsListByObjectListForCustomSelect(data.dietaryHabitCategories, \"dietaryCategory\", \"dietaryCategoryID\", \"dietaryCategoryID\", \"dietaryCategoryID\", true).map(item => {\n                        return /*#__PURE__*/_jsxDEV(\"option\", {\n                          value: item.key,\n                          children: item.value\n                        }, item.key, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 131,\n                          columnNumber: 65\n                        }, this);\n                      })\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 125,\n                      columnNumber: 49\n                    }, this);\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 117,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                name: \"dietaryCategoryID\",\n                render: msg => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: 'formik-error-message',\n                  children: msg\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 142,\n                  columnNumber: 58\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(CCol, {\n              sm: \"12\",\n              md: \"6\",\n              lg: \"3\",\n              children: [/*#__PURE__*/_jsxDEV(CFormGroup, {\n                children: [/*#__PURE__*/_jsxDEV(CLabel, {\n                  htmlFor: \"status\",\n                  className: 'required',\n                  children: \"Status\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 150,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Field, {\n                  name: \"status\",\n                  className: getInputFieldClassNames(touched.status, errors.status),\n                  children: _ref5 => {\n                    let {\n                      field,\n                      // { name, value, onChange, onBlur }\n                      form: {\n                        touched,\n                        errors\n                      },\n                      // also values, setXXXX, handleXXXX, dirty, isValid, status, etc.\n                      meta\n                    } = _ref5;\n                    return /*#__PURE__*/_jsxDEV(CSelect, {\n                      custom: true,\n                      name: \"status\",\n                      ...field,\n                      children: getCommonStatusOptions(false).map(item => {\n                        return /*#__PURE__*/_jsxDEV(\"option\", {\n                          value: item.key,\n                          children: item.value\n                        }, item.key, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 165,\n                          columnNumber: 65\n                        }, this);\n                      })\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 161,\n                      columnNumber: 49\n                    }, this);\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 152,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 149,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                name: \"status\",\n                render: msg => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: 'formik-error-message',\n                  children: msg\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 176,\n                  columnNumber: 58\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 174,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 25\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(DietaryHabitAddEditFrom, \"S3woDSqtEJJajHJBMG9tCQULSmQ=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = DietaryHabitAddEditFrom;\nexport default DietaryHabitAddEditFrom;\n\nvar _c;\n\n$RefreshReg$(_c, \"DietaryHabitAddEditFrom\");","map":{"version":3,"sources":["C:/Users/chamald/Desktop/Chamal/react/react-app/src/app/views/admin/config/dietaryHabit/add-edit/components/DietaryHabitAddEditFrom.js"],"names":["React","useEffect","useState","ErrorMessage","Field","Form","Formik","CCol","CFormGroup","CLabel","CRow","CSelect","getCommonStatusOptions","getInputFieldClassNames","getOptionsListByObjectListForCustomSelect","Constants","customValidator","useDispatch","useSelector","Actions","removeStorageItem","initValues","dietaryHabitID","dietaryCategoryID","dietaryHabit","status","STATUS_CONST","ACT","getValidations","required","message","DietaryHabitAddEditFrom","dispatch","formValues","setFormValues","data","dietaryHabitAddEdit","initData","STORAGE","SELECTED_DIETARY_HABIT_ID","reset","onCustomValidation","values","validate","onFormChange","isValid","errors","setSubmitting","setTimeout","touched","msg","field","form","meta","dietaryHabitCategories","map","item","key","value"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {ErrorMessage, Field, Form, Formik} from \"formik\";\nimport {CCol, CFormGroup, CLabel, CRow, CSelect} from \"@coreui/react\";\nimport {\n    getCommonStatusOptions,\n    getInputFieldClassNames,\n    getOptionsListByObjectListForCustomSelect\n} from \"../../../../../../../utils/FormUtils\";\nimport Constants from \"../../../../../../../utils/Constants\";\nimport customValidator from \"../../../../../../../utils/ValidationUtil\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport * as Actions from '../../store/action/dietary.habit.add.edit.action'\nimport {removeStorageItem} from \"../../../../../../../utils/StorageUtils\";\n\nconst initValues = {\n    dietaryHabitID: '',\n    dietaryCategoryID: '',\n    dietaryHabit: '',\n    status: Constants.STATUS_CONST.ACT,\n};\n\nconst getValidations = () => {\n    return {\n        dietaryHabit: {\n            required: {message: 'Required'},\n        },\n        dietaryCategoryID: {\n            required: {message: 'Required'},\n        },\n    };\n};\n\nconst DietaryHabitAddEditFrom = () => {\n\n    const dispatch = useDispatch();\n    const [formValues, setFormValues] = useState(initValues);\n    const data = useSelector(({dietaryHabit}) => dietaryHabit.dietaryHabitAddEdit);\n\n    useEffect(() => {\n\n        let dietaryHabit = data.dietaryHabit;\n        let initData = {\n            dietaryHabitID: dietaryHabit.dietaryHabitID ? dietaryHabit.dietaryHabitID : initValues.dietaryHabitID,\n            dietaryCategoryID: dietaryHabit.dietaryCategoryID ? dietaryHabit.dietaryCategoryID : initValues.dietaryCategoryID,\n            dietaryHabit: dietaryHabit.dietaryHabit ? dietaryHabit.dietaryHabit : initValues.dietaryHabit,\n            status: dietaryHabit.status ? dietaryHabit.status : initValues.status,\n        };\n        setFormValues(initData);\n\n    }, [dispatch, data.dietaryHabit]);\n\n    useEffect(() => {\n        return (() => {\n            removeStorageItem(Constants.STORAGE.SELECTED_DIETARY_HABIT_ID);\n            dispatch(Actions.reset());\n        })\n    }, []);\n\n    const onCustomValidation = (values) => {\n\n        let validate = customValidator(values, getValidations());\n        dispatch(Actions.onFormChange(\n            {\n                isValid: validate.isValid,\n                values: values\n            }));\n        return validate.errors;\n    };\n\n    return (\n        <>\n            <Formik\n                enableReinitialize={true}\n                initialValues={formValues}\n                onSubmit={(values, {setSubmitting}) => {\n                    setTimeout(() => {\n                        setSubmitting(false)\n                    }, 200)\n                }}\n                validateOnChange={true}\n                validate={(values) => {\n                    return onCustomValidation(values);\n                }}\n            >\n                {({errors, touched}) => {\n                    return (\n                        <Form>\n                            <CRow>\n\n                                <CCol sm=\"12\" md=\"6\" lg=\"3\">\n                                    <CFormGroup>\n                                        <CLabel htmlFor=\"dietaryHabit\"\n                                                className={'required'}>\n                                            Dietary Habit Quiz\n                                        </CLabel>\n\n                                        <Field\n                                            type=\"text\"\n                                            name=\"dietaryHabit\"\n                                            placeholder={'Quiz'}\n                                            className={getInputFieldClassNames(touched.dietaryHabit, errors.dietaryHabit)}\n                                        />\n\n                                    </CFormGroup>\n\n                                    <ErrorMessage\n                                        name=\"dietaryHabit\"\n                                        render={(msg) => <div\n                                            className={'formik-error-message'}>{msg}</div>}\n                                    />\n                                </CCol>\n\n                                <CCol sm=\"12\" md=\"6\" lg=\"3\">\n                                    <CFormGroup>\n                                        <CLabel htmlFor=\"\" className={'required'}>Dietary Habit Category</CLabel>\n\n                                        <Field name=\"dietaryCategoryID\"\n                                        >\n                                            {({\n                                                  field, // { name, value, onChange, onBlur }\n                                                  form: {touched, errors}, // also values, setXXXX, handleXXXX, dirty, isValid, status, etc.\n                                                  meta,\n                                              }) => (\n\n                                                <CSelect custom name=\"dietaryCategoryID\" {...field}>\n                                                    {\n                                                        data &&\n                                                        getOptionsListByObjectListForCustomSelect(data.dietaryHabitCategories, \"dietaryCategory\", \"dietaryCategoryID\", \"dietaryCategoryID\", \"dietaryCategoryID\", true).map((item) => {\n                                                            return (\n\n                                                                <option key={item.key}\n                                                                        value={item.key}>{item.value}</option>\n                                                            );\n                                                        })\n                                                    }\n                                                </CSelect>\n                                            )}\n                                        </Field>\n                                    </CFormGroup>\n                                    <ErrorMessage\n                                        name=\"dietaryCategoryID\"\n                                        render={(msg) => <div\n                                            className={'formik-error-message'}>{msg}</div>}\n                                    />\n                                </CCol>\n\n                                <CCol sm=\"12\" md=\"6\" lg=\"3\">\n\n                                    <CFormGroup>\n                                        <CLabel htmlFor=\"status\" className={'required'}>Status</CLabel>\n\n                                        <Field name=\"status\"\n                                               className={getInputFieldClassNames(touched.status, errors.status)}\n                                        >\n                                            {({\n                                                  field, // { name, value, onChange, onBlur }\n                                                  form: {touched, errors}, // also values, setXXXX, handleXXXX, dirty, isValid, status, etc.\n                                                  meta,\n                                              }) => (\n\n                                                <CSelect custom name=\"status\" {...field}>\n                                                    {\n                                                        getCommonStatusOptions(false).map((item) => {\n                                                            return (\n                                                                <option key={item.key}\n                                                                        value={item.key}>{item.value}</option>\n                                                            );\n                                                        })\n                                                    }\n                                                </CSelect>\n                                            )}\n                                        </Field>\n                                    </CFormGroup>\n                                    <ErrorMessage\n                                        name=\"status\"\n                                        render={(msg) => <div\n                                            className={'formik-error-message'}>{msg}</div>}\n                                    />\n                                </CCol>\n\n                            </CRow>\n                        </Form>\n                    );\n                }}\n            </Formik>\n        </>\n    );\n};\n\nexport default DietaryHabitAddEditFrom;"]},"metadata":{},"sourceType":"module"}