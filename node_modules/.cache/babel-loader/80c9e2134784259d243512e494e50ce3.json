{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chamald\\\\Desktop\\\\Chamal\\\\react\\\\react-app\\\\src\\\\app\\\\views\\\\admin\\\\patient\\\\newPatient\\\\stepper\\\\stepComponents\\\\medicalTests\\\\components\\\\MedicalTestRecordNew.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { getCommonStringForGrid } from \"../../../../../../../../../utils/GridUtil\";\nimport { CFormGroup, CRow, CCol, CInput } from \"@coreui/react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as Actions from '../store/actions/patient.add.medical.test.results.action';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MedicalTestRecordNew = _ref => {\n  _s();\n\n  let {\n    medicalTestRecord\n  } = _ref;\n  let dispatch = useDispatch();\n  const checkupData = useSelector(_ref2 => {\n    let {\n      checkup\n    } = _ref2;\n    return checkup.checkupAddEdit;\n  });\n  const patientMedicalTestsData = useSelector(_ref3 => {\n    let {\n      patientMedicalTest\n    } = _ref3;\n    return patientMedicalTest.patientMedicalTestAddEdit;\n  });\n  const [formValue, setFormValue] = useState({\n    value: '',\n    measureUnit: ''\n  });\n  const [isEdit, setIsEdit] = useState(false);\n  const [editedRow, setEditedRow] = useState(false);\n\n  const setValue = () => {\n    let value = '';\n    let measureUnit = medicalTestRecord.measurementUnits ? medicalTestRecord.measurementUnits[0] : '';\n    setFormValue({ ...formValue,\n      value: value,\n      measureUnit: measureUnit\n    });\n  };\n\n  useEffect(() => {\n    setValue();\n  }, [checkupData.checkup.medicalTestResults]);\n  return /*#__PURE__*/_jsxDEV(CRow, {\n    children: [/*#__PURE__*/_jsxDEV(CCol, {\n      sm: \"12\",\n      md: \"6\",\n      lg: \"5\",\n      children: /*#__PURE__*/_jsxDEV(\"h6\", {\n        style: {\n          textAlign: 'right',\n          paddingTop: '10px'\n        },\n        children: medicalTestRecord.measurementName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CCol, {\n      sm: \"12\",\n      md: \"6\",\n      lg: \"3\",\n      children: /*#__PURE__*/_jsxDEV(CFormGroup, {\n        children: /*#__PURE__*/_jsxDEV(CInput, {\n          type: \"text\",\n          name: 'value',\n          placeholder: 'Value',\n          value: formValue.value ? formValue.value : ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CCol, {\n      sm: \"12\",\n      md: \"6\",\n      lg: \"3\",\n      children: /*#__PURE__*/_jsxDEV(CFormGroup, {\n        children: /*#__PURE__*/_jsxDEV(CSelect, {\n          custom: true,\n          name: \"status\",\n          style: {\n            height: '35px'\n          },\n          onChange: e => console.log(e.target.value),\n          children: record.measurementUnits.map(item => {\n            return /*#__PURE__*/_jsxDEV(\"option\", {\n              value: item,\n              children: item\n            }, item, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 33\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)]\n  }, index, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MedicalTestRecordNew, \"R0ECq6EWKTF2ZRQdocPA2e32wz8=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = MedicalTestRecordNew;\nexport default MedicalTestRecordNew;\n\nvar _c;\n\n$RefreshReg$(_c, \"MedicalTestRecordNew\");","map":{"version":3,"sources":["C:/Users/chamald/Desktop/Chamal/react/react-app/src/app/views/admin/patient/newPatient/stepper/stepComponents/medicalTests/components/MedicalTestRecordNew.js"],"names":["React","useEffect","useState","getCommonStringForGrid","CFormGroup","CRow","CCol","CInput","useDispatch","useSelector","Actions","MedicalTestRecordNew","medicalTestRecord","dispatch","checkupData","checkup","checkupAddEdit","patientMedicalTestsData","patientMedicalTest","patientMedicalTestAddEdit","formValue","setFormValue","value","measureUnit","isEdit","setIsEdit","editedRow","setEditedRow","setValue","measurementUnits","medicalTestResults","textAlign","paddingTop","measurementName","height","e","console","log","target","record","map","item","index"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {getCommonStringForGrid} from \"../../../../../../../../../utils/GridUtil\";\nimport {CFormGroup,CRow ,CCol , CInput} from \"@coreui/react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport * as Actions from '../store/actions/patient.add.medical.test.results.action'\n\n\nconst MedicalTestRecordNew = ({medicalTestRecord}) => {\n\n    let dispatch = useDispatch();\n    const checkupData = useSelector(({checkup}) => checkup.checkupAddEdit);\n    const patientMedicalTestsData = useSelector(({patientMedicalTest}) => patientMedicalTest.patientMedicalTestAddEdit);\n    const [formValue, setFormValue] = useState({value: '', measureUnit: ''});\n    const [isEdit, setIsEdit] = useState(false);\n    const [editedRow, setEditedRow] = useState(false);\n\n   \n\n    const setValue = () => {\n        let value = '';\n        let measureUnit = medicalTestRecord.measurementUnits ? medicalTestRecord.measurementUnits[0]:'';\n        setFormValue({...formValue, value: value, measureUnit: measureUnit});\n    };\n\n    useEffect(() => {\n        \n        setValue();\n    }, [checkupData.checkup.medicalTestResults]);\n\n    return (\n        <CRow key={index} >\n            <CCol sm=\"12\" md=\"6\" lg=\"5\" >\n                <h6 style={{textAlign: 'right',paddingTop:'10px'}}>{medicalTestRecord.measurementName}</h6> \n            </CCol>\n            <CCol sm=\"12\" md=\"6\" lg=\"3\" >\n                <CFormGroup>\n                    <CInput\n                        type=\"text\"\n                        name={'value'}\n                        placeholder={'Value'}\n                        value={formValue.value ? formValue.value : ''}\n                    />\n                </CFormGroup>\n            </CCol>\n            <CCol sm=\"12\" md=\"6\" lg=\"3\" >\n                <CFormGroup>\n                    <CSelect custom name=\"status\" style={{height:'35px'}} onChange={(e)=>console.log(e.target.value)} >\n                        {\n                            record.measurementUnits.map((item) => {\n                                return (\n                                <option key={item} value={item}>{item}</option>\n                                );\n                            })\n                        }\n                    </CSelect>\n                </CFormGroup> \n            </CCol>\n        </CRow>\n    );\n};\n\nexport default MedicalTestRecordNew;"]},"metadata":{},"sourceType":"module"}