{"ast":null,"code":"import dataService from \"../../../../../../../../../services/dataService\";\nimport checkupAppEndpoints from \"./checkup.app.endpoints\";\nexport const ON_SAVE_UPDATE = '[CHECKUP ADD EDIT] ON_SAVE_UPDATE';\nexport const ON_ADD_EDIT_FORM_CHANGE = '[CHECKUP ADD EDIT] ON_ADD_EDIT_FORM_CHANGE';\nexport const ON_RESET = '[CHECKUP ADD EDIT] ON_RESET';\nexport const GET_CHECKUP = '[CHECKUP ADD EDIT] GET_CHECKUP';\nexport const ON_RESET_CHECKUP_DATA = '[CHECKUP ADD EDIT] ON_RESET_CHECKUP_DATA';\nexport function saveOrUpdateCheckup(data) {\n  const request = dataService.post(checkupAppEndpoints.saveOrUpdateCheckup, data);\n  return (dispatch, getState) => {\n    return request.then(response => {\n      return dispatch({\n        type: ON_SAVE_UPDATE,\n        payload: response.data.result\n      });\n    });\n  };\n}\nexport function onFormChange(data) {\n  return (dispatch, getState) => {\n    dispatch({\n      type: ON_ADD_EDIT_FORM_CHANGE,\n      payload: data\n    });\n  };\n}\nexport function onSetCheckup(data) {\n  return (dispatch, getState) => {\n    return dispatch({\n      type: GET_CHECKUP,\n      payload: data\n    });\n  };\n}\nexport function getCheckupDTOByID(checkupID) {\n  let endpoint = Object.assign({}, checkupAppEndpoints.getCheckupDTOByID);\n  endpoint.url = endpoint.url + '/' + checkupID;\n  const request = dataService.get(endpoint);\n  return (dispatch, getState) => {\n    request.then(response => dispatch({\n      type: GET_CHECKUP,\n      payload: response.data.result\n    }));\n  };\n}\nexport function reset() {\n  return (dispatch, getState) => {\n    dispatch({\n      type: ON_RESET,\n      payload: {}\n    });\n  };\n}\nexport function resetCheckupData() {\n  return (dispatch, getState) => {\n    dispatch({\n      type: ON_RESET_CHECKUP_DATA,\n      payload: {}\n    });\n  };\n}","map":{"version":3,"sources":["C:/Users/chamald/Desktop/Chamal/react/react-app/src/app/views/admin/patient/newPatient/stepper/stepComponents/createCheckUp/store/action/checkup.app.add.edit.action.js"],"names":["dataService","checkupAppEndpoints","ON_SAVE_UPDATE","ON_ADD_EDIT_FORM_CHANGE","ON_RESET","GET_CHECKUP","ON_RESET_CHECKUP_DATA","saveOrUpdateCheckup","data","request","post","dispatch","getState","then","response","type","payload","result","onFormChange","onSetCheckup","getCheckupDTOByID","checkupID","endpoint","Object","assign","url","get","reset","resetCheckupData"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,iDAAxB;AACA,OAAOC,mBAAP,MAAgC,yBAAhC;AAEA,OAAO,MAAMC,cAAc,GAAG,mCAAvB;AACP,OAAO,MAAMC,uBAAuB,GAAG,4CAAhC;AACP,OAAO,MAAMC,QAAQ,GAAG,6BAAjB;AACP,OAAO,MAAMC,WAAW,GAAG,gCAApB;AACP,OAAO,MAAMC,qBAAqB,GAAG,0CAA9B;AAEP,OAAO,SAASC,mBAAT,CAA6BC,IAA7B,EAAmC;AACtC,QAAMC,OAAO,GAAGT,WAAW,CAACU,IAAZ,CAAiBT,mBAAmB,CAACM,mBAArC,EAA0DC,IAA1D,CAAhB;AAEA,SAAO,CAACG,QAAD,EAAWC,QAAX,KAAwB;AAC3B,WAAOH,OAAO,CAACI,IAAR,CAAcC,QAAD,IAAc;AAC1B,aAAOH,QAAQ,CAAC;AACZI,QAAAA,IAAI,EAAEb,cADM;AAEZc,QAAAA,OAAO,EAAEF,QAAQ,CAACN,IAAT,CAAcS;AAFX,OAAD,CAAf;AAIH,KALE,CAAP;AAOH,GARD;AASH;AAED,OAAO,SAASC,YAAT,CAAsBV,IAAtB,EAA4B;AAC/B,SAAO,CAACG,QAAD,EAAWC,QAAX,KAAwB;AAC3BD,IAAAA,QAAQ,CAAC;AACLI,MAAAA,IAAI,EAAEZ,uBADD;AAELa,MAAAA,OAAO,EAAER;AAFJ,KAAD,CAAR;AAIH,GALD;AAMH;AAED,OAAO,SAASW,YAAT,CAAsBX,IAAtB,EAA4B;AAC/B,SAAO,CAACG,QAAD,EAAWC,QAAX,KAAwB;AAC3B,WAAOD,QAAQ,CAAC;AACZI,MAAAA,IAAI,EAAEV,WADM;AAEZW,MAAAA,OAAO,EAAER;AAFG,KAAD,CAAf;AAIH,GALD;AAMH;AAED,OAAO,SAASY,iBAAT,CAA2BC,SAA3B,EAAsC;AAEzC,MAAIC,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBvB,mBAAmB,CAACmB,iBAAtC,CAAf;AACAE,EAAAA,QAAQ,CAACG,GAAT,GAAeH,QAAQ,CAACG,GAAT,GAAe,GAAf,GAAqBJ,SAApC;AAEA,QAAMZ,OAAO,GAAGT,WAAW,CAAC0B,GAAZ,CAAgBJ,QAAhB,CAAhB;AAEA,SAAO,CAACX,QAAD,EAAWC,QAAX,KAAwB;AAC3BH,IAAAA,OAAO,CAACI,IAAR,CAAcC,QAAD,IACTH,QAAQ,CAAC;AACLI,MAAAA,IAAI,EAAEV,WADD;AAELW,MAAAA,OAAO,EAAEF,QAAQ,CAACN,IAAT,CAAcS;AAFlB,KAAD,CADZ;AAMH,GAPD;AAQH;AAED,OAAO,SAASU,KAAT,GAAiB;AACpB,SAAO,CAAChB,QAAD,EAAWC,QAAX,KAAwB;AAC3BD,IAAAA,QAAQ,CAAC;AACLI,MAAAA,IAAI,EAAEX,QADD;AAELY,MAAAA,OAAO,EAAE;AAFJ,KAAD,CAAR;AAIH,GALD;AAMH;AAED,OAAO,SAASY,gBAAT,GAA4B;AAC/B,SAAO,CAACjB,QAAD,EAAWC,QAAX,KAAwB;AAC3BD,IAAAA,QAAQ,CAAC;AACLI,MAAAA,IAAI,EAAET,qBADD;AAELU,MAAAA,OAAO,EAAE;AAFJ,KAAD,CAAR;AAIH,GALD;AAMH","sourcesContent":["import dataService from \"../../../../../../../../../services/dataService\";\nimport checkupAppEndpoints from \"./checkup.app.endpoints\";\n\nexport const ON_SAVE_UPDATE = '[CHECKUP ADD EDIT] ON_SAVE_UPDATE';\nexport const ON_ADD_EDIT_FORM_CHANGE = '[CHECKUP ADD EDIT] ON_ADD_EDIT_FORM_CHANGE';\nexport const ON_RESET = '[CHECKUP ADD EDIT] ON_RESET';\nexport const GET_CHECKUP = '[CHECKUP ADD EDIT] GET_CHECKUP';\nexport const ON_RESET_CHECKUP_DATA = '[CHECKUP ADD EDIT] ON_RESET_CHECKUP_DATA';\n\nexport function saveOrUpdateCheckup(data) {\n    const request = dataService.post(checkupAppEndpoints.saveOrUpdateCheckup, data);\n\n    return (dispatch, getState) => {\n        return request.then((response) => {\n                return dispatch({\n                    type: ON_SAVE_UPDATE,\n                    payload: response.data.result\n                });\n            }\n        );\n    };\n}\n\nexport function onFormChange(data) {\n    return (dispatch, getState) => {\n        dispatch({\n            type: ON_ADD_EDIT_FORM_CHANGE,\n            payload: data\n        })\n    };\n}\n\nexport function onSetCheckup(data) {\n    return (dispatch, getState) => {\n        return dispatch({\n            type: GET_CHECKUP,\n            payload: data\n        })\n    };\n}\n\nexport function getCheckupDTOByID(checkupID) {\n\n    let endpoint = Object.assign({}, checkupAppEndpoints.getCheckupDTOByID);\n    endpoint.url = endpoint.url + '/' + checkupID;\n\n    const request = dataService.get(endpoint);\n\n    return (dispatch, getState) => {\n        request.then((response) =>\n            dispatch({\n                type: GET_CHECKUP,\n                payload: response.data.result\n            })\n        );\n    };\n}\n\nexport function reset() {\n    return (dispatch, getState) => {\n        dispatch({\n            type: ON_RESET,\n            payload: {}\n        })\n    };\n}\n\nexport function resetCheckupData() {\n    return (dispatch, getState) => {\n        dispatch({\n            type: ON_RESET_CHECKUP_DATA,\n            payload: {}\n        })\n    };\n}\n"]},"metadata":{},"sourceType":"module"}