{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chamald\\\\Desktop\\\\Chamal\\\\react\\\\react-app\\\\src\\\\app\\\\views\\\\admin\\\\config\\\\role\\\\add-edit\\\\components\\\\privileges\\\\PrivilegeBase.js\";\nimport React, { Component } from \"react\";\nimport * as _ from 'lodash';\nimport PrivilegeCategory from \"./components/PrivilegeCategory\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass PrivilegeBase extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      checkedPrivilegeIDs: []\n    };\n\n    this.init = () => {\n      const {\n        role\n      } = this.props;\n      let privileges = role.privileges ? role.privileges : [];\n      this.updateSelectedPrivileges(privileges);\n    };\n\n    this.getInitData = () => {\n      const {\n        allPrivileges\n      } = this.props;\n\n      let categories = _.keys(allPrivileges).sort();\n\n      let categoryWiseSortedPrivileges = {};\n      categories.forEach(category => {\n        let categoryPrivileges = allPrivileges[category];\n        categoryPrivileges = _.sortBy(categoryPrivileges, privilege => privilege.privilegeName);\n        categoryWiseSortedPrivileges[category] = categoryPrivileges;\n      });\n      return {\n        categories,\n        categoryWiseSortedPrivileges\n      };\n    };\n\n    this.onCheckChange = privilegeID => {\n      const {\n        checkedPrivilegeIDs\n      } = this.state;\n      let privileges = [];\n\n      if (_.indexOf(checkedPrivilegeIDs, privilegeID) !== -1) {\n        privileges = _.without(checkedPrivilegeIDs, privilegeID);\n      } else {\n        privileges = [...checkedPrivilegeIDs, privilegeID];\n      }\n\n      this.updateSelectedPrivileges(privileges);\n    };\n\n    this.onSelectPrivileges = (privilegeIDs, isSelect) => {\n      const {\n        checkedPrivilegeIDs\n      } = this.state;\n      let final = [];\n\n      if (isSelect) {\n        final = _.uniq([...checkedPrivilegeIDs, ...privilegeIDs]);\n      } else {\n        final = _.difference([...checkedPrivilegeIDs], privilegeIDs);\n      }\n\n      this.updateSelectedPrivileges(final);\n    };\n\n    this.updateSelectedPrivileges = privileges => {\n      const {\n        onPrivilegeChange\n      } = this.props;\n      this.setState({\n        checkedPrivilegeIDs: privileges\n      }, () => {\n        onPrivilegeChange(privileges);\n      });\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (this.props.role != prevProps.role) {\n      this.init();\n    }\n  }\n\n  render() {\n    const {\n      categories,\n      categoryWiseSortedPrivileges\n    } = this.getInitData();\n    const {\n      checkedPrivilegeIDs\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Privileges\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), categories.map(categoryName => {\n        return /*#__PURE__*/_jsxDEV(PrivilegeCategory, {\n          category: categoryName,\n          privileges: categoryWiseSortedPrivileges[categoryName],\n          checkedPrivilegeIDs: checkedPrivilegeIDs,\n          onCheckChange: this.onCheckChange,\n          onSelectPrivileges: this.onSelectPrivileges\n        }, categoryName, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 32\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default PrivilegeBase;","map":{"version":3,"sources":["C:/Users/chamald/Desktop/Chamal/react/react-app/src/app/views/admin/config/role/add-edit/components/privileges/PrivilegeBase.js"],"names":["React","Component","_","PrivilegeCategory","PrivilegeBase","state","checkedPrivilegeIDs","init","role","props","privileges","updateSelectedPrivileges","getInitData","allPrivileges","categories","keys","sort","categoryWiseSortedPrivileges","forEach","category","categoryPrivileges","sortBy","privilege","privilegeName","onCheckChange","privilegeID","indexOf","without","onSelectPrivileges","privilegeIDs","isSelect","final","uniq","difference","onPrivilegeChange","setState","componentDidUpdate","prevProps","prevState","snapshot","render","map","categoryName"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport * as _ from 'lodash';\nimport PrivilegeCategory from \"./components/PrivilegeCategory\";\n\nclass PrivilegeBase extends Component {\n\n    state = {\n        checkedPrivilegeIDs: []\n    };\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (this.props.role != prevProps.role) {\n            this.init();\n        }\n    }\n\n    init = () => {\n        const {role} = this.props;\n        let privileges = role.privileges ? role.privileges : [];\n        this.updateSelectedPrivileges(privileges);\n    };\n\n    getInitData = () => {\n        const {allPrivileges} = this.props;\n\n        let categories = _.keys(allPrivileges).sort();\n        let categoryWiseSortedPrivileges = {};\n\n        categories.forEach((category) => {\n            let categoryPrivileges = allPrivileges[category];\n            categoryPrivileges = _.sortBy(categoryPrivileges, (privilege) => privilege.privilegeName);\n\n            categoryWiseSortedPrivileges[category] = categoryPrivileges;\n        });\n\n        return {\n            categories,\n            categoryWiseSortedPrivileges\n        };\n    };\n\n    onCheckChange = (privilegeID) => {\n        const {checkedPrivilegeIDs} = this.state;\n        let privileges = [];\n        if (_.indexOf(checkedPrivilegeIDs, privilegeID) !== -1) {\n            privileges = _.without(checkedPrivilegeIDs, privilegeID);\n        } else {\n            privileges = [...checkedPrivilegeIDs, privilegeID];\n        }\n\n        this.updateSelectedPrivileges(privileges);\n    };\n\n    onSelectPrivileges = (privilegeIDs, isSelect) => {\n        const {checkedPrivilegeIDs} = this.state;\n        let final = [];\n        if (isSelect) {\n            final = _.uniq([...checkedPrivilegeIDs, ...privilegeIDs]);\n        } else {\n            final = _.difference([...checkedPrivilegeIDs], privilegeIDs);\n        }\n\n        this.updateSelectedPrivileges(final);\n    };\n\n    updateSelectedPrivileges = (privileges) => {\n        const {onPrivilegeChange} = this.props;\n        this.setState({\n            checkedPrivilegeIDs: privileges\n        }, () => {\n            onPrivilegeChange(privileges);\n        });\n    };\n\n    render() {\n        const {categories, categoryWiseSortedPrivileges} = this.getInitData();\n        const {checkedPrivilegeIDs} = this.state;\n\n        return (\n            <div>\n                <h5>Privileges</h5>\n\n                {\n                    categories.map((categoryName) => {\n                        return <PrivilegeCategory\n                            key={categoryName}\n                            category={categoryName}\n                            privileges={categoryWiseSortedPrivileges[categoryName]}\n                            checkedPrivilegeIDs={checkedPrivilegeIDs}\n                            onCheckChange={this.onCheckChange}\n                            onSelectPrivileges={this.onSelectPrivileges}\n                        />\n                    })\n                }\n            </div>\n        );\n    }\n}\n\nexport default PrivilegeBase;\n"]},"metadata":{},"sourceType":"module"}