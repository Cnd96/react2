{"ast":null,"code":"import CryptoJS from \"crypto-js\";\nimport JSEncrypt from \"jsencrypt\";\nimport Constants from \"./Constants\";\nexport function generatePassword() {\n  let length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 8;\n  let charset = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\",\n      retVal = \"\";\n\n  for (let i = 0, n = charset.length; i < length; ++i) {\n    retVal += charset.charAt(Math.floor(Math.random() * n));\n  }\n\n  return retVal;\n}\nexport function getEncryptedPassword(password) {\n  password = CryptoJS.SHA1(password);\n  password = CryptoJS.enc.Base64.stringify(password);\n  let crypt = new JSEncrypt();\n  crypt.setPublicKey(Constants.PUBLIC_KEY);\n  password = crypt.encrypt(password);\n  return password;\n}\nexport function getResetPassword(password) {\n  password = CryptoJS.SHA1(password);\n  return CryptoJS.enc.Base64.stringify(password);\n}","map":{"version":3,"sources":["C:/Users/chamald/Desktop/Chamal/react/react-app/src/utils/PasswordHelper.js"],"names":["CryptoJS","JSEncrypt","Constants","generatePassword","length","charset","retVal","i","n","charAt","Math","floor","random","getEncryptedPassword","password","SHA1","enc","Base64","stringify","crypt","setPublicKey","PUBLIC_KEY","encrypt","getResetPassword"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,OAAO,SAASC,gBAAT,GAAsC;AAAA,MAAZC,MAAY,uEAAH,CAAG;AACzC,MAAIC,OAAO,GAAG,gEAAd;AAAA,MACIC,MAAM,GAAG,EADb;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGH,OAAO,CAACD,MAA5B,EAAoCG,CAAC,GAAGH,MAAxC,EAAgD,EAAEG,CAAlD,EAAqD;AACjDD,IAAAA,MAAM,IAAID,OAAO,CAACI,MAAR,CAAeC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBJ,CAA3B,CAAf,CAAV;AACH;;AACD,SAAOF,MAAP;AACH;AAED,OAAO,SAASO,oBAAT,CAA8BC,QAA9B,EAAwC;AAC3CA,EAAAA,QAAQ,GAAGd,QAAQ,CAACe,IAAT,CAAcD,QAAd,CAAX;AACAA,EAAAA,QAAQ,GAAGd,QAAQ,CAACgB,GAAT,CAAaC,MAAb,CAAoBC,SAApB,CAA8BJ,QAA9B,CAAX;AAEA,MAAIK,KAAK,GAAG,IAAIlB,SAAJ,EAAZ;AACAkB,EAAAA,KAAK,CAACC,YAAN,CAAmBlB,SAAS,CAACmB,UAA7B;AACAP,EAAAA,QAAQ,GAAGK,KAAK,CAACG,OAAN,CAAcR,QAAd,CAAX;AACA,SAAOA,QAAP;AACH;AAED,OAAO,SAASS,gBAAT,CAA0BT,QAA1B,EAAoC;AACvCA,EAAAA,QAAQ,GAAGd,QAAQ,CAACe,IAAT,CAAcD,QAAd,CAAX;AACA,SAAOd,QAAQ,CAACgB,GAAT,CAAaC,MAAb,CAAoBC,SAApB,CAA8BJ,QAA9B,CAAP;AACH","sourcesContent":["import CryptoJS from \"crypto-js\";\nimport JSEncrypt from \"jsencrypt\";\nimport Constants from \"./Constants\";\n\nexport function generatePassword(length = 8) {\n    let charset = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\",\n        retVal = \"\";\n    for (let i = 0, n = charset.length; i < length; ++i) {\n        retVal += charset.charAt(Math.floor(Math.random() * n));\n    }\n    return retVal;\n}\n\nexport function getEncryptedPassword(password) {\n    password = CryptoJS.SHA1(password);\n    password = CryptoJS.enc.Base64.stringify(password);\n\n    let crypt = new JSEncrypt();\n    crypt.setPublicKey(Constants.PUBLIC_KEY);\n    password = crypt.encrypt(password);\n    return password;\n}\n\nexport function getResetPassword(password) {\n    password = CryptoJS.SHA1(password);\n    return CryptoJS.enc.Base64.stringify(password);\n}\n"]},"metadata":{},"sourceType":"module"}