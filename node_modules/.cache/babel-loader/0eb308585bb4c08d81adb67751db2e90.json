{"ast":null,"code":"import dataService from \"../../../../../../services/dataService\";\nimport fitToWorkAppEndpoints from \"./fit.to.work.app.endpoints\";\nexport const SET_PAGE_INFO = '[FIT TO WORK SEARCH] SET_PAGE_INFO';\nexport const SET_SEARCH_DATA = '[FIT TO WORK SEARCH] SET_SEARCH_DATA';\nexport const GET_PAGED_FIT_TO_WORKS = '[FIT TO WORK SEARCH] GET_PAGED_FIT_TO_WORKS';\nexport const GET_FIT_TO_WORK_LIST = '[FIT TO WORK SEARCH] GET_FIT_TO_WORK_LIST';\nexport const ON_RESET_SEARCH_DATA = '[FIT TO WORK SEARCH] ON_RESET_SEARCH_DATA';\nexport const ON_REORDER_FIT_TO_WORK = '[FIT TO WORK ADD EDIT] ON_REORDER_FIT_TO_WORK';\nexport function getPagedFitToWorks(searchRQ) {\n  const request = dataService.post(fitToWorkAppEndpoints.getPagedFitToWorks, searchRQ);\n  return (dispatch, getState) => {\n    request.then(response => dispatch({\n      type: GET_PAGED_FIT_TO_WORKS,\n      payload: response.data.result\n    }));\n  };\n}\nexport function getFitToWorkList(searchRQ) {\n  const request = dataService.post(fitToWorkAppEndpoints.getFitToWorkList, searchRQ);\n  return (dispatch, getState) => {\n    request.then(response => dispatch({\n      type: GET_FIT_TO_WORK_LIST,\n      payload: response.data.result\n    }));\n  };\n}\nexport function setPageInfo(pageInfo) {\n  return (dispatch, getState) => {\n    dispatch({\n      type: SET_PAGE_INFO,\n      payload: pageInfo\n    });\n  };\n}\nexport function setSearchData(data) {\n  return (dispatch, getState) => {\n    dispatch({\n      type: SET_SEARCH_DATA,\n      payload: data\n    });\n  };\n}\nexport function onResetSearchData() {\n  return (dispatch, getState) => {\n    dispatch({\n      type: ON_RESET_SEARCH_DATA\n    });\n  };\n} // export function updateFitToWorkOrder(data) {\n//     const request = dataService.post(fitToWorkAppEndpoints.updateFitToWorkOrder, data);\n//\n//     return (dispatch, getState) => {\n//         request.then((response) =>\n//             dispatch({\n//                 type: GET_FIT_TO_WORK_LIST,\n//                 payload: response.data.result\n//             })\n//         );\n//     }\n// }","map":{"version":3,"sources":["C:/Users/chamald/Desktop/Chamal/react/react-app/src/app/views/admin/config/fitToWork/store/actions/fit.to.work.search.action.js"],"names":["dataService","fitToWorkAppEndpoints","SET_PAGE_INFO","SET_SEARCH_DATA","GET_PAGED_FIT_TO_WORKS","GET_FIT_TO_WORK_LIST","ON_RESET_SEARCH_DATA","ON_REORDER_FIT_TO_WORK","getPagedFitToWorks","searchRQ","request","post","dispatch","getState","then","response","type","payload","data","result","getFitToWorkList","setPageInfo","pageInfo","setSearchData","onResetSearchData"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,wCAAxB;AACA,OAAOC,qBAAP,MAAkC,6BAAlC;AAEA,OAAO,MAAMC,aAAa,GAAG,oCAAtB;AACP,OAAO,MAAMC,eAAe,GAAG,sCAAxB;AACP,OAAO,MAAMC,sBAAsB,GAAG,6CAA/B;AACP,OAAO,MAAMC,oBAAoB,GAAG,2CAA7B;AACP,OAAO,MAAMC,oBAAoB,GAAG,2CAA7B;AACP,OAAO,MAAMC,sBAAsB,GAAG,+CAA/B;AAEP,OAAO,SAASC,kBAAT,CAA4BC,QAA5B,EAAsC;AACzC,QAAMC,OAAO,GAAGV,WAAW,CAACW,IAAZ,CAAiBV,qBAAqB,CAACO,kBAAvC,EAA2DC,QAA3D,CAAhB;AAEA,SAAO,CAACG,QAAD,EAAWC,QAAX,KAAwB;AAC3BH,IAAAA,OAAO,CAACI,IAAR,CAAcC,QAAD,IACTH,QAAQ,CAAC;AACLI,MAAAA,IAAI,EAAEZ,sBADD;AAELa,MAAAA,OAAO,EAAEF,QAAQ,CAACG,IAAT,CAAcC;AAFlB,KAAD,CADZ;AAMH,GAPD;AAQH;AAED,OAAO,SAASC,gBAAT,CAA0BX,QAA1B,EAAoC;AACvC,QAAMC,OAAO,GAAGV,WAAW,CAACW,IAAZ,CAAiBV,qBAAqB,CAACmB,gBAAvC,EAAyDX,QAAzD,CAAhB;AAEA,SAAO,CAACG,QAAD,EAAWC,QAAX,KAAwB;AAC3BH,IAAAA,OAAO,CAACI,IAAR,CAAcC,QAAD,IACTH,QAAQ,CAAC;AACLI,MAAAA,IAAI,EAAEX,oBADD;AAELY,MAAAA,OAAO,EAAEF,QAAQ,CAACG,IAAT,CAAcC;AAFlB,KAAD,CADZ;AAMH,GAPD;AAQH;AAED,OAAO,SAASE,WAAT,CAAqBC,QAArB,EAA+B;AAClC,SAAO,CAACV,QAAD,EAAWC,QAAX,KAAwB;AAC3BD,IAAAA,QAAQ,CAAC;AACLI,MAAAA,IAAI,EAAEd,aADD;AAELe,MAAAA,OAAO,EAAEK;AAFJ,KAAD,CAAR;AAIH,GALD;AAMH;AAED,OAAO,SAASC,aAAT,CAAuBL,IAAvB,EAA6B;AAChC,SAAO,CAACN,QAAD,EAAWC,QAAX,KAAwB;AAC3BD,IAAAA,QAAQ,CAAC;AACLI,MAAAA,IAAI,EAAEb,eADD;AAELc,MAAAA,OAAO,EAAEC;AAFJ,KAAD,CAAR;AAIH,GALD;AAMH;AAED,OAAO,SAASM,iBAAT,GAA6B;AAEhC,SAAO,CAACZ,QAAD,EAAWC,QAAX,KAAwB;AAC3BD,IAAAA,QAAQ,CAAC;AACLI,MAAAA,IAAI,EAAEV;AADD,KAAD,CAAR;AAGH,GAJD;AAKH,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import dataService from \"../../../../../../services/dataService\";\nimport fitToWorkAppEndpoints from \"./fit.to.work.app.endpoints\";\n\nexport const SET_PAGE_INFO = '[FIT TO WORK SEARCH] SET_PAGE_INFO';\nexport const SET_SEARCH_DATA = '[FIT TO WORK SEARCH] SET_SEARCH_DATA';\nexport const GET_PAGED_FIT_TO_WORKS = '[FIT TO WORK SEARCH] GET_PAGED_FIT_TO_WORKS';\nexport const GET_FIT_TO_WORK_LIST = '[FIT TO WORK SEARCH] GET_FIT_TO_WORK_LIST';\nexport const ON_RESET_SEARCH_DATA = '[FIT TO WORK SEARCH] ON_RESET_SEARCH_DATA';\nexport const ON_REORDER_FIT_TO_WORK = '[FIT TO WORK ADD EDIT] ON_REORDER_FIT_TO_WORK';\n\nexport function getPagedFitToWorks(searchRQ) {\n    const request = dataService.post(fitToWorkAppEndpoints.getPagedFitToWorks, searchRQ);\n\n    return (dispatch, getState) => {\n        request.then((response) =>\n            dispatch({\n                type: GET_PAGED_FIT_TO_WORKS,\n                payload: response.data.result\n            })\n        );\n    }\n}\n\nexport function getFitToWorkList(searchRQ) {\n    const request = dataService.post(fitToWorkAppEndpoints.getFitToWorkList, searchRQ);\n\n    return (dispatch, getState) => {\n        request.then((response) =>\n            dispatch({\n                type: GET_FIT_TO_WORK_LIST,\n                payload: response.data.result\n            })\n        );\n    }\n}\n\nexport function setPageInfo(pageInfo) {\n    return (dispatch, getState) => {\n        dispatch({\n            type: SET_PAGE_INFO,\n            payload: pageInfo\n        });\n    };\n}\n\nexport function setSearchData(data) {\n    return (dispatch, getState) => {\n        dispatch({\n            type: SET_SEARCH_DATA,\n            payload: data\n        });\n    };\n}\n\nexport function onResetSearchData() {\n\n    return (dispatch, getState) => {\n        dispatch({\n            type: ON_RESET_SEARCH_DATA,\n        })\n    }\n}\n\n// export function updateFitToWorkOrder(data) {\n//     const request = dataService.post(fitToWorkAppEndpoints.updateFitToWorkOrder, data);\n//\n//     return (dispatch, getState) => {\n//         request.then((response) =>\n//             dispatch({\n//                 type: GET_FIT_TO_WORK_LIST,\n//                 payload: response.data.result\n//             })\n//         );\n//     }\n// }\n"]},"metadata":{},"sourceType":"module"}