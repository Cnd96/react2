{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chamald\\\\Desktop\\\\Chamal\\\\react\\\\react-app\\\\src\\\\app\\\\master\\\\NotebookAuthorization.js\";\nimport React, { Component } from 'react';\nimport { matchRoutes } from 'react-router-config';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport AppContext from '../../app/AppContext';\nimport HealthTrackerUtils from \"../../utils/HealthTrackerUtils\";\nimport jwtService from \"../../app/services/auth/jwtService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass NotebookAuthorization extends Component {\n  constructor(props, context) {\n    super(props);\n    const {\n      routes\n    } = context;\n    this.state = {\n      accessGranted: true,\n      routes\n    };\n  }\n\n  componentDidMount() {\n    if (!this.state.accessGranted) {\n      this.redirectRoute();\n    }\n  }\n\n  componentDidUpdate() {\n    if (!this.state.accessGranted) {\n      this.redirectRoute();\n    }\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    const {\n      location,\n      user\n    } = props;\n    const {\n      pathname\n    } = location;\n    const privileges = user ? user.user.privileges : [];\n    const matched = matchRoutes(state.routes, pathname)[0];\n    let accessGranted = matched ? matched.route.privileges ? HealthTrackerUtils.hasAnyPrivilege(matched.route.privileges, privileges) : true : true;\n    let isAuthenticated = true;\n\n    if (matched) {\n      if (matched.route.isRestrictedRoute) {\n        isAuthenticated = jwtService.isUserLoggedIn();\n      }\n    }\n\n    return {\n      accessGranted: accessGranted && isAuthenticated\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return nextState.accessGranted !== this.state.accessGranted;\n  }\n\n  redirectRoute() {\n    const {\n      location,\n      user,\n      history\n    } = this.props;\n    const {\n      pathname,\n      state\n    } = location;\n    const redirectUrl = state && state.redirectUrl ? state.redirectUrl : '/';\n    history.push({\n      pathname: '/login',\n      state: {\n        redirectUrl: pathname\n      }\n    });\n  }\n\n  render() {\n    return this.state.accessGranted ? /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: this.props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 43\n    }, this) : null;\n  }\n\n}\n\nfunction mapStateToProps(_ref) {\n  let {\n    notebook\n  } = _ref;\n  return {\n    user: notebook.login.user\n  };\n}\n\nNotebookAuthorization.contextType = AppContext;\nexport default withRouter(connect(mapStateToProps)(NotebookAuthorization));","map":{"version":3,"sources":["C:/Users/chamald/Desktop/Chamal/react/react-app/src/app/master/NotebookAuthorization.js"],"names":["React","Component","matchRoutes","withRouter","connect","AppContext","HealthTrackerUtils","jwtService","NotebookAuthorization","constructor","props","context","routes","state","accessGranted","componentDidMount","redirectRoute","componentDidUpdate","getDerivedStateFromProps","location","user","pathname","privileges","matched","route","hasAnyPrivilege","isAuthenticated","isRestrictedRoute","isUserLoggedIn","shouldComponentUpdate","nextProps","nextState","history","redirectUrl","push","render","children","mapStateToProps","notebook","login","contextType"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {matchRoutes} from 'react-router-config';\nimport {withRouter} from 'react-router-dom';\nimport {connect} from 'react-redux';\nimport AppContext from '../../app/AppContext';\nimport HealthTrackerUtils from \"../../utils/HealthTrackerUtils\";\nimport jwtService from \"../../app/services/auth/jwtService\";\n\nclass NotebookAuthorization extends Component {\n\n    constructor(props, context) {\n        super(props);\n        const {routes} = context;\n        this.state = {\n            accessGranted: true,\n            routes\n        };\n    }\n\n    componentDidMount() {\n        if (!this.state.accessGranted) {\n            this.redirectRoute();\n        }\n    }\n\n    componentDidUpdate() {\n        if (!this.state.accessGranted) {\n            this.redirectRoute();\n        }\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        const {location, user} = props;\n        const {pathname} = location;\n        const privileges = user ? user.user.privileges : [];\n\n        const matched = matchRoutes(state.routes, pathname)[0];\n        let accessGranted = matched ? (matched.route.privileges ? HealthTrackerUtils.hasAnyPrivilege(matched.route.privileges, privileges) : true) : true;\n\n        let isAuthenticated = true;\n        if (matched) {\n            if (matched.route.isRestrictedRoute) {\n                isAuthenticated = jwtService.isUserLoggedIn();\n            }\n        }\n\n        return {\n            accessGranted: accessGranted && isAuthenticated\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return nextState.accessGranted !== this.state.accessGranted;\n    }\n\n    redirectRoute() {\n        const {location, user, history} = this.props;\n        const {pathname, state} = location;\n        const redirectUrl = state && state.redirectUrl ? state.redirectUrl : '/';\n\n        history.push({\n            pathname: '/login',\n            state: {redirectUrl: pathname}\n        });\n    }\n\n    render() {\n        return this.state.accessGranted ? <React.Fragment>{this.props.children}</React.Fragment> : null;\n    }\n}\n\nfunction mapStateToProps({notebook}) {\n    return {\n        user: notebook.login.user\n    }\n}\n\nNotebookAuthorization.contextType = AppContext;\n\nexport default withRouter(connect(mapStateToProps)(NotebookAuthorization));\n"]},"metadata":{},"sourceType":"module"}