{"ast":null,"code":"import { GET_MEDICAL_TEST_TYPES, ON_ADD_CHECKUP_MEDICAL_TEST_RESULTS, ON_RESET, SET_MEDICAL_TEST_RESULTS } from \"../actions\";\nimport * as _ from \"lodash\";\nconst initialState = {\n  medicalTestTypes: [],\n  medicalTestResults: {},\n  checkup: {},\n  formData: {}\n};\n\nconst patientMedicalTestAddEditReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case GET_MEDICAL_TEST_TYPES:\n      {\n        return { ...state,\n          medicalTestTypes: action.payload\n        };\n      }\n\n    case SET_MEDICAL_TEST_RESULTS:\n      {\n        let obj = _.cloneDeep(state.formData);\n\n        let value = action.payload.value ? action.payload.value : '';\n        let measureUnit = action.payload.measureUnit ? action.payload.measureUnit : '';\n        let testRecord = {\n          value: value,\n          measureUnit: measureUnit\n        };\n        obj = Object.assign(obj, {\n          [action.payload.medicalTestRecordID]: testRecord\n        });\n        return { ...state,\n          formData: obj\n        };\n      }\n\n    case ON_RESET:\n      {\n        return { ...state,\n          ...initialState\n        };\n      }\n\n    case ON_ADD_CHECKUP_MEDICAL_TEST_RESULTS:\n      {\n        return { ...state,\n          checkup: action.payload\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default patientMedicalTestAddEditReducer;","map":{"version":3,"sources":["C:/Users/chamald/Desktop/Chamal/react/react-app/src/app/views/admin/patient/newPatient/stepper/stepComponents/medicalTests/store/reducers/patient.add.medical.test.results.reducer.js"],"names":["GET_MEDICAL_TEST_TYPES","ON_ADD_CHECKUP_MEDICAL_TEST_RESULTS","ON_RESET","SET_MEDICAL_TEST_RESULTS","_","initialState","medicalTestTypes","medicalTestResults","checkup","formData","patientMedicalTestAddEditReducer","state","action","type","payload","obj","cloneDeep","value","measureUnit","testRecord","Object","assign","medicalTestRecordID"],"mappings":"AAAA,SACIA,sBADJ,EAEIC,mCAFJ,EAGIC,QAHJ,EAIIC,wBAJJ,QAKO,YALP;AAMA,OAAO,KAAKC,CAAZ,MAAmB,QAAnB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,gBAAgB,EAAE,EADD;AAEjBC,EAAAA,kBAAkB,EAAE,EAFH;AAGjBC,EAAAA,OAAO,EAAE,EAHQ;AAIjBC,EAAAA,QAAQ,EAAE;AAJO,CAArB;;AAOA,MAAMC,gCAAgC,GAAG,YAAwC;AAAA,MAA9BC,KAA8B,uEAAtBN,YAAsB;AAAA,MAARO,MAAQ;;AAE7E,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKb,sBAAL;AAA8B;AAC1B,eAAO,EACH,GAAGW,KADA;AAEHL,UAAAA,gBAAgB,EAAEM,MAAM,CAACE;AAFtB,SAAP;AAIH;;AAED,SAAKX,wBAAL;AAAgC;AAC5B,YAAIY,GAAG,GAAGX,CAAC,CAACY,SAAF,CAAYL,KAAK,CAACF,QAAlB,CAAV;;AACA,YAAIQ,KAAK,GAAGL,MAAM,CAACE,OAAP,CAAeG,KAAf,GAAuBL,MAAM,CAACE,OAAP,CAAeG,KAAtC,GAA8C,EAA1D;AACA,YAAIC,WAAW,GAAGN,MAAM,CAACE,OAAP,CAAeI,WAAf,GAA6BN,MAAM,CAACE,OAAP,CAAeI,WAA5C,GAA0D,EAA5E;AACA,YAAIC,UAAU,GAAG;AAACF,UAAAA,KAAK,EAAEA,KAAR;AAAeC,UAAAA,WAAW,EAAEA;AAA5B,SAAjB;AACAH,QAAAA,GAAG,GAAGK,MAAM,CAACC,MAAP,CAAcN,GAAd,EAAmB;AAAC,WAACH,MAAM,CAACE,OAAP,CAAeQ,mBAAhB,GAAsCH;AAAvC,SAAnB,CAAN;AAEA,eAAO,EACH,GAAGR,KADA;AAEHF,UAAAA,QAAQ,EAAEM;AAFP,SAAP;AAIH;;AAED,SAAKb,QAAL;AAAgB;AACZ,eAAO,EACH,GAAGS,KADA;AAEH,aAAGN;AAFA,SAAP;AAIH;;AAED,SAAKJ,mCAAL;AAA2C;AACvC,eAAO,EACH,GAAGU,KADA;AAEHH,UAAAA,OAAO,EAAEI,MAAM,CAACE;AAFb,SAAP;AAIH;;AACD;AACI,aAAOH,KAAP;AAnCR;AAqCH,CAvCD;;AAyCA,eAAeD,gCAAf","sourcesContent":["import {\n    GET_MEDICAL_TEST_TYPES,\n    ON_ADD_CHECKUP_MEDICAL_TEST_RESULTS,\n    ON_RESET,\n    SET_MEDICAL_TEST_RESULTS\n} from \"../actions\";\nimport * as _ from \"lodash\";\n\nconst initialState = {\n    medicalTestTypes: [],\n    medicalTestResults: {},\n    checkup: {},\n    formData: {}\n};\n\nconst patientMedicalTestAddEditReducer = function (state = initialState, action) {\n\n    switch (action.type) {\n        case GET_MEDICAL_TEST_TYPES : {\n            return {\n                ...state,\n                medicalTestTypes: action.payload,\n            }\n        }\n\n        case SET_MEDICAL_TEST_RESULTS : {\n            let obj = _.cloneDeep(state.formData);\n            let value = action.payload.value ? action.payload.value : '';\n            let measureUnit = action.payload.measureUnit ? action.payload.measureUnit : '';\n            let testRecord = {value: value, measureUnit: measureUnit};\n            obj = Object.assign(obj, {[action.payload.medicalTestRecordID]: testRecord});\n\n            return {\n                ...state,\n                formData: obj\n            }\n        }\n\n        case ON_RESET : {\n            return {\n                ...state,\n                ...initialState\n            }\n        }\n\n        case ON_ADD_CHECKUP_MEDICAL_TEST_RESULTS : {\n            return {\n                ...state,\n                checkup: action.payload\n            }\n        }\n        default :\n            return state;\n    }\n};\n\nexport default patientMedicalTestAddEditReducer;"]},"metadata":{},"sourceType":"module"}