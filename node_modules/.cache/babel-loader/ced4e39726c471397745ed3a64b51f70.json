{"ast":null,"code":"import { ADD_TEMPLATE_MEDICINE, GET_DOES_LIST, GET_FREQUENT_LIST, GET_MEAL_TIME_LIST, GET_MEDICINE_VALUE_LIST, GET_PRESCRIPTION_TEMPLATE, ON_ADD_EDIT_FORM_CHANGE, ON_FORM_RESET, ON_RESET, ON_SAVE_UPDATE, ON_SET_SELECTED_IDS, TOGGLE_STATE } from \"../actions/index\";\nimport { addMedicineLine, initMedicineLines, setMedicineLines } from \"../../../../../../../utils/HealthTrackerUtils\";\nimport { cloneDeep, find } from \"lodash\";\nconst initialState = {\n  medicineList: [],\n  prescriptionTemplate: {},\n  formData: {},\n  selectedIDS: [],\n  dose: {},\n  mealTime: {},\n  frequents: {},\n  addedTemplateMedicine: initMedicineLines()\n};\n\nconst prescriptionTemplateAddEditReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ON_ADD_EDIT_FORM_CHANGE:\n      {\n        return { ...state,\n          formData: action.payload\n        };\n      }\n    //\n    // case ON_SAVE_UPDATE : {\n    //     return {\n    //         ...state,\n    //         prescriptionTemplate: action.payload\n    //     }\n    // }\n\n    case ON_SAVE_UPDATE:\n    case GET_PRESCRIPTION_TEMPLATE:\n      {\n        let prescriptionTemplateMedicine = cloneDeep(action.payload.addedTemplateMedicine);\n        let dataLength = prescriptionTemplateMedicine.length;\n        let addedTemplateMedicine = [];\n\n        if (dataLength > 0) {\n          addedTemplateMedicine = setMedicineLines(dataLength);\n        } else {\n          addedTemplateMedicine = cloneDeep(state.addedTemplateMedicine);\n        }\n\n        let retrievedItems = [];\n        prescriptionTemplateMedicine.forEach((medicine, index) => {\n          let item = Object.assign({}, { ...addedTemplateMedicine[index]\n          }, { ...medicine\n          }, {\n            updated: false,\n            removed: false\n          });\n          retrievedItems.push(item);\n        });\n        console.log(retrievedItems);\n\n        if (retrievedItems.length == 0) {\n          retrievedItems = initMedicineLines();\n        } else {\n          retrievedItems.push(addMedicineLine());\n        }\n\n        return { ...state,\n          prescriptionTemplate: action.payload,\n          addedTemplateMedicine: retrievedItems\n        };\n      }\n\n    case ON_FORM_RESET:\n      {\n        return { ...state,\n          formData: {}\n        };\n      }\n\n    case ON_RESET:\n      {\n        return { ...state,\n          ...initialState\n        };\n      }\n\n    case ON_SET_SELECTED_IDS:\n      {\n        return { ...state,\n          selectedIDS: [...state.selectedIDS, ...action.payload]\n        };\n      }\n\n    case GET_DOES_LIST:\n      {\n        return { ...state,\n          dose: Object.assign({}, state.dose, action.payload)\n        };\n      }\n\n    case GET_MEAL_TIME_LIST:\n      {\n        return { ...state,\n          mealTime: Object.assign({}, state.mealTime, action.payload)\n        };\n      }\n\n    case GET_FREQUENT_LIST:\n      {\n        return { ...state,\n          frequents: Object.assign({}, state.frequents, action.payload)\n        };\n      }\n\n    case ADD_TEMPLATE_MEDICINE:\n      {\n        let {\n          uuid,\n          ...data\n        } = action.payload;\n        let addedItems = cloneDeep(state.addedTemplateMedicine);\n        let item = find(addedItems, lineItem => lineItem.uuid == uuid);\n\n        if (item) {\n          item = Object.assign(item, { ...data\n          }, {\n            updated: true,\n            removed: false\n          });\n        } else {\n          addedItems.push({\n            uuid,\n            ...data\n          });\n        }\n\n        let index = _.findIndex(addedItems, item);\n\n        if (index === addedItems.length - 1) {\n          addedItems.push(addMedicineLine());\n        }\n\n        return { ...state,\n          addedTemplateMedicine: addedItems\n        };\n      }\n\n    case TOGGLE_STATE:\n      {\n        let {\n          uuid,\n          ...data\n        } = action.payload;\n        let addedItems = cloneDeep(state.addedTemplateMedicine);\n        let item = find(addedItems, lineItem => lineItem.uuid == uuid);\n\n        if (item) {\n          item = Object.assign(item, { ...data\n          }, {\n            updated: true\n          }, {\n            removed: !data.removed\n          });\n        }\n\n        return { ...state,\n          addedTemplateMedicine: addedItems\n        };\n      }\n\n    case GET_MEDICINE_VALUE_LIST:\n      {\n        return { ...state,\n          medicineList: action.payload\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default prescriptionTemplateAddEditReducer;","map":{"version":3,"sources":["C:/Users/chamald/Desktop/Chamal/react/react-app/src/app/views/admin/config/prescriptionTemplate/store/reducer/prescription.template.add.edit.reducer.js"],"names":["ADD_TEMPLATE_MEDICINE","GET_DOES_LIST","GET_FREQUENT_LIST","GET_MEAL_TIME_LIST","GET_MEDICINE_VALUE_LIST","GET_PRESCRIPTION_TEMPLATE","ON_ADD_EDIT_FORM_CHANGE","ON_FORM_RESET","ON_RESET","ON_SAVE_UPDATE","ON_SET_SELECTED_IDS","TOGGLE_STATE","addMedicineLine","initMedicineLines","setMedicineLines","cloneDeep","find","initialState","medicineList","prescriptionTemplate","formData","selectedIDS","dose","mealTime","frequents","addedTemplateMedicine","prescriptionTemplateAddEditReducer","state","action","type","payload","prescriptionTemplateMedicine","dataLength","length","retrievedItems","forEach","medicine","index","item","Object","assign","updated","removed","push","console","log","uuid","data","addedItems","lineItem","_","findIndex"],"mappings":"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","sourcesContent":["import {\n    ADD_TEMPLATE_MEDICINE,\n    GET_DOES_LIST,\n    GET_FREQUENT_LIST,\n    GET_MEAL_TIME_LIST,\n    GET_MEDICINE_VALUE_LIST,\n    GET_PRESCRIPTION_TEMPLATE,\n    ON_ADD_EDIT_FORM_CHANGE,\n    ON_FORM_RESET,\n    ON_RESET,\n    ON_SAVE_UPDATE,\n    ON_SET_SELECTED_IDS,\n    TOGGLE_STATE\n} from \"../actions/index\";\nimport {addMedicineLine, initMedicineLines, setMedicineLines} from \"../../../../../../../utils/HealthTrackerUtils\";\nimport {cloneDeep, find} from \"lodash\";\n\nconst initialState = {\n    medicineList: [],\n    prescriptionTemplate: {},\n    formData: {},\n    selectedIDS: [],\n    dose: {},\n    mealTime: {},\n    frequents: {},\n    addedTemplateMedicine: initMedicineLines()\n};\n\nconst prescriptionTemplateAddEditReducer = function (state = initialState, action) {\n\n    switch (action.type) {\n        case ON_ADD_EDIT_FORM_CHANGE : {\n            return {\n                ...state,\n                formData: action.payload\n            }\n        }\n        //\n        // case ON_SAVE_UPDATE : {\n        //     return {\n        //         ...state,\n        //         prescriptionTemplate: action.payload\n        //     }\n        // }\n        case ON_SAVE_UPDATE :\n        case GET_PRESCRIPTION_TEMPLATE : {\n\n            let prescriptionTemplateMedicine = cloneDeep(action.payload.addedTemplateMedicine);\n\n            let dataLength = prescriptionTemplateMedicine.length;\n\n            let addedTemplateMedicine = [];\n\n            if (dataLength > 0) {\n                addedTemplateMedicine = setMedicineLines(dataLength);\n            } else {\n                addedTemplateMedicine = cloneDeep(state.addedTemplateMedicine);\n            }\n            let retrievedItems = [];\n            prescriptionTemplateMedicine.forEach((medicine, index) => {\n                let item = Object.assign({}, {...addedTemplateMedicine[index]}, {...medicine}, {\n                    updated: false,\n                    removed: false\n                });\n                retrievedItems.push(item);\n            });\n\n            console.log(retrievedItems);\n\n            if (retrievedItems.length == 0) {\n                retrievedItems = initMedicineLines();\n            } else {\n                retrievedItems.push(addMedicineLine());\n            }\n\n            return {\n                ...state,\n                prescriptionTemplate: action.payload,\n                addedTemplateMedicine: retrievedItems\n            }\n        }\n\n        case ON_FORM_RESET: {\n            return {\n                ...state,\n                formData: {}\n            }\n        }\n\n        case ON_RESET : {\n            return {\n                ...state,\n                ...initialState\n            }\n        }\n\n        case ON_SET_SELECTED_IDS : {\n            return {\n                ...state,\n                selectedIDS: [...state.selectedIDS, ...action.payload]\n\n            }\n        }\n\n\n        case GET_DOES_LIST : {\n            return {\n                ...state,\n                dose: Object.assign({}, state.dose, action.payload)\n            }\n        }\n\n        case GET_MEAL_TIME_LIST : {\n            return {\n                ...state,\n                mealTime: Object.assign({}, state.mealTime, action.payload)\n            }\n        }\n\n        case GET_FREQUENT_LIST : {\n            return {\n                ...state,\n                frequents: Object.assign({}, state.frequents, action.payload)\n            }\n        }\n\n        case ADD_TEMPLATE_MEDICINE : {\n            let {uuid, ...data} = action.payload;\n            let addedItems = cloneDeep(state.addedTemplateMedicine);\n            let item = find(addedItems, (lineItem) => lineItem.uuid == uuid);\n            if (item) {\n                item = Object.assign(item, {...data}, {updated: true, removed: false});\n            } else {\n                addedItems.push({uuid, ...data});\n            }\n\n            let index = _.findIndex(addedItems, item);\n\n            if (index === addedItems.length - 1) {\n                addedItems.push(addMedicineLine());\n            }\n\n            return {\n                ...state,\n                addedTemplateMedicine: addedItems\n            }\n        }\n\n\n        case TOGGLE_STATE : {\n            let {uuid, ...data} = action.payload;\n            let addedItems = cloneDeep(state.addedTemplateMedicine);\n            let item = find(addedItems, (lineItem) => lineItem.uuid == uuid);\n            if (item) {\n\n                item = Object.assign(item, {...data}, {updated: true}, {removed: !data.removed});\n            }\n\n            return {\n                ...state,\n                addedTemplateMedicine: addedItems\n            }\n        }\n\n        case GET_MEDICINE_VALUE_LIST: {\n            return {\n                ...state,\n                medicineList: action.payload\n            }\n        }\n\n        default :\n            return state;\n\n    }\n\n};\n\nexport default prescriptionTemplateAddEditReducer;"]},"metadata":{},"sourceType":"module"}