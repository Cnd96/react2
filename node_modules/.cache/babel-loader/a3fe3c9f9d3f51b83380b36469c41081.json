{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chamald\\\\Desktop\\\\Chamal\\\\react\\\\react-app\\\\src\\\\app\\\\views\\\\admin\\\\patient\\\\newPatient\\\\stepper\\\\stepComponents\\\\medicalTests\\\\components\\\\MedicalTestListNew.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { CButton, CCol, CRow, CFormGroup, CInput } from \"@coreui/react\";\nimport { getOptionsListByObjectListForCustomSelect, getInputFieldClassNames } from \"../../../../../../../\";\nimport * as Action from \"../store/actions/patient.add.medical.test.results.action\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst generateSaveObject = (checkupData, patientMedicalTestsData) => {\n  return Object.assign({}, {\n    checkupID: checkupData.checkup ? checkupData.checkup.checkupID : null,\n    medicalTestResults: patientMedicalTestsData.formData\n  });\n};\n\nconst MedicalTestList = () => {\n  _s();\n\n  let dispatch = useDispatch();\n  const checkupData = useSelector(_ref => {\n    let {\n      checkup\n    } = _ref;\n    return checkup.checkupAddEdit;\n  });\n  const patientMedicalTestsData = useSelector(_ref2 => {\n    let {\n      patientMedicalTest\n    } = _ref2;\n    return patientMedicalTest.patientMedicalTestAddEdit;\n  });\n  const [activeTabID, setActiveTabID] = useState();\n  useEffect(() => {\n    console.log(patientMedicalTestsData.medicalTestTypes[0]);\n    setActiveTabID(patientMedicalTestsData.medicalTestTypes[0] ? patientMedicalTestsData.medicalTestTypes[0].medicalTestTypeID : 0);\n  }, [patientMedicalTestsData.medicalTestTypes]);\n\n  const save = () => {\n    let saveObj = generateSaveObject(checkupData, patientMedicalTestsData);\n\n    if (saveObj.checkupID) {\n      dispatch(Action.saveOrUpdateCheckupWithPatientMedicalTestsResults(saveObj));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(CRow, {\n      children: [/*#__PURE__*/_jsxDEV(CCol, {\n        sm: \"12\",\n        md: \"6\",\n        lg: \"5\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            height: 500,\n            overflowY: 'scroll',\n            overflowX: 'hidden'\n          },\n          children: [patientMedicalTestsData.medicalTestTypes.map((medicalTestType, indexr) => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              backgroundColor: `#e57373`,\n              height: 500\n            },\n            id: \"mone\",\n            children: [/*#__PURE__*/_jsxDEV(CRow, {\n              style: {\n                paddingTop: '10px'\n              },\n              children: /*#__PURE__*/_jsxDEV(CCol, {\n                sm: \"12\",\n                md: \"6\",\n                lg: \"6\",\n                children: /*#__PURE__*/_jsxDEV(\"h4\", {\n                  style: {\n                    textAlign: 'right'\n                  },\n                  children: medicalTestType.testType\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 45,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 44,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 33\n            }, this), medicalTestType.medicalTestRecords.map((record, index) => /*#__PURE__*/_jsxDEV(CRow, {\n              children: [/*#__PURE__*/_jsxDEV(CCol, {\n                sm: \"12\",\n                md: \"6\",\n                lg: \"5\",\n                children: /*#__PURE__*/_jsxDEV(\"h5\", {\n                  style: {\n                    textAlign: 'right'\n                  },\n                  children: record.measurementName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 53,\n                  columnNumber: 49\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 52,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(CCol, {\n                sm: \"12\",\n                md: \"6\",\n                lg: \"3\",\n                children: /*#__PURE__*/_jsxDEV(CFormGroup, {\n                  children: /*#__PURE__*/_jsxDEV(CInput, {\n                    type: \"text\",\n                    name: 'value',\n                    placeholder: 'Value',\n                    style: {\n                      height: '25px'\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 57,\n                    columnNumber: 53\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 56,\n                  columnNumber: 49\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 55,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(CCol, {\n                sm: \"12\",\n                md: \"6\",\n                lg: \"4\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 66,\n                columnNumber: 45\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 41\n            }, this))]\n          }, indexr, true, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 29\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              backgroundColor: `#f06292`,\n              height: 500\n            },\n            id: \"mtwo\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Blood Pressure\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              backgroundColor: `#fff176`,\n              height: 500\n            },\n            id: \"mthree\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Glycaemic Control\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CCol, {\n        sm: \"12\",\n        md: \"6\",\n        lg: \"7\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"medicalTestTypeMenu\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              backgroundColor: `#e57373`\n            },\n            onClick: () => document.getElementById('mone').scrollIntoView(),\n            className: \"medicalTestTypeCard\",\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              children: \"Examination\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              backgroundColor: `#f06292`\n            },\n            onClick: () => document.getElementById('mtwo').scrollIntoView(),\n            className: \"medicalTestTypeCard\",\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              children: \"Blood Pressure\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              backgroundColor: `#fff176`\n            },\n            onClick: () => document.getElementById('mthree').scrollIntoView(),\n            className: \"medicalTestTypeCard\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Glycaemic Control\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              backgroundColor: `#dce775`\n            },\n            onClick: () => console.log(patientMedicalTestsData.medicalTestTypes[3]),\n            className: \"medicalTestTypeCard\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Kidney Function\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              backgroundColor: `#4dd0e1`\n            },\n            className: \"medicalTestTypeCard\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Bone\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              backgroundColor: `#ffb74d`\n            },\n            className: \"medicalTestTypeCard\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Cardiac Assessment\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              backgroundColor: `#64b5f6`\n            },\n            className: \"medicalTestTypeCard\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Thyroid Hermone\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              backgroundColor: `#a1887f`\n            },\n            className: \"medicalTestTypeCard\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Lipid Profile\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MedicalTestList, \"q025O4G0W89FV4bl4e7flgP9v4c=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = MedicalTestList;\nexport default MedicalTestList;\n\nvar _c;\n\n$RefreshReg$(_c, \"MedicalTestList\");","map":{"version":3,"sources":["C:/Users/chamald/Desktop/Chamal/react/react-app/src/app/views/admin/patient/newPatient/stepper/stepComponents/medicalTests/components/MedicalTestListNew.js"],"names":["React","useEffect","useState","useDispatch","useSelector","CButton","CCol","CRow","CFormGroup","CInput","getOptionsListByObjectListForCustomSelect","getInputFieldClassNames","Action","generateSaveObject","checkupData","patientMedicalTestsData","Object","assign","checkupID","checkup","medicalTestResults","formData","MedicalTestList","dispatch","checkupAddEdit","patientMedicalTest","patientMedicalTestAddEdit","activeTabID","setActiveTabID","console","log","medicalTestTypes","medicalTestTypeID","save","saveObj","saveOrUpdateCheckupWithPatientMedicalTestsResults","height","overflowY","overflowX","map","medicalTestType","indexr","backgroundColor","paddingTop","textAlign","testType","medicalTestRecords","record","index","measurementName","document","getElementById","scrollIntoView"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {CButton, CCol, CRow, CFormGroup, CInput} from \"@coreui/react\";\n\nimport {getOptionsListByObjectListForCustomSelect, getInputFieldClassNames} from \"../../../../../../../\";\nimport * as Action from \"../store/actions/patient.add.medical.test.results.action\";\n\nconst generateSaveObject = (checkupData, patientMedicalTestsData) => {\n    return Object.assign({}, {\n        checkupID: checkupData.checkup ? checkupData.checkup.checkupID : null,\n        medicalTestResults: patientMedicalTestsData.formData\n    });\n};\n\nconst MedicalTestList = () => {\n\n    let dispatch = useDispatch();\n    const checkupData = useSelector(({checkup}) => checkup.checkupAddEdit);\n    const patientMedicalTestsData = useSelector(({patientMedicalTest}) => patientMedicalTest.patientMedicalTestAddEdit);\n    const [activeTabID, setActiveTabID] = useState();\n\n    useEffect(() => {\n        console.log(patientMedicalTestsData.medicalTestTypes[0])\n        setActiveTabID(patientMedicalTestsData.medicalTestTypes[0] ? patientMedicalTestsData.medicalTestTypes[0].medicalTestTypeID : 0);\n    }, [patientMedicalTestsData.medicalTestTypes]);\n\n    const save = () => {\n        let saveObj = generateSaveObject(checkupData, patientMedicalTestsData);\n        if (saveObj.checkupID) {\n            dispatch(Action.saveOrUpdateCheckupWithPatientMedicalTestsResults(saveObj));\n        }\n    };\n\n\n    return (\n        <div>\n            <CRow>\n                <CCol sm=\"12\" md=\"6\" lg=\"5\">\n                    <div  style={{height:500,overflowY:'scroll',overflowX:'hidden'}} >\n                        {   \n                        patientMedicalTestsData.medicalTestTypes.map((medicalTestType, indexr) =>\n                            <div key={indexr} style={{backgroundColor:`#e57373`,height:500}} id=\"mone\">\n                                <CRow style={{paddingTop:'10px'}}>\n                                    <CCol sm=\"12\" md=\"6\" lg=\"6\" >\n                                        <h4 style={{textAlign: 'right'}}>{medicalTestType.testType}</h4> \n                                    </CCol>\n                                </CRow>\n\n                                {\n                                    medicalTestType.medicalTestRecords.map((record,index)=>\n                                        <CRow key={index} >\n                                            <CCol sm=\"12\" md=\"6\" lg=\"5\" >\n                                                <h5 style={{textAlign: 'right'}}>{record.measurementName}</h5> \n                                            </CCol>\n                                            <CCol sm=\"12\" md=\"6\" lg=\"3\" >\n                                                <CFormGroup>\n                                                    <CInput\n                                                        type=\"text\"\n                                                        name={'value'}\n                                                        placeholder={'Value'}\n                                                        style={{height:'25px'}}\n                                                    />\n                                                </CFormGroup>\n                                            </CCol>\n                                            \n                                            <CCol sm=\"12\" md=\"6\" lg=\"4\" >\n                                                {/* <CFormGroup>\n                                                    <CLabel htmlFor=\"status\">Status</CLabel>\n\n                                                    <Field name=\"status\"\n                                                        className={getInputFieldClassNames(touched.status, errors.status)}\n                                                    >\n                                                        {({\n                                                            field, // { name, value, onChange, onBlur }\n                                                            form: {touched, errors}, // also values, setXXXX, handleXXXX, dirty, isValid, status, etc.\n                                                            meta,\n                                                        }) => (\n\n                                                            <CSelect custom name=\"status\" {...field}>\n                                                                {\n                                                                    getOptionsListByObjectListForCustomSelect(false).map((item) => {\n                                                                        return (\n                                                                            <option key={item.key}\n                                                                                    value={item.key}>{item.value}</option>\n                                                                        );\n                                                                    })\n                                                                }\n                                                            </CSelect>\n                                                        )}\n                                                    </Field>\n                                                </CFormGroup>  */}\n                                            </CCol>\n                                        </CRow>\n                                    )\n                                }\n                                \n                            </div>\n                        )\n                        }\n                        {/* <div style={{backgroundColor:`#e57373`,height:500}} id=\"mone\">\n                            <CRow style={{paddingTop:'10px'}}>\n                                <CCol sm=\"12\" md=\"6\" lg=\"6\" >\n                                    <h4 style={{textAlign: 'right'}}>{patientMedicalTestsData.medicalTestTypes&&patientMedicalTestsData.medicalTestTypes[3].testType}</h4> \n                                </CCol>\n                            </CRow>\n                            \n                            <CRow >\n                                <CCol sm=\"12\" md=\"6\" lg=\"5\" >\n                                    <h5 style={{textAlign: 'right'}}>Height</h5> \n                                </CCol>\n                                <CCol sm=\"12\" md=\"6\" lg=\"3\" >\n                                    <CFormGroup>\n                                        <CInput\n                                            type=\"text\"\n                                            name={'value'}\n                                            placeholder={'Value'}\n                                            style={{height:'25px'}}\n                                        />\n                                    </CFormGroup>\n                                </CCol>\n                                \n                                <CCol sm=\"12\" md=\"6\" lg=\"4\" >\n                                        \n                                </CCol>\n                            </CRow>\n                            <CRow>\n                                <CCol sm=\"12\" md=\"6\" lg=\"5\" >\n                                    <p style={{textAlign: 'right'}}>Examination</p> \n                                </CCol>\n                            </CRow>\n                        </div> */}\n                        <div style={{backgroundColor:`#f06292`,height:500}} id=\"mtwo\">\n                            <p >Blood Pressure</p> \n                        </div>\n\n                        <div style={{backgroundColor:`#fff176`,height:500}} id=\"mthree\">\n                            <p>Glycaemic Control</p> \n                        </div>\n                    </div>\n                </CCol>\n                \n                <CCol sm=\"12\" md=\"6\" lg=\"7\">\n                    <div className='medicalTestTypeMenu'>\n                        <div style={{backgroundColor:`#e57373`}} onClick={()=>document.getElementById('mone').scrollIntoView()} className='medicalTestTypeCard'  >\n                            <a >Examination</a> \n                        </div>\n                        <div style={{backgroundColor:`#f06292`}} onClick={()=>document.getElementById('mtwo').scrollIntoView()} className='medicalTestTypeCard'  >\n                            <a >Blood Pressure</a> \n                        </div>\n                        <div style={{backgroundColor:`#fff176`}} onClick={()=>document.getElementById('mthree').scrollIntoView()} className='medicalTestTypeCard'>\n                            <p >Glycaemic Control</p> \n                        </div>\n                        <div style={{backgroundColor:`#dce775`}} onClick={()=>console.log(patientMedicalTestsData.medicalTestTypes[3])}  className='medicalTestTypeCard'>\n                            <p >Kidney Function</p> \n                        </div>\n                        <div style={{backgroundColor:`#4dd0e1`}} className='medicalTestTypeCard'>\n                            <p >Bone</p> \n                        </div>\n                        <div style={{backgroundColor:`#ffb74d`}} className='medicalTestTypeCard'>\n                            <p>Cardiac Assessment</p> \n                        </div>\n                        <div style={{backgroundColor:`#64b5f6`}} className='medicalTestTypeCard'>\n                            <p>Thyroid Hermone</p> \n                        </div>\n                        <div style={{backgroundColor:`#a1887f`}} className='medicalTestTypeCard'>\n                            <p>Lipid Profile</p> \n                        </div>\n                    </div>\n                </CCol>\n            </CRow>\n        </div>\n    );\n};\n\nexport default MedicalTestList;"]},"metadata":{},"sourceType":"module"}