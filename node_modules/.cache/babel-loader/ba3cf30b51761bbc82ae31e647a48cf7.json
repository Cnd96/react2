{"ast":null,"code":"import axios from 'axios';\nimport jwtDecode from 'jwt-decode';\nimport HealthTrackerUtils from \"../../../utils/HealthTrackerUtils\";\nimport Constants from \"../../../utils/Constants\";\nimport { getStorageItem, removeStorageItem, setStorageItem } from \"../../../utils/StorageUtils\";\n\nclass jwtService extends HealthTrackerUtils.EventEmitter {\n  constructor() {\n    super(...arguments);\n\n    this.setInterceptors = () => {\n      axios.interceptors.response.use(response => {\n        return response;\n      }, err => {\n        return new Promise((resolve, reject) => {\n          if (err.response.status === 401 && err.config && !err.config.__isRetryRequest) {\n            // if you ever get an unauthorized response, logout the user\n            this.emit('onAutoLogout', 'Invalid access_token');\n            this.setSession(null);\n          }\n\n          throw err;\n        });\n      });\n    };\n\n    this.handleAuthentication = () => {\n      let accessToken = this.getAccessToken();\n\n      if (!accessToken) {\n        return;\n      }\n\n      if (this.isAuthTokenValid(accessToken)) {\n        this.setSession(accessToken);\n        this.emit('onAutoLogin', true);\n      } else {\n        this.setSession(null);\n        this.emit('onAutoLogout', 'accessToken expired');\n      }\n    };\n\n    this.onLoginSuccess = () => {\n      this.emit('onLoginSuccess', true);\n    };\n\n    this.setSession = accessToken => {\n      if (accessToken) {\n        this.accessToken = accessToken;\n        setStorageItem(Constants.STORAGE.ACCESS_TOKEN, accessToken);\n        axios.defaults.headers.common['Authorization'] = 'Bearer ' + accessToken;\n      } else {\n        this.accessToken = null;\n        removeStorageItem(Constants.STORAGE.ACCESS_TOKEN);\n        delete axios.defaults.headers.common['Authorization'];\n      }\n    };\n\n    this.logout = () => {\n      this.setSession(null);\n      removeStorageItem(Constants.STORAGE.REFRESH_TOKEN);\n      removeStorageItem(Constants.STORAGE.LOGGED_USER_ENC);\n    };\n\n    this.isAuthTokenValid = accessToken => {\n      if (!accessToken) {\n        return false;\n      }\n\n      const decoded = jwtDecode(accessToken);\n      const currentTime = Date.now() / 1000;\n\n      if (decoded.exp < currentTime) {\n        console.warn('access token expired');\n        return false;\n      } else {\n        return true;\n      }\n    };\n\n    this.getAccessToken = () => {\n      if (this.accessToken) {\n        return this.accessToken;\n      }\n\n      return getStorageItem(Constants.STORAGE.ACCESS_TOKEN);\n    };\n\n    this.setRefreshToken = token => {\n      setStorageItem(Constants.STORAGE.REFRESH_TOKEN, token);\n    };\n\n    this.setLoginUser = user => {\n      setStorageItem(Constants.STORAGE.LOGGED_USER_ENC, JSON.stringify(user));\n    };\n\n    this.getLoginUser = () => {\n      return getStorageItem(Constants.STORAGE.LOGGED_USER_ENC, true);\n    };\n\n    this.isUserLoggedIn = () => {\n      let token = this.getAccessToken();\n      return this.isAuthTokenValid(token);\n    };\n  }\n\n  init() {\n    this.setInterceptors();\n    this.handleAuthentication();\n  }\n\n}\n\nconst instance = new jwtService();\nexport default instance;","map":{"version":3,"sources":["C:/Users/chamald/Desktop/Chamal/react/react-app/src/app/services/auth/jwtService.js"],"names":["axios","jwtDecode","HealthTrackerUtils","Constants","getStorageItem","removeStorageItem","setStorageItem","jwtService","EventEmitter","setInterceptors","interceptors","response","use","err","Promise","resolve","reject","status","config","__isRetryRequest","emit","setSession","handleAuthentication","accessToken","getAccessToken","isAuthTokenValid","onLoginSuccess","STORAGE","ACCESS_TOKEN","defaults","headers","common","logout","REFRESH_TOKEN","LOGGED_USER_ENC","decoded","currentTime","Date","now","exp","console","warn","setRefreshToken","token","setLoginUser","user","JSON","stringify","getLoginUser","isUserLoggedIn","init","instance"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport jwtDecode from 'jwt-decode';\nimport HealthTrackerUtils from \"../../../utils/HealthTrackerUtils\";\nimport Constants from \"../../../utils/Constants\";\nimport {getStorageItem, removeStorageItem, setStorageItem} from \"../../../utils/StorageUtils\";\n\nclass jwtService extends HealthTrackerUtils.EventEmitter {\n\n    accessToken;\n\n    init() {\n        this.setInterceptors();\n        this.handleAuthentication();\n    }\n\n    setInterceptors = () => {\n        axios.interceptors.response.use(response => {\n            return response;\n        }, err => {\n            return new Promise((resolve, reject) => {\n                if (err.response.status === 401 && err.config && !err.config.__isRetryRequest) {\n                    // if you ever get an unauthorized response, logout the user\n                    this.emit('onAutoLogout', 'Invalid access_token');\n                    this.setSession(null);\n                }\n                throw err;\n            });\n        });\n    };\n\n    handleAuthentication = () => {\n\n        let accessToken = this.getAccessToken();\n\n        if (!accessToken) {\n            return;\n        }\n\n        if (this.isAuthTokenValid(accessToken)) {\n            this.setSession(accessToken);\n            this.emit('onAutoLogin', true);\n        } else {\n            this.setSession(null);\n            this.emit('onAutoLogout', 'accessToken expired');\n        }\n    };\n\n    onLoginSuccess = () => {\n        this.emit('onLoginSuccess', true);\n    };\n\n    setSession = accessToken => {\n        if (accessToken) {\n            this.accessToken = accessToken;\n            setStorageItem(Constants.STORAGE.ACCESS_TOKEN, accessToken);\n            axios.defaults.headers.common['Authorization'] = 'Bearer ' + accessToken;\n        } else {\n            this.accessToken = null;\n            removeStorageItem(Constants.STORAGE.ACCESS_TOKEN);\n            delete axios.defaults.headers.common['Authorization'];\n        }\n    };\n\n    logout = () => {\n        this.setSession(null);\n        removeStorageItem(Constants.STORAGE.REFRESH_TOKEN);\n        removeStorageItem(Constants.STORAGE.LOGGED_USER_ENC);\n    };\n\n    isAuthTokenValid = accessToken => {\n        if (!accessToken) {\n            return false;\n        }\n        const decoded = jwtDecode(accessToken);\n        const currentTime = Date.now() / 1000;\n        if (decoded.exp < currentTime) {\n            console.warn('access token expired');\n            return false;\n        } else {\n            return true;\n        }\n    };\n\n    getAccessToken = () => {\n        if (this.accessToken) {\n            return this.accessToken;\n        }\n\n        return getStorageItem(Constants.STORAGE.ACCESS_TOKEN);\n    };\n\n    setRefreshToken = (token) => {\n        setStorageItem(Constants.STORAGE.REFRESH_TOKEN, token);\n    };\n\n    setLoginUser = (user) => {\n        setStorageItem(Constants.STORAGE.LOGGED_USER_ENC, JSON.stringify(user));\n    };\n\n    getLoginUser = () => {\n        return getStorageItem(Constants.STORAGE.LOGGED_USER_ENC, true);\n    };\n\n    isUserLoggedIn = () => {\n        let token = this.getAccessToken();\n        return this.isAuthTokenValid(token);\n    };\n}\n\nconst instance = new jwtService();\n\nexport default instance;\n"]},"metadata":{},"sourceType":"module"}