{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chamald\\\\Desktop\\\\Chamal\\\\react\\\\react-app\\\\src\\\\app\\\\views\\\\common\\\\AppPagination.js\";\nimport React, { Component } from 'react';\nimport { Input, Pagination, PaginationItem, PaginationLink } from 'reactstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass AppPagination extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      pageLength: 10,\n      paginationArray: []\n    };\n\n    this.onPageSizeChange = e => {\n      this.setState({\n        pageLength: e.target.value\n      }, () => {\n        this.props.onPaginationChange({\n          rows: this.state.pageLength,\n          page: 1\n        });\n      });\n    };\n\n    this.onPaginationChange = e => {\n      this.props.onPaginationChange({\n        rows: this.state.pageLength,\n        page: e\n      });\n    };\n\n    this.generatePaginationArray = () => {\n      let pagination = [];\n      let currentPageNo = this.props.currentPageNo ? this.props.currentPageNo : 1;\n      let totalNoOfPages = this.props.totalNoOfPages ? this.props.totalNoOfPages : 1;\n\n      if (currentPageNo - 2 >= 1) {\n        pagination.push(currentPageNo - 2);\n      }\n\n      if (currentPageNo - 1 >= 1) {\n        pagination.push(currentPageNo - 1);\n      }\n\n      pagination.push(currentPageNo);\n\n      if (currentPageNo + 1 <= totalNoOfPages) {\n        pagination.push(currentPageNo + 1);\n      }\n\n      if (currentPageNo + 2 <= totalNoOfPages) {\n        pagination.push(currentPageNo + 2);\n      }\n\n      this.setState({\n        paginationArray: pagination\n      });\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.pageLength) {\n      this.setState({\n        pageLength: this.props.pageLength\n      }, () => {\n        this.generatePaginationArray();\n      });\n    } else {\n      this.generatePaginationArray();\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (this.props.totalNoOfPages && this.props.currentPageNo && (prevProps.currentPageNo != this.props.currentPageNo || prevProps.totalNoOfPages != this.props.totalNoOfPages)) {\n      this.generatePaginationArray();\n    }\n\n    if (this.props.pageLength && this.props.pageLength != prevProps.pageLength) {\n      this.setState({\n        pageLength: this.props.pageLength\n      });\n    }\n\n    if (prevProps.totalNoOfPages !== 0 && this.props.totalNoOfPages === 0) {\n      this.generatePaginationArray();\n    }\n  }\n\n  render() {\n    let currentPageNo = this.props.currentPageNo ? this.props.currentPageNo : 1;\n    let totalNoOfPages = this.props.totalNoOfPages ? this.props.totalNoOfPages : 1;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-pagination\",\n      style: {\n        float: 'right'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inline-block\",\n        style: {\n          marginRight: '10px',\n          verticalAlign: 'middle',\n          float: 'left'\n        },\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          type: \"select\",\n          className: \"inline-block\",\n          value: this.state.pageLength,\n          onChange: this.onPageSizeChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"5\",\n            children: \"5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"10\",\n            children: \"10\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"20\",\n            children: \"20\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"50\",\n            children: \"50\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"100\",\n            children: \"100\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n        className: \"inline-block\",\n        style: {\n          float: 'left'\n        },\n        children: [/*#__PURE__*/_jsxDEV(PaginationItem, {\n          disabled: currentPageNo == 1,\n          children: /*#__PURE__*/_jsxDEV(PaginationLink, {\n            first: true,\n            onClick: () => {\n              this.onPaginationChange(1);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(PaginationItem, {\n          disabled: currentPageNo == 1,\n          children: /*#__PURE__*/_jsxDEV(PaginationLink, {\n            onClick: () => {\n              this.onPaginationChange(currentPageNo - 1);\n            },\n            previous: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 21\n        }, this), this.state.paginationArray.map(page => {\n          return /*#__PURE__*/_jsxDEV(PaginationItem, {\n            active: page == currentPageNo,\n            children: /*#__PURE__*/_jsxDEV(PaginationLink, {\n              onClick: () => {\n                this.onPaginationChange(page);\n              },\n              children: page\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 37\n            }, this)\n          }, page, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 33\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(PaginationItem, {\n          disabled: currentPageNo == totalNoOfPages,\n          children: /*#__PURE__*/_jsxDEV(PaginationLink, {\n            next: true,\n            onClick: () => {\n              this.onPaginationChange(currentPageNo + 1);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(PaginationItem, {\n          disabled: currentPageNo == totalNoOfPages,\n          children: /*#__PURE__*/_jsxDEV(PaginationLink, {\n            last: true,\n            onClick: () => {\n              this.onPaginationChange(totalNoOfPages);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nPagination.propTypes = {};\nexport default AppPagination;","map":{"version":3,"sources":["C:/Users/chamald/Desktop/Chamal/react/react-app/src/app/views/common/AppPagination.js"],"names":["React","Component","Input","Pagination","PaginationItem","PaginationLink","AppPagination","state","pageLength","paginationArray","onPageSizeChange","e","setState","target","value","props","onPaginationChange","rows","page","generatePaginationArray","pagination","currentPageNo","totalNoOfPages","push","componentDidMount","componentDidUpdate","prevProps","prevState","snapshot","render","float","marginRight","verticalAlign","map","propTypes"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {Input, Pagination, PaginationItem, PaginationLink} from 'reactstrap';\n\nclass AppPagination extends Component {\n\n    state = {\n        pageLength: 10,\n        paginationArray: []\n    };\n\n    onPageSizeChange = (e) => {\n        this.setState({\n            pageLength: e.target.value\n        }, () => {\n            this.props.onPaginationChange({\n                rows: this.state.pageLength,\n                page: 1\n            });\n        });\n    };\n\n    componentDidMount() {\n        if (this.props.pageLength) {\n            this.setState({\n                pageLength: this.props.pageLength\n            }, () => {\n                this.generatePaginationArray();\n            });\n        } else {\n            this.generatePaginationArray();\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (this.props.totalNoOfPages && this.props.currentPageNo\n            && (prevProps.currentPageNo != this.props.currentPageNo\n                || prevProps.totalNoOfPages != this.props.totalNoOfPages)) {\n            this.generatePaginationArray();\n        }\n\n        if (this.props.pageLength && this.props.pageLength != prevProps.pageLength) {\n            this.setState({\n                pageLength: this.props.pageLength\n            });\n        }\n\n        if (prevProps.totalNoOfPages !== 0 && this.props.totalNoOfPages === 0) {\n            this.generatePaginationArray();\n        }\n    }\n\n    onPaginationChange = (e) => {\n        this.props.onPaginationChange({\n            rows: this.state.pageLength,\n            page: e\n        });\n    };\n\n    generatePaginationArray = () => {\n        let pagination = [];\n        let currentPageNo = this.props.currentPageNo ? this.props.currentPageNo : 1;\n        let totalNoOfPages = this.props.totalNoOfPages ? this.props.totalNoOfPages : 1;\n\n        if (currentPageNo - 2 >= 1) {\n            pagination.push(currentPageNo - 2);\n        }\n\n        if (currentPageNo - 1 >= 1) {\n            pagination.push(currentPageNo - 1);\n        }\n\n        pagination.push(currentPageNo);\n\n        if (currentPageNo + 1 <= totalNoOfPages) {\n            pagination.push(currentPageNo + 1);\n        }\n\n        if (currentPageNo + 2 <= totalNoOfPages) {\n            pagination.push(currentPageNo + 2);\n        }\n\n        this.setState({\n            paginationArray: pagination\n        });\n    };\n\n    render() {\n        let currentPageNo = this.props.currentPageNo ? this.props.currentPageNo : 1;\n        let totalNoOfPages = this.props.totalNoOfPages ? this.props.totalNoOfPages : 1;\n\n        return (\n            <div className='main-pagination' style={{float: 'right'}}>\n\n                <div className='inline-block' style={{\n                    marginRight: '10px',\n                    verticalAlign: 'middle',\n                    float: 'left'\n                }}>\n                    <Input\n                        type=\"select\"\n                        className='inline-block'\n                        value={this.state.pageLength}\n                        onChange={this.onPageSizeChange}\n                    >\n                        <option value=\"5\">5</option>\n                        <option value=\"10\">10</option>\n                        <option value=\"20\">20</option>\n                        <option value=\"50\">50</option>\n                        <option value=\"100\">100</option>\n                    </Input>\n                </div>\n\n                <Pagination className='inline-block' style={{\n                    float: 'left'\n                }}>\n                    <PaginationItem disabled={currentPageNo == 1}>\n                        <PaginationLink first onClick={() => {\n                            this.onPaginationChange(1)\n                        }}/>\n                    </PaginationItem>\n                    <PaginationItem disabled={currentPageNo == 1}>\n                        <PaginationLink onClick={() => {\n                            this.onPaginationChange(currentPageNo - 1)\n                        }} previous/>\n                    </PaginationItem>\n\n                    {\n                        this.state.paginationArray.map((page) => {\n                            return (\n                                <PaginationItem key={page} active={page == currentPageNo}>\n                                    <PaginationLink onClick={() => {\n                                        this.onPaginationChange(page)\n                                    }}>\n                                        {page}\n                                    </PaginationLink>\n                                </PaginationItem>\n                            );\n                        })\n                    }\n\n                    <PaginationItem disabled={currentPageNo == totalNoOfPages}>\n                        <PaginationLink next onClick={() => {\n                            this.onPaginationChange(currentPageNo + 1)\n                        }}/>\n                    </PaginationItem>\n                    <PaginationItem disabled={currentPageNo == totalNoOfPages}>\n                        <PaginationLink last onClick={() => {\n                            this.onPaginationChange(totalNoOfPages)\n                        }}/>\n                    </PaginationItem>\n                </Pagination>\n\n            </div>\n        );\n    }\n}\n\nPagination.propTypes = {};\n\nexport default AppPagination;\n"]},"metadata":{},"sourceType":"module"}