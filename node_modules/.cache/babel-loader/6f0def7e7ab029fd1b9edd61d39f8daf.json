{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chamald\\\\Desktop\\\\Chamal\\\\react\\\\react-app\\\\src\\\\app\\\\views\\\\admin\\\\config\\\\medicalTestRecords\\\\add-edit\\\\components\\\\MedicalTestRecordAddEditForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { ErrorMessage, Field, Form, Formik } from \"formik\";\nimport { CCol, CFormGroup, CLabel, CRow, CSelect, CButton } from \"@coreui/react\";\nimport { getCommonStatusOptions, getInputFieldClassNames, getOptionsListByObjectListForCustomSelect } from \"../../../../../../../utils/FormUtils\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { removeStorageItem } from \"../../../../../../../utils/StorageUtils\";\nimport Constants from \"../../../../../../../utils/Constants\";\nimport * as Actions from \"../../store/actions/index\";\nimport customValidator from \"../../../../../../../utils/ValidationUtil\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst initValues = {\n  medicalTestRecordID: '',\n  medicalTestTypeID: '',\n  measurementName: '',\n  measurementUnit: '',\n  rangeForm: '',\n  rangeTo: '',\n  status: Constants.STATUS_CONST.ACT\n};\n\nconst getValidations = () => {\n  return {\n    medicalTestTypeID: {\n      required: {\n        message: 'Required'\n      }\n    },\n    measurementName: {\n      required: {\n        message: 'Required'\n      }\n    }\n  };\n};\n\nconst MedicalTestRecordAddEditForm = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const [formValues, setFormValues] = useState(initValues);\n  const data = useSelector(_ref => {\n    let {\n      medicalTestRecords\n    } = _ref;\n    return medicalTestRecords.medicalTestRecordAddEdit;\n  });\n  useEffect(() => {\n    let medicalTestRecord = data.medicalTestRecord;\n    let initData = {\n      medicalTestRecordID: medicalTestRecord.medicalTestRecordID ? medicalTestRecord.medicalTestRecordID : initValues.medicalTestRecordID,\n      medicalTestTypeID: medicalTestRecord.medicalTestTypeID ? medicalTestRecord.medicalTestTypeID : initValues.medicalTestTypeID,\n      measurementName: medicalTestRecord.measurementName ? medicalTestRecord.measurementName : initValues.measurementName,\n      measurementUnit: medicalTestRecord.measurementUnit ? medicalTestRecord.measurementUnit : initValues.measurementUnit,\n      rangeForm: medicalTestRecord.rangeForm ? medicalTestRecord.rangeForm : initValues.rangeForm,\n      rangeTo: medicalTestRecord.rangeTo ? medicalTestRecord.rangeTo : initValues.rangeTo,\n      status: medicalTestRecord.status ? medicalTestRecord.status : initValues.status\n    };\n    setFormValues(initData);\n  }, [dispatch, data.medicalTestRecord]);\n  useEffect(() => {\n    return () => {\n      removeStorageItem(Constants.STORAGE.SELECTED_MEDICAL_TEST_RECORD_ID);\n      dispatch(Actions.onFormReset());\n    };\n  }, []);\n\n  const onCustomValidation = values => {\n    let validate = customValidator(values, getValidations());\n    dispatch(Actions.onFormChange({\n      isValid: validate.isValid,\n      values: values\n    }));\n    return validate.errors;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      enableReinitialize: true,\n      initialValues: formValues,\n      onSubmit: (values, _ref2) => {\n        let {\n          setSubmitting\n        } = _ref2;\n        setTimeout(() => {\n          setSubmitting(false);\n        }, 200);\n      },\n      validateOnChange: true,\n      validate: values => {\n        return onCustomValidation(values);\n      },\n      children: _ref3 => {\n        let {\n          errors,\n          touched\n        } = _ref3;\n        return /*#__PURE__*/_jsxDEV(Form, {\n          children: /*#__PURE__*/_jsxDEV(CRow, {\n            children: [/*#__PURE__*/_jsxDEV(CCol, {\n              sm: \"12\",\n              md: \"6\",\n              lg: \"3\",\n              children: [/*#__PURE__*/_jsxDEV(CFormGroup, {\n                children: [/*#__PURE__*/_jsxDEV(CLabel, {\n                  htmlFor: \"\",\n                  className: 'required',\n                  children: \"Medical Test Type\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 100,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Field, {\n                  name: \"medicalTestTypeID\",\n                  className: getInputFieldClassNames(touched.status, errors.status),\n                  children: _ref4 => {\n                    let {\n                      field,\n                      // { name, value, onChange, onBlur }\n                      form: {\n                        touched,\n                        errors\n                      },\n                      // also values, setXXXX, handleXXXX, dirty, isValid, status, etc.\n                      meta\n                    } = _ref4;\n                    return /*#__PURE__*/_jsxDEV(CSelect, {\n                      custom: true,\n                      name: \"medicalTestTypeID\",\n                      ...field,\n                      children: data && getOptionsListByObjectListForCustomSelect(data.medicalTestTypes, \"testType\", \"testType\", \"medicalTestTypeID\", \"medicalTestTypeID\", true).map(item => {\n                        return /*#__PURE__*/_jsxDEV(\"option\", {\n                          value: item.key,\n                          children: item.value\n                        }, item.key, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 116,\n                          columnNumber: 65\n                        }, this);\n                      })\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 110,\n                      columnNumber: 49\n                    }, this);\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 101,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                name: \"medicalTestTypeID\",\n                render: msg => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: 'formik-error-message',\n                  children: msg\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 128,\n                  columnNumber: 58\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(CCol, {\n              sm: \"12\",\n              md: \"6\",\n              lg: \"3\",\n              children: [/*#__PURE__*/_jsxDEV(CFormGroup, {\n                children: [/*#__PURE__*/_jsxDEV(CLabel, {\n                  htmlFor: \"measurementName\",\n                  className: 'required',\n                  children: \"Measurement Name\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 135,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Field, {\n                  type: \"text\",\n                  name: \"measurementName\",\n                  placeholder: 'Measurement Name',\n                  className: getInputFieldClassNames(touched.measurementName, errors.measurementName)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 138,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 134,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                name: \"measurementName\",\n                render: msg => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: 'formik-error-message',\n                  children: msg\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 148,\n                  columnNumber: 58\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 146,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(CCol, {\n              sm: \"12\",\n              md: \"6\",\n              lg: \"2\",\n              children: [/*#__PURE__*/_jsxDEV(CFormGroup, {\n                children: [/*#__PURE__*/_jsxDEV(CLabel, {\n                  htmlFor: \"status\",\n                  className: 'required',\n                  children: \"Status\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 155,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Field, {\n                  name: \"status\",\n                  className: getInputFieldClassNames(touched.status, errors.status),\n                  children: _ref5 => {\n                    let {\n                      field,\n                      // { name, value, onChange, onBlur }\n                      form: {\n                        touched,\n                        errors\n                      },\n                      // also values, setXXXX, handleXXXX, dirty, isValid, status, etc.\n                      meta\n                    } = _ref5;\n                    return /*#__PURE__*/_jsxDEV(CSelect, {\n                      custom: true,\n                      name: \"status\",\n                      ...field,\n                      children: getCommonStatusOptions(false).map(item => {\n                        return /*#__PURE__*/_jsxDEV(\"option\", {\n                          value: item.key,\n                          children: item.value\n                        }, item.key, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 170,\n                          columnNumber: 65\n                        }, this);\n                      })\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 166,\n                      columnNumber: 49\n                    }, this);\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 157,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                name: \"status\",\n                render: msg => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: 'formik-error-message',\n                  children: msg\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 181,\n                  columnNumber: 58\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 179,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(CCol, {\n              sm: \"12\",\n              md: \"6\",\n              lg: \"3\",\n              children: /*#__PURE__*/_jsxDEV(CFormGroup, {\n                children: [/*#__PURE__*/_jsxDEV(CLabel, {\n                  htmlFor: \"measurementUnit\",\n                  children: \"Measurement Units\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 188,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Field, {\n                  type: \"text\",\n                  name: \"measurementUnit\",\n                  placeholder: 'Measurement Unit',\n                  className: getInputFieldClassNames(touched.measurementUnit, errors.measurementUnit)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 191,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 187,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(CCol, {\n              sm: \"12\",\n              md: \"6\",\n              lg: \"1\",\n              children: [/*#__PURE__*/_jsxDEV(CLabel, {\n                children: \"Add Unit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 200,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(CButton, {\n                onClick: () => {\n                  console.log(\"ddd\");\n                },\n                color: \"primary\",\n                className: \"float-left\",\n                children: \"Save\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 201,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 25\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(MedicalTestRecordAddEditForm, \"S3woDSqtEJJajHJBMG9tCQULSmQ=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = MedicalTestRecordAddEditForm;\nexport default MedicalTestRecordAddEditForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"MedicalTestRecordAddEditForm\");","map":{"version":3,"sources":["C:/Users/chamald/Desktop/Chamal/react/react-app/src/app/views/admin/config/medicalTestRecords/add-edit/components/MedicalTestRecordAddEditForm.js"],"names":["React","useEffect","useState","ErrorMessage","Field","Form","Formik","CCol","CFormGroup","CLabel","CRow","CSelect","CButton","getCommonStatusOptions","getInputFieldClassNames","getOptionsListByObjectListForCustomSelect","useDispatch","useSelector","removeStorageItem","Constants","Actions","customValidator","initValues","medicalTestRecordID","medicalTestTypeID","measurementName","measurementUnit","rangeForm","rangeTo","status","STATUS_CONST","ACT","getValidations","required","message","MedicalTestRecordAddEditForm","dispatch","formValues","setFormValues","data","medicalTestRecords","medicalTestRecordAddEdit","medicalTestRecord","initData","STORAGE","SELECTED_MEDICAL_TEST_RECORD_ID","onFormReset","onCustomValidation","values","validate","onFormChange","isValid","errors","setSubmitting","setTimeout","touched","field","form","meta","medicalTestTypes","map","item","key","value","msg","console","log"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {ErrorMessage, Field, Form, Formik} from \"formik\";\nimport {CCol, CFormGroup, CLabel, CRow, CSelect, CButton} from \"@coreui/react\";\nimport {\n    getCommonStatusOptions,\n    getInputFieldClassNames,\n    getOptionsListByObjectListForCustomSelect\n} from \"../../../../../../../utils/FormUtils\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {removeStorageItem} from \"../../../../../../../utils/StorageUtils\";\nimport Constants from \"../../../../../../../utils/Constants\";\nimport * as Actions from \"../../store/actions/index\";\nimport customValidator from \"../../../../../../../utils/ValidationUtil\";\n\nconst initValues = {\n    medicalTestRecordID: '',\n    medicalTestTypeID: '',\n    measurementName: '',\n    measurementUnit: '',\n    rangeForm: '',\n    rangeTo: '',\n    status: Constants.STATUS_CONST.ACT,\n};\n\nconst getValidations = () => {\n    return {\n        medicalTestTypeID: {\n            required: {message: 'Required'},\n        },\n\n        measurementName: {\n            required: {message: 'Required'},\n        },\n\n    };\n};\n\nconst MedicalTestRecordAddEditForm = () => {\n\n    const dispatch = useDispatch();\n    const [formValues, setFormValues] = useState(initValues);\n    const data = useSelector(({medicalTestRecords}) => medicalTestRecords.medicalTestRecordAddEdit);\n\n    useEffect(() => {\n\n        let medicalTestRecord = data.medicalTestRecord;\n        let initData = {\n            medicalTestRecordID: medicalTestRecord.medicalTestRecordID ? medicalTestRecord.medicalTestRecordID : initValues.medicalTestRecordID,\n            medicalTestTypeID: medicalTestRecord.medicalTestTypeID ? medicalTestRecord.medicalTestTypeID : initValues.medicalTestTypeID,\n            measurementName: medicalTestRecord.measurementName ? medicalTestRecord.measurementName : initValues.measurementName,\n            measurementUnit: medicalTestRecord.measurementUnit ? medicalTestRecord.measurementUnit : initValues.measurementUnit,\n            rangeForm: medicalTestRecord.rangeForm ? medicalTestRecord.rangeForm : initValues.rangeForm,\n            rangeTo: medicalTestRecord.rangeTo ? medicalTestRecord.rangeTo : initValues.rangeTo,\n            status: medicalTestRecord.status ? medicalTestRecord.status : initValues.status,\n        };\n        setFormValues(initData);\n\n    }, [dispatch, data.medicalTestRecord]);\n\n    useEffect(() => {\n        return (() => {\n            removeStorageItem(Constants.STORAGE.SELECTED_MEDICAL_TEST_RECORD_ID);\n            dispatch(Actions.onFormReset());\n        })\n    }, []);\n\n    const onCustomValidation = (values) => {\n\n        let validate = customValidator(values, getValidations());\n        dispatch(Actions.onFormChange(\n            {\n                isValid: validate.isValid,\n                values: values\n            }));\n        return validate.errors;\n    };\n\n    return (\n        <>\n            <Formik\n                enableReinitialize={true}\n                initialValues={formValues}\n                onSubmit={(values, {setSubmitting}) => {\n                    setTimeout(() => {\n                        setSubmitting(false)\n                    }, 200)\n                }}\n                validateOnChange={true}\n                validate={(values) => {\n                    return onCustomValidation(values);\n                }}\n            >\n                {({errors, touched}) => {\n                    return (\n                        <Form>\n                            <CRow>\n\n                                <CCol sm=\"12\" md=\"6\" lg=\"3\">\n                                    <CFormGroup>\n                                        <CLabel htmlFor=\"\" className={'required'}>Medical Test Type</CLabel>\n                                        <Field name=\"medicalTestTypeID\"\n                                               className={getInputFieldClassNames(touched.status, errors.status)}\n                                        >\n                                            {({\n                                                  field, // { name, value, onChange, onBlur }\n                                                  form: {touched, errors}, // also values, setXXXX, handleXXXX, dirty, isValid, status, etc.\n                                                  meta,\n                                              }) => (\n\n                                                <CSelect custom name=\"medicalTestTypeID\" {...field}>\n                                                    {\n                                                        data &&\n                                                        getOptionsListByObjectListForCustomSelect(data.medicalTestTypes, \"testType\", \"testType\", \"medicalTestTypeID\", \"medicalTestTypeID\", true).map((item) => {\n                                                            return (\n\n                                                                <option key={item.key}\n                                                                        value={item.key}>{item.value}</option>\n                                                            );\n                                                        })\n                                                    }\n                                                </CSelect>\n                                            )}\n                                        </Field>\n\n                                    </CFormGroup>\n                                    <ErrorMessage\n                                        name=\"medicalTestTypeID\"\n                                        render={(msg) => <div\n                                            className={'formik-error-message'}>{msg}</div>}\n                                    />\n                                </CCol>\n\n                                <CCol sm=\"12\" md=\"6\" lg=\"3\">\n                                    <CFormGroup>\n                                        <CLabel htmlFor=\"measurementName\" className={'required'}>Measurement\n                                            Name</CLabel>\n\n                                        <Field\n                                            type=\"text\"\n                                            name=\"measurementName\"\n                                            placeholder={'Measurement Name'}\n                                            className={getInputFieldClassNames(touched.measurementName, errors.measurementName)}\n                                        />\n                                    </CFormGroup>\n\n                                    <ErrorMessage\n                                        name=\"measurementName\"\n                                        render={(msg) => <div\n                                            className={'formik-error-message'}>{msg}</div>}\n                                    />\n                                </CCol>\n\n                                <CCol sm=\"12\" md=\"6\" lg=\"2\">\n                                    <CFormGroup>\n                                        <CLabel htmlFor=\"status\" className={'required'}>Status</CLabel>\n\n                                        <Field name=\"status\"\n                                               className={getInputFieldClassNames(touched.status, errors.status)}\n                                        >\n                                            {({\n                                                  field, // { name, value, onChange, onBlur }\n                                                  form: {touched, errors}, // also values, setXXXX, handleXXXX, dirty, isValid, status, etc.\n                                                  meta,\n                                              }) => (\n\n                                                <CSelect custom name=\"status\" {...field}>\n                                                    {\n                                                        getCommonStatusOptions(false).map((item) => {\n                                                            return (\n                                                                <option key={item.key}\n                                                                        value={item.key}>{item.value}</option>\n                                                            );\n                                                        })\n                                                    }\n                                                </CSelect>\n                                            )}\n                                        </Field>\n                                    </CFormGroup>\n                                    <ErrorMessage\n                                        name=\"status\"\n                                        render={(msg) => <div\n                                            className={'formik-error-message'}>{msg}</div>}\n                                    />\n                                </CCol>\n                                \n                                <CCol sm=\"12\" md=\"6\" lg=\"3\">\n                                    <CFormGroup>\n                                        <CLabel htmlFor=\"measurementUnit\">Measurement\n                                            Units</CLabel>\n\n                                        <Field\n                                            type=\"text\"\n                                            name=\"measurementUnit\"\n                                            placeholder={'Measurement Unit'}\n                                            className={getInputFieldClassNames(touched.measurementUnit, errors.measurementUnit)}\n                                        />\n                                    </CFormGroup>\n                                </CCol>\n                                <CCol sm=\"12\" md=\"6\" lg=\"1\">\n                                    <CLabel >Add Unit</CLabel>\n                                    <CButton\n                                        onClick={() => {\n                                           console.log(\"ddd\")\n                                        }}\n                                        color=\"primary\" className=\"float-left\">Save</CButton>\n                                </CCol>\n                            </CRow>\n                        </Form>\n                    );\n                }}\n            </Formik>\n        </>\n    );\n};\n\nexport default MedicalTestRecordAddEditForm;"]},"metadata":{},"sourceType":"module"}