{"ast":null,"code":"import dataService from \"../../../services/dataService\";\nimport loginAppEndpoints from \"./login.api\";\nimport jwtService from '../../../services/auth/jwtService';\nimport _ from \"lodash\";\nimport history from '../../../../@history';\nimport * as CryptoJS from 'crypto-js';\nimport { clearAppLocalStorage } from \"../../../../utils/StorageUtils\";\nimport Constants from \"../../../../utils/Constants\";\nexport const LOGIN_ERROR = 'LOGIN_ERROR';\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_SET_USER = 'LOGIN_SET_USER';\nexport const USER_LOGGED_OUT = 'USER_LOGGED_OUT';\nexport const ADMIN_PASSWORD_RESET = 'ADMIN_PASSWORD_RESET';\nexport const ADMIN_EXPIRE_USER_CACHE = 'ADMIN_EXPIRE_USER_CACHE';\nexport function submitLogin(_ref) {\n  let {\n    userName,\n    password\n  } = _ref;\n  const request = dataService.post(loginAppEndpoints.login, {\n    username: userName,\n    password: password\n  });\n  return (dispatch, getState) => {\n    request.then(response => {\n      let user = _.cloneDeep(response.data);\n\n      delete user.token;\n      delete user.refreshToken;\n      jwtService.setSession(response.data.accessToken);\n      jwtService.setRefreshToken(response.data.refreshToken);\n      jwtService.setLoginUser(user);\n      Constants.LOGGED_IN_USER = user.user;\n      console.log(Constants.LOGGED_IN_USER);\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: user\n      });\n      jwtService.onLoginSuccess();\n    }).catch(error => {\n      Constants.LOGGED_IN_USER = null;\n      return dispatch({\n        type: LOGIN_ERROR,\n        payload: error\n      });\n    });\n  };\n}\nexport function changeAdminPassword(data) {\n  let oldPassword = CryptoJS.SHA1(data.oldPassword);\n  oldPassword = CryptoJS.enc.Base64.stringify(oldPassword);\n  const request = dataService.post(loginAppEndpoints.changeAdminUserPassword, { ...data,\n    oldPassword: oldPassword\n  });\n  return (dispatch, getState) => {\n    request.then(response => {\n      dispatch({\n        type: ADMIN_PASSWORD_RESET,\n        payload: 'SUCCESS'\n      });\n    });\n  };\n}\nexport async function expireUserCache() {\n  await dataService.post(loginAppEndpoints.expireUseCache);\n}\nexport function setLoginUser(user) {\n  return (dispatch, getState) => {\n    dispatch({\n      type: LOGIN_SET_USER,\n      payload: user\n    });\n  };\n}\nexport function userLogOut() {\n  return (dispatch, getState) => {\n    jwtService.logout();\n    clearAppLocalStorage(); // dispatch(setInitialSettings());\n\n    dispatch({\n      type: USER_LOGGED_OUT,\n      payload: null\n    });\n    history.push({\n      pathname: '/'\n    });\n  };\n}","map":{"version":3,"sources":["C:/Users/chamald/Desktop/Chamal/react/react-app/src/app/auth/store/actions/login.actions.js"],"names":["dataService","loginAppEndpoints","jwtService","_","history","CryptoJS","clearAppLocalStorage","Constants","LOGIN_ERROR","LOGIN_SUCCESS","LOGIN_SET_USER","USER_LOGGED_OUT","ADMIN_PASSWORD_RESET","ADMIN_EXPIRE_USER_CACHE","submitLogin","userName","password","request","post","login","username","dispatch","getState","then","response","user","cloneDeep","data","token","refreshToken","setSession","accessToken","setRefreshToken","setLoginUser","LOGGED_IN_USER","console","log","type","payload","onLoginSuccess","catch","error","changeAdminPassword","oldPassword","SHA1","enc","Base64","stringify","changeAdminUserPassword","expireUserCache","expireUseCache","userLogOut","logout","push","pathname"],"mappings":"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","sourcesContent":["import dataService from \"../../../services/dataService\";\nimport loginAppEndpoints from \"./login.api\";\nimport jwtService from '../../../services/auth/jwtService';\nimport _ from \"lodash\";\nimport history from '../../../../@history';\nimport * as CryptoJS from 'crypto-js';\nimport {clearAppLocalStorage} from \"../../../../utils/StorageUtils\";\nimport Constants from \"../../../../utils/Constants\";\n\nexport const LOGIN_ERROR = 'LOGIN_ERROR';\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\n\nexport const LOGIN_SET_USER = 'LOGIN_SET_USER';\n\nexport const USER_LOGGED_OUT = 'USER_LOGGED_OUT';\n\nexport const ADMIN_PASSWORD_RESET = 'ADMIN_PASSWORD_RESET';\n\nexport const ADMIN_EXPIRE_USER_CACHE = 'ADMIN_EXPIRE_USER_CACHE';\n\nexport function submitLogin({userName, password}) {\n\n    const request = dataService.post(loginAppEndpoints.login, {\n        username: userName,\n        password: password,\n    });\n\n    return (dispatch, getState) => {\n        request.then((response) => {\n                let user = _.cloneDeep(response.data);\n                delete user.token;\n                delete user.refreshToken;\n\n                jwtService.setSession(response.data.accessToken);\n                jwtService.setRefreshToken(response.data.refreshToken);\n                jwtService.setLoginUser(user);\n\n                Constants.LOGGED_IN_USER = user.user;\n\n                console.log(Constants.LOGGED_IN_USER);\n\n                dispatch({\n                    type: LOGIN_SUCCESS,\n                    payload: user\n                });\n\n                jwtService.onLoginSuccess();\n            }\n        ).catch(error => {\n            Constants.LOGGED_IN_USER = null;\n\n            return dispatch({\n                type: LOGIN_ERROR,\n                payload: error\n            });\n        });\n    };\n}\n\nexport function changeAdminPassword(data) {\n    let oldPassword = CryptoJS.SHA1(data.oldPassword);\n    oldPassword = CryptoJS.enc.Base64.stringify(oldPassword);\n\n    const request = dataService.post(loginAppEndpoints.changeAdminUserPassword, {\n        ...data,\n        oldPassword: oldPassword\n    });\n\n    return (dispatch, getState) => {\n        request.then((response) => {\n                dispatch({\n                    type: ADMIN_PASSWORD_RESET,\n                    payload: 'SUCCESS'\n                });\n            }\n        );\n    };\n}\n\n\nexport async function expireUserCache() {\n    await dataService.post(loginAppEndpoints.expireUseCache);\n}\n\n\nexport function setLoginUser(user) {\n    return (dispatch, getState) => {\n        dispatch({\n            type: LOGIN_SET_USER,\n            payload: user\n        });\n    };\n}\n\nexport function userLogOut() {\n    return (dispatch, getState) => {\n\n        jwtService.logout();\n\n        clearAppLocalStorage();\n\n        // dispatch(setInitialSettings());\n\n        dispatch({\n            type: USER_LOGGED_OUT,\n            payload: null\n        });\n\n        history.push({\n            pathname: '/'\n        });\n    };\n}\n"]},"metadata":{},"sourceType":"module"}