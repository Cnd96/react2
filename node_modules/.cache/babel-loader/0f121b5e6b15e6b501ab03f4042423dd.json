{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chamald\\\\Desktop\\\\Chamal\\\\react\\\\react-app\\\\src\\\\app\\\\views\\\\admin\\\\reports\\\\checkup\\\\components\\\\components\\\\subComponents\\\\CheckupReportGenerateForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { CButton, CCol, CFormGroup, CLabel, CRow } from \"@coreui/react\";\nimport { ErrorMessage, Field, Form, Formik } from \"formik\";\nimport FormikDatePicker from \"../../../../../../../common/FormikDatePicker\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as Actions from '../../store/actions/checkup.report.generate.actions';\nimport customValidator from \"../../../../../../../../utils/ValidationUtil\";\nimport { processMobileNumber } from \"../../../../../../../../utils/FormUtils\";\nimport PatientDetailsSelectionMenu from \"./PatientDetailsSelectionMenu\";\nimport Constants from \"../../../../../../../../utils/Constants\";\nimport CIcon from \"@coreui/icons-react\";\nimport { showErrorMessage } from \"../../../../../../../../utils/ToastUtil\";\nimport { toDate } from \"../../../../../../../../utils/HealthTrackerUtils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst downloadFile = (url, fileName) => {\n  const a = document.createElement(\"a\");\n  a.href = url;\n  a.download = fileName; // a.target = '_blank';\n\n  a.click();\n};\n\nconst createBlob = fileName => {\n  if (!_.isEmpty(fileName)) {\n    let fileURL = Constants.REPORT_BASE_URL + fileName;\n    downloadFile(fileURL, fileName);\n  }\n};\n\nconst getValidations = () => {\n  return {\n    checkupDateFromStr: {\n      required: {\n        message: 'Required'\n      }\n    },\n    checkupDateToStr: {\n      required: {\n        message: 'Required'\n      }\n    },\n    nic: {\n      maxLength: {\n        value: 12\n      },\n      nicLK: {\n        message: 'Invalid NIC'\n      }\n    },\n    contactNo: {\n      maxLength: {\n        value: 12\n      },\n      phone: {\n        message: 'Invalid Contact Number'\n      }\n    }\n  };\n};\n\nconst initData = {\n  checkupDateFromStr: '',\n  checkupDateToStr: '',\n  patientCode: '',\n  nic: '',\n  contactNo: '',\n  checkupCode: ''\n};\n\nconst CheckupReportGenerateForm = () => {\n  _s();\n\n  const [checkupForm, setCheckupForm] = useState(initData);\n  const dispatch = useDispatch();\n  const checkupReportData = useSelector(_ref => {\n    let {\n      checkupReport\n    } = _ref;\n    return checkupReport.checkupReport;\n  });\n\n  const onCustomValidation = values => {\n    if (name === 'contactNo' && value.length === 10) {\n      values.contactNo = processMobileNumber(value);\n    }\n\n    let validate = customValidator(values, getValidations());\n    dispatch(Actions.setSearchData({\n      isValid: validate.isValid,\n      values: values\n    }));\n    return validate.errors;\n  };\n\n  useEffect(() => {\n    return () => {\n      dispatch(Actions.onResetSearchData());\n    };\n  }, []);\n\n  const resetData = () => {\n    setCheckupForm(initData);\n    dispatch(Actions.onResetSearchData());\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      enableReinitialize: true,\n      initialValues: checkupForm,\n      onSubmit: (values, _ref2) => {\n        let {\n          setSubmitting\n        } = _ref2;\n        setTimeout(() => {\n          setSubmitting(false);\n        }, 200);\n      },\n      validateOnChange: true,\n      validate: values => {\n        return onCustomValidation(values);\n      },\n      children: _ref3 => {\n        let {\n          errors,\n          touched,\n          resetForm\n        } = _ref3;\n        return /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(CRow, {\n            children: [/*#__PURE__*/_jsxDEV(CCol, {\n              sm: \"12\",\n              md: \"6\",\n              lg: \"3\",\n              children: [/*#__PURE__*/_jsxDEV(CFormGroup, {\n                children: [/*#__PURE__*/_jsxDEV(CLabel, {\n                  htmlFor: \"checkupDateFromStr\",\n                  children: \"Checkup Date From *\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 111,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Field, {\n                  type: \"test\",\n                  name: \"checkupDateFromStr\",\n                  placeholder: 'checkup Date',\n                  component: FormikDatePicker\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 114,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                name: \"checkupDateFromStr\",\n                render: msg => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: 'formik-error-message',\n                  children: msg\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 125,\n                  columnNumber: 58\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(CCol, {\n              sm: \"12\",\n              md: \"6\",\n              lg: \"3\",\n              children: /*#__PURE__*/_jsxDEV(CFormGroup, {\n                children: [/*#__PURE__*/_jsxDEV(CLabel, {\n                  htmlFor: \"checkupDateToStr\",\n                  children: \"Checkup Date To *\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 133,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Field, {\n                  type: \"test\",\n                  name: \"checkupDateToStr\",\n                  placeholder: 'checkup Date',\n                  component: FormikDatePicker\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 135,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 132,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(CCol, {\n              sm: \"12\",\n              md: \"6\",\n              lg: \"3\",\n              children: /*#__PURE__*/_jsxDEV(CFormGroup, {\n                children: [/*#__PURE__*/_jsxDEV(CLabel, {\n                  htmlFor: \"checkupCode\",\n                  children: \"Checkup Code\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 149,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Field, {\n                  type: \"text\",\n                  name: \"checkupCode\",\n                  placeholder: 'Checkup Code',\n                  className: 'form-control'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 151,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 148,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(CCol, {\n              sm: \"12\",\n              md: \"6\",\n              lg: \"3\",\n              children: /*#__PURE__*/_jsxDEV(CFormGroup, {\n                children: [/*#__PURE__*/_jsxDEV(CLabel, {\n                  htmlFor: \"patientCode\",\n                  children: \"Patient Code\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 162,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Field, {\n                  type: \"text\",\n                  name: \"patientCode\",\n                  placeholder: 'Patient Code',\n                  className: 'form-control'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 164,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(CCol, {\n              sm: \"12\",\n              md: \"6\",\n              lg: \"3\",\n              children: [/*#__PURE__*/_jsxDEV(CFormGroup, {\n                children: [/*#__PURE__*/_jsxDEV(CLabel, {\n                  htmlFor: \"nic\",\n                  children: \"Patient NIC\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 176,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Field, {\n                  type: \"text\",\n                  name: \"nic\",\n                  placeholder: 'NIC',\n                  className: 'form-control'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 178,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 175,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                name: \"nic\",\n                render: msg => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: 'formik-error-message',\n                  children: msg\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 188,\n                  columnNumber: 58\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 186,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(CCol, {\n              sm: \"12\",\n              md: \"6\",\n              lg: \"3\",\n              children: [/*#__PURE__*/_jsxDEV(CFormGroup, {\n                children: [/*#__PURE__*/_jsxDEV(CLabel, {\n                  htmlFor: \"contactNo\",\n                  children: \"Contact No\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 196,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Field, {\n                  type: \"text\",\n                  name: \"contactNo\",\n                  placeholder: 'Contact No',\n                  className: 'form-control'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 198,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 195,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                name: \"contactNo\",\n                render: msg => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: 'formik-error-message',\n                  children: msg\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 208,\n                  columnNumber: 58\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 206,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(PatientDetailsSelectionMenu, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(CRow, {\n            children: /*#__PURE__*/_jsxDEV(CCol, {\n              sm: \"12\",\n              md: \"6\",\n              lg: \"3\",\n              children: [/*#__PURE__*/_jsxDEV(CButton, {\n                disabled: !checkupReportData.searchData.isValid,\n                onClick: () => {\n                  let searchRQ = checkupReportData.searchData.values ? checkupReportData.searchData.values : {};\n                  let searchObj = Object.assign({}, searchRQ, {\n                    includeSocialHabitData: checkupReportData.includeSocialHabitData,\n                    includeFamilyHistory: checkupReportData.includeFamilyHistory,\n                    includeDietaryHabits: checkupReportData.includeDietaryHabits,\n                    includePhysicalActivities: checkupReportData.includePhysicalActivities,\n                    includeInstruction: checkupReportData.includeInstruction\n                  });\n\n                  if (toDate(searchObj.checkupDateFromStr) > toDate(searchObj.checkupDateToStr)) {\n                    showErrorMessage(\"Invalid Date Range\");\n                  } else {\n                    dispatch(Actions.getCheckUpsDetailCSVReport(searchObj)).then(response => {\n                      let fileName = response.payload; // createBlob(fileName);          //this is for download the file from the public url\n\n                      dispatch(Actions.downloadCheckUpsByDateDetailCSVReport(fileName));\n                    });\n                  }\n                },\n                color: \"info\",\n                className: \"row-button-styles mr-2\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  children: /*#__PURE__*/_jsxDEV(CIcon, {\n                    size: 'lg',\n                    name: 'cil-arrow-thick-from-top',\n                    style: {\n                      marginRight: '4px'\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 246,\n                    columnNumber: 47\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 246,\n                  columnNumber: 41\n                }, this), \"Download Report\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 219,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(CButton, {\n                onClick: () => {\n                  resetData();\n                  resetForm();\n                },\n                color: \"warning\",\n                className: \"row-button-styles mr-2\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  children: /*#__PURE__*/_jsxDEV(CIcon, {\n                    size: 'lg',\n                    name: 'cil-sync',\n                    style: {\n                      marginRight: '4px'\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 258,\n                    columnNumber: 47\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 258,\n                  columnNumber: 41\n                }, this), \"Reset From\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 251,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 25\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(CheckupReportGenerateForm, \"N45nOGZ2wc8LD37cDe1VtiKOBFI=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = CheckupReportGenerateForm;\nexport default CheckupReportGenerateForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckupReportGenerateForm\");","map":{"version":3,"sources":["C:/Users/chamald/Desktop/Chamal/react/react-app/src/app/views/admin/reports/checkup/components/components/subComponents/CheckupReportGenerateForm.js"],"names":["React","useEffect","useState","CButton","CCol","CFormGroup","CLabel","CRow","ErrorMessage","Field","Form","Formik","FormikDatePicker","useDispatch","useSelector","Actions","customValidator","processMobileNumber","PatientDetailsSelectionMenu","Constants","CIcon","showErrorMessage","toDate","downloadFile","url","fileName","a","document","createElement","href","download","click","createBlob","_","isEmpty","fileURL","REPORT_BASE_URL","getValidations","checkupDateFromStr","required","message","checkupDateToStr","nic","maxLength","value","nicLK","contactNo","phone","initData","patientCode","checkupCode","CheckupReportGenerateForm","checkupForm","setCheckupForm","dispatch","checkupReportData","checkupReport","onCustomValidation","values","name","length","validate","setSearchData","isValid","errors","onResetSearchData","resetData","setSubmitting","setTimeout","touched","resetForm","msg","searchData","searchRQ","searchObj","Object","assign","includeSocialHabitData","includeFamilyHistory","includeDietaryHabits","includePhysicalActivities","includeInstruction","getCheckUpsDetailCSVReport","then","response","payload","downloadCheckUpsByDateDetailCSVReport","marginRight"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {CButton, CCol, CFormGroup, CLabel, CRow} from \"@coreui/react\";\nimport {ErrorMessage, Field, Form, Formik} from \"formik\";\nimport FormikDatePicker from \"../../../../../../../common/FormikDatePicker\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport * as Actions from '../../store/actions/checkup.report.generate.actions'\nimport customValidator from \"../../../../../../../../utils/ValidationUtil\";\nimport {processMobileNumber} from \"../../../../../../../../utils/FormUtils\";\nimport PatientDetailsSelectionMenu from \"./PatientDetailsSelectionMenu\";\nimport Constants from \"../../../../../../../../utils/Constants\";\nimport CIcon from \"@coreui/icons-react\";\nimport {showErrorMessage} from \"../../../../../../../../utils/ToastUtil\";\nimport {toDate} from \"../../../../../../../../utils/HealthTrackerUtils\"\n\nconst downloadFile = (url, fileName) => {\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = fileName;\n    // a.target = '_blank';\n    a.click();\n};\n\nconst createBlob = (fileName) => {\n    if (!_.isEmpty(fileName)) {\n        let fileURL = Constants.REPORT_BASE_URL + fileName;\n        downloadFile(fileURL, fileName);\n    }\n};\n\n\nconst getValidations = () => {\n    return {\n        checkupDateFromStr: {\n            required: {message: 'Required'},\n        },\n        checkupDateToStr: {\n            required: {message: 'Required'},\n        },\n        nic: {\n            maxLength: {value: 12},\n            nicLK: {message: 'Invalid NIC'}\n        },\n        contactNo: {\n            maxLength: {value: 12},\n            phone: {message: 'Invalid Contact Number'}\n        },\n    };\n};\n\nconst initData = {\n    checkupDateFromStr: '',\n    checkupDateToStr: '',\n    patientCode: '',\n    nic: '',\n    contactNo: '',\n    checkupCode: ''\n};\n\nconst CheckupReportGenerateForm = () => {\n\n    const [checkupForm, setCheckupForm] = useState(initData);\n    const dispatch = useDispatch();\n    const checkupReportData = useSelector(({checkupReport}) => checkupReport.checkupReport);\n\n    const onCustomValidation = (values) => {\n        if (name === 'contactNo' && value.length === 10) {\n            values.contactNo = processMobileNumber(value);\n        }\n        let validate = customValidator(values, getValidations());\n        dispatch(Actions.setSearchData({\n            isValid: validate.isValid,\n            values: values\n        }));\n        return validate.errors;\n    };\n\n    useEffect(() => {\n        return (() => {\n            dispatch(Actions.onResetSearchData());\n        })\n    }, []);\n\n    const resetData = () => {\n        setCheckupForm(initData);\n        dispatch(Actions.onResetSearchData());\n    };\n\n    return (\n        <>\n\n            <Formik\n                enableReinitialize={true}\n                initialValues={checkupForm}\n                onSubmit={(values, {setSubmitting}) => {\n                    setTimeout(() => {\n                        setSubmitting(false)\n                    }, 200)\n                }}\n                validateOnChange={true}\n                validate={(values) => {\n                    return onCustomValidation(values);\n                }}\n            >\n                {({errors, touched, resetForm}) => {\n                    return (\n                        <Form>\n                            <CRow>\n\n                                <CCol sm=\"12\" md=\"6\" lg=\"3\">\n                                    <CFormGroup>\n                                        <CLabel htmlFor=\"checkupDateFromStr\">Checkup Date\n                                            From *</CLabel>\n\n                                        <Field\n                                            type=\"test\"\n                                            name=\"checkupDateFromStr\"\n                                            placeholder={'checkup Date'}\n                                            component={FormikDatePicker}\n                                        />\n\n                                    </CFormGroup>\n\n                                    <ErrorMessage\n                                        name=\"checkupDateFromStr\"\n                                        render={(msg) => <div\n                                            className={'formik-error-message'}>{msg}</div>}\n                                    />\n\n                                </CCol>\n\n                                <CCol sm=\"12\" md=\"6\" lg=\"3\">\n                                    <CFormGroup>\n                                        <CLabel htmlFor=\"checkupDateToStr\">Checkup Date To *</CLabel>\n\n                                        <Field\n                                            type=\"test\"\n                                            name=\"checkupDateToStr\"\n                                            placeholder={'checkup Date'}\n                                            component={FormikDatePicker}\n                                        />\n\n\n                                    </CFormGroup>\n                                </CCol>\n\n\n                                <CCol sm=\"12\" md=\"6\" lg=\"3\">\n                                    <CFormGroup>\n                                        <CLabel htmlFor=\"checkupCode\">Checkup Code</CLabel>\n\n                                        <Field\n                                            type=\"text\"\n                                            name=\"checkupCode\"\n                                            placeholder={'Checkup Code'}\n                                            className={'form-control'}\n                                        />\n                                    </CFormGroup>\n                                </CCol>\n\n                                <CCol sm=\"12\" md=\"6\" lg=\"3\">\n                                    <CFormGroup>\n                                        <CLabel htmlFor=\"patientCode\">Patient Code</CLabel>\n\n                                        <Field\n                                            type=\"text\"\n                                            name=\"patientCode\"\n                                            placeholder={'Patient Code'}\n                                            className={'form-control'}\n                                        />\n                                    </CFormGroup>\n                                </CCol>\n\n\n                                <CCol sm=\"12\" md=\"6\" lg=\"3\">\n                                    <CFormGroup>\n                                        <CLabel htmlFor=\"nic\">Patient NIC</CLabel>\n\n                                        <Field\n                                            type=\"text\"\n                                            name=\"nic\"\n                                            placeholder={'NIC'}\n                                            className={'form-control'}\n                                        />\n                                    </CFormGroup>\n\n                                    <ErrorMessage\n                                        name=\"nic\"\n                                        render={(msg) => <div\n                                            className={'formik-error-message'}>{msg}</div>}\n                                    />\n\n                                </CCol>\n\n                                <CCol sm=\"12\" md=\"6\" lg=\"3\">\n                                    <CFormGroup>\n                                        <CLabel htmlFor=\"contactNo\">Contact No</CLabel>\n\n                                        <Field\n                                            type=\"text\"\n                                            name=\"contactNo\"\n                                            placeholder={'Contact No'}\n                                            className={'form-control'}\n                                        />\n                                    </CFormGroup>\n\n                                    <ErrorMessage\n                                        name=\"contactNo\"\n                                        render={(msg) => <div\n                                            className={'formik-error-message'}>{msg}</div>}\n                                    />\n                                </CCol>\n                            </CRow>\n\n                            <PatientDetailsSelectionMenu/>\n\n                            <CRow>\n\n                                <CCol sm=\"12\" md=\"6\" lg=\"3\">\n                                    <CButton\n                                        disabled={!checkupReportData.searchData.isValid}\n                                        onClick={() => {\n                                            let searchRQ = checkupReportData.searchData.values ? checkupReportData.searchData.values : {};\n                                            let searchObj = Object.assign({}, searchRQ, {\n                                                includeSocialHabitData: checkupReportData.includeSocialHabitData,\n                                                includeFamilyHistory: checkupReportData.includeFamilyHistory,\n                                                includeDietaryHabits: checkupReportData.includeDietaryHabits,\n                                                includePhysicalActivities: checkupReportData.includePhysicalActivities,\n                                                includeInstruction: checkupReportData.includeInstruction\n                                            });\n\n                                            if (toDate(searchObj.checkupDateFromStr) > toDate(searchObj.checkupDateToStr)) {\n                                                showErrorMessage(\"Invalid Date Range\");\n                                            } else {\n                                                dispatch(Actions.getCheckUpsDetailCSVReport(searchObj)).then(response => {\n                                                    let fileName = response.payload;\n                                                    // createBlob(fileName);          //this is for download the file from the public url\n                                                    dispatch(Actions.downloadCheckUpsByDateDetailCSVReport(fileName));\n                                                });\n                                            }\n\n                                        }}\n\n\n                                        color=\"info\"\n                                        className=\"row-button-styles mr-2\">\n                                        <span><CIcon size={'lg'} name={'cil-arrow-thick-from-top'}\n                                                     style={{marginRight: '4px'}}/></span>\n\n                                        Download Report</CButton>\n\n                                    <CButton\n                                        onClick={() => {\n                                            resetData();\n                                            resetForm();\n                                        }}\n                                        color=\"warning\"\n                                        className=\"row-button-styles mr-2\">\n                                        <span><CIcon size={'lg'} name={'cil-sync'} style={{marginRight: '4px'}}/></span>\n\n                                        Reset From\n                                    </CButton>\n\n                                </CCol>\n                            </CRow>\n                        </Form>\n                    );\n                }}\n            </Formik>\n        </>\n    );\n};\n\nexport default CheckupReportGenerateForm;\n"]},"metadata":{},"sourceType":"module"}