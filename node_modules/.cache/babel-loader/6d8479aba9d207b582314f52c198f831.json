{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chamald\\\\Desktop\\\\Chamal\\\\react\\\\react-app\\\\src\\\\app\\\\views\\\\admin\\\\config\\\\physicalActivityCategories\\\\add-edit\\\\components\\\\PhysicalActivityCategoryAddEditFrom.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Constants from \"../../../../../../../utils/Constants\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { removeStorageItem } from \"../../../../../../../utils/StorageUtils\";\nimport * as Actions from \"../../store/actions\";\nimport customValidator from \"../../../../../../../utils/ValidationUtil\";\nimport { ErrorMessage, Field, Form, Formik } from \"formik\";\nimport { CCol, CFormGroup, CLabel, CRow, CSelect } from \"@coreui/react\";\nimport { getCommonStatusOptions, getInputFieldClassNames } from \"../../../../../../../utils/FormUtils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst initValues = {\n  physicalActivityCategoryID: '',\n  categoryName: '',\n  description: '',\n  status: Constants.STATUS_CONST.ACT\n};\n\nconst getValidations = () => {\n  return {\n    categoryName: {\n      required: {\n        message: 'Required'\n      }\n    },\n    description: {\n      maxLength: {\n        value: 255\n      }\n    }\n  };\n};\n\nconst PhysicalActivityCategoryAddEditFrom = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const [formValues, setFormValues] = useState(initValues);\n  const data = useSelector(_ref => {\n    let {\n      physicalActivityCategory\n    } = _ref;\n    return physicalActivityCategory.physicalActivitiesCategoryAddEdit;\n  });\n  useEffect(() => {\n    let physicalActivityCategory = data.physicalActivityCategory;\n    let initData = {\n      physicalActivityCategoryID: physicalActivityCategory.physicalActivityCategoryID ? physicalActivityCategory.physicalActivityCategoryID : initValues.physicalActivityCategoryID,\n      categoryName: physicalActivityCategory.categoryName ? physicalActivityCategory.categoryName : initValues.categoryName,\n      description: physicalActivityCategory.description ? physicalActivityCategory.description : initValues.description,\n      status: physicalActivityCategory.status ? physicalActivityCategory.status : initValues.status\n    };\n    setFormValues(initData);\n  }, [dispatch, data.physicalActivityCategory]);\n  useEffect(() => {\n    return () => {\n      removeStorageItem(Constants.STORAGE.SELECTED_DIETARY_HABIT_CATEGORY_ID);\n      dispatch(Actions.onFormReset());\n    };\n  }, []);\n\n  const onCustomValidation = values => {\n    let validate = customValidator(values, getValidations());\n    dispatch(Actions.onFormChange({\n      isValid: validate.isValid,\n      values: values\n    }));\n    return validate.errors;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      enableReinitialize: true,\n      initialValues: formValues,\n      onSubmit: (values, _ref2) => {\n        let {\n          setSubmitting\n        } = _ref2;\n        setTimeout(() => {\n          setSubmitting(false);\n        }, 200);\n      },\n      validateOnChange: true,\n      validate: values => {\n        return onCustomValidation(values);\n      },\n      children: _ref3 => {\n        let {\n          errors,\n          touched\n        } = _ref3;\n        return /*#__PURE__*/_jsxDEV(Form, {\n          children: /*#__PURE__*/_jsxDEV(CRow, {\n            children: [/*#__PURE__*/_jsxDEV(CCol, {\n              sm: \"12\",\n              md: \"6\",\n              lg: \"3\",\n              children: [/*#__PURE__*/_jsxDEV(CFormGroup, {\n                children: [/*#__PURE__*/_jsxDEV(CLabel, {\n                  htmlFor: \"categoryName\",\n                  className: 'required',\n                  children: \"Activity Category\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 87,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Field, {\n                  type: \"text\",\n                  name: \"categoryName\",\n                  placeholder: 'Activity Category',\n                  className: getInputFieldClassNames(touched.categoryName, errors.categoryName)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 89,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 86,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                name: \"categoryName\",\n                render: msg => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: 'formik-error-message',\n                  children: msg\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 99,\n                  columnNumber: 58\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(CCol, {\n              sm: \"12\",\n              md: \"6\",\n              lg: \"3\",\n              children: [/*#__PURE__*/_jsxDEV(CFormGroup, {\n                children: [/*#__PURE__*/_jsxDEV(CLabel, {\n                  htmlFor: \"description\",\n                  children: \"Description\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 106,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Field, {\n                  type: \"text\",\n                  name: \"description\",\n                  placeholder: 'Description',\n                  className: getInputFieldClassNames(touched.description, errors.description)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 108,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 105,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                name: \"description\",\n                render: msg => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: 'formik-error-message',\n                  children: msg\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 118,\n                  columnNumber: 58\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(CCol, {\n              sm: \"12\",\n              md: \"6\",\n              lg: \"3\",\n              children: [/*#__PURE__*/_jsxDEV(CFormGroup, {\n                children: [/*#__PURE__*/_jsxDEV(CLabel, {\n                  htmlFor: \"status\",\n                  className: 'required',\n                  children: \"Status\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 126,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Field, {\n                  name: \"status\",\n                  className: getInputFieldClassNames(touched.status, errors.status),\n                  children: _ref4 => {\n                    let {\n                      field,\n                      // { name, value, onChange, onBlur }\n                      form: {\n                        touched,\n                        errors\n                      },\n                      // also values, setXXXX, handleXXXX, dirty, isValid, status, etc.\n                      meta\n                    } = _ref4;\n                    return /*#__PURE__*/_jsxDEV(CSelect, {\n                      custom: true,\n                      name: \"status\",\n                      ...field,\n                      children: getCommonStatusOptions(false).map(item => {\n                        return /*#__PURE__*/_jsxDEV(\"option\", {\n                          value: item.key,\n                          children: item.value\n                        }, item.key, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 141,\n                          columnNumber: 65\n                        }, this);\n                      })\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 137,\n                      columnNumber: 49\n                    }, this);\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 128,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                name: \"status\",\n                render: msg => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: 'formik-error-message',\n                  children: msg\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 152,\n                  columnNumber: 58\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 150,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 25\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(PhysicalActivityCategoryAddEditFrom, \"S3woDSqtEJJajHJBMG9tCQULSmQ=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = PhysicalActivityCategoryAddEditFrom;\nexport default PhysicalActivityCategoryAddEditFrom;\n\nvar _c;\n\n$RefreshReg$(_c, \"PhysicalActivityCategoryAddEditFrom\");","map":{"version":3,"sources":["C:/Users/chamald/Desktop/Chamal/react/react-app/src/app/views/admin/config/physicalActivityCategories/add-edit/components/PhysicalActivityCategoryAddEditFrom.js"],"names":["React","useEffect","useState","Constants","useDispatch","useSelector","removeStorageItem","Actions","customValidator","ErrorMessage","Field","Form","Formik","CCol","CFormGroup","CLabel","CRow","CSelect","getCommonStatusOptions","getInputFieldClassNames","initValues","physicalActivityCategoryID","categoryName","description","status","STATUS_CONST","ACT","getValidations","required","message","maxLength","value","PhysicalActivityCategoryAddEditFrom","dispatch","formValues","setFormValues","data","physicalActivityCategory","physicalActivitiesCategoryAddEdit","initData","STORAGE","SELECTED_DIETARY_HABIT_CATEGORY_ID","onFormReset","onCustomValidation","values","validate","onFormChange","isValid","errors","setSubmitting","setTimeout","touched","msg","field","form","meta","map","item","key"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport Constants from \"../../../../../../../utils/Constants\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {removeStorageItem} from \"../../../../../../../utils/StorageUtils\";\nimport * as Actions from \"../../store/actions\";\nimport customValidator from \"../../../../../../../utils/ValidationUtil\";\nimport {ErrorMessage, Field, Form, Formik} from \"formik\";\nimport {CCol, CFormGroup, CLabel, CRow, CSelect} from \"@coreui/react\";\nimport {getCommonStatusOptions, getInputFieldClassNames} from \"../../../../../../../utils/FormUtils\";\n\nconst initValues = {\n    physicalActivityCategoryID: '',\n    categoryName: '',\n    description: '',\n    status: Constants.STATUS_CONST.ACT,\n};\n\nconst getValidations = () => {\n    return {\n        categoryName: {\n            required: {message: 'Required'},\n        },\n\n        description: {\n            maxLength: {value: 255}\n        }\n    };\n};\n\nconst PhysicalActivityCategoryAddEditFrom = () => {\n    const dispatch = useDispatch();\n    const [formValues, setFormValues] = useState(initValues);\n    const data = useSelector(({physicalActivityCategory}) => physicalActivityCategory.physicalActivitiesCategoryAddEdit);\n\n    useEffect(() => {\n        let physicalActivityCategory = data.physicalActivityCategory;\n        let initData = {\n            physicalActivityCategoryID: physicalActivityCategory.physicalActivityCategoryID ? physicalActivityCategory.physicalActivityCategoryID : initValues.physicalActivityCategoryID,\n            categoryName: physicalActivityCategory.categoryName ? physicalActivityCategory.categoryName : initValues.categoryName,\n            description: physicalActivityCategory.description ? physicalActivityCategory.description : initValues.description,\n            status: physicalActivityCategory.status ? physicalActivityCategory.status : initValues.status,\n        };\n        setFormValues(initData);\n\n    }, [dispatch, data.physicalActivityCategory]);\n\n    useEffect(() => {\n        return (() => {\n            removeStorageItem(Constants.STORAGE.SELECTED_DIETARY_HABIT_CATEGORY_ID);\n            dispatch(Actions.onFormReset());\n        })\n    }, []);\n\n    const onCustomValidation = (values) => {\n\n        let validate = customValidator(values, getValidations());\n        dispatch(Actions.onFormChange(\n            {\n                isValid: validate.isValid,\n                values: values\n            }));\n        return validate.errors;\n    };\n\n    return (\n        <>\n            <Formik\n                enableReinitialize={true}\n                initialValues={formValues}\n                onSubmit={(values, {setSubmitting}) => {\n                    setTimeout(() => {\n                        setSubmitting(false)\n                    }, 200)\n                }}\n                validateOnChange={true}\n                validate={(values) => {\n                    return onCustomValidation(values);\n                }}\n            >\n                {({errors, touched}) => {\n                    return (\n                        <Form>\n                            <CRow>\n\n                                <CCol sm=\"12\" md=\"6\" lg=\"3\">\n                                    <CFormGroup>\n                                        <CLabel htmlFor=\"categoryName\" className={'required'}>Activity Category</CLabel>\n\n                                        <Field\n                                            type=\"text\"\n                                            name=\"categoryName\"\n                                            placeholder={'Activity Category'}\n                                            className={getInputFieldClassNames(touched.categoryName, errors.categoryName)}\n                                        />\n                                    </CFormGroup>\n\n                                    <ErrorMessage\n                                        name=\"categoryName\"\n                                        render={(msg) => <div\n                                            className={'formik-error-message'}>{msg}</div>}\n                                    />\n                                </CCol>\n\n                                <CCol sm=\"12\" md=\"6\" lg=\"3\">\n                                    <CFormGroup>\n                                        <CLabel htmlFor=\"description\">Description</CLabel>\n\n                                        <Field\n                                            type=\"text\"\n                                            name=\"description\"\n                                            placeholder={'Description'}\n                                            className={getInputFieldClassNames(touched.description, errors.description)}\n                                        />\n                                    </CFormGroup>\n\n                                    <ErrorMessage\n                                        name=\"description\"\n                                        render={(msg) => <div\n                                            className={'formik-error-message'}>{msg}</div>}\n                                    />\n                                </CCol>\n\n                                <CCol sm=\"12\" md=\"6\" lg=\"3\">\n\n                                    <CFormGroup>\n                                        <CLabel htmlFor=\"status\" className={'required'}>Status</CLabel>\n\n                                        <Field name=\"status\"\n                                               className={getInputFieldClassNames(touched.status, errors.status)}\n                                        >\n                                            {({\n                                                  field, // { name, value, onChange, onBlur }\n                                                  form: {touched, errors}, // also values, setXXXX, handleXXXX, dirty, isValid, status, etc.\n                                                  meta,\n                                              }) => (\n\n                                                <CSelect custom name=\"status\" {...field}>\n                                                    {\n                                                        getCommonStatusOptions(false).map((item) => {\n                                                            return (\n                                                                <option key={item.key}\n                                                                        value={item.key}>{item.value}</option>\n                                                            );\n                                                        })\n                                                    }\n                                                </CSelect>\n                                            )}\n                                        </Field>\n                                    </CFormGroup>\n                                    <ErrorMessage\n                                        name=\"status\"\n                                        render={(msg) => <div\n                                            className={'formik-error-message'}>{msg}</div>}\n                                    />\n                                </CCol>\n\n                            </CRow>\n                        </Form>\n                    );\n                }}\n            </Formik>\n        </>\n    );\n};\n\nexport default PhysicalActivityCategoryAddEditFrom;"]},"metadata":{},"sourceType":"module"}