{"ast":null,"code":"import { GET_PHYSICAL_ACTIVITIES_CATEGORIES, ON_CHECKUP_SELECT_PHYSICAL_ACTIVITIES, ON_RESET_CHECKUP_PHYSICAL_ACTIVITIES, ON_SET_CHECKUP_PHYSICAL_ACTIVITY_IDS } from \"../actions/select.physical.activities.actions\";\nimport * as _ from \"lodash\";\nconst initialState = {\n  physicalActivityCategories: [],\n  physicalActivityIDs: {},\n  allPhysicalActivityIds: [],\n  currentIDs: [],\n  prevPhysicalActivityIds: []\n};\n\nconst selectPhysicalActivityReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case GET_PHYSICAL_ACTIVITIES_CATEGORIES:\n      {\n        let allPhysicalActivitiesIDs = [];\n        action.payload.forEach(element => {\n          element.physicalActivities.forEach(x => {\n            allPhysicalActivitiesIDs.push(x.physicalActivityID);\n          });\n        });\n        return { ...state,\n          physicalActivityCategories: action.payload,\n          allPhysicalActivityIds: allPhysicalActivitiesIDs\n        };\n      }\n\n    case ON_CHECKUP_SELECT_PHYSICAL_ACTIVITIES:\n      {\n        let obj = _.cloneDeep(state.physicalActivityIDs);\n\n        if (action.payload.physicalActivityID) {\n          obj = Object.assign(obj, {\n            [action.payload.physicalActivityCategoryID]: action.payload.physicalActivityID\n          });\n        }\n\n        return { ...state,\n          physicalActivityIDs: obj,\n          currentIDs: Object.values(obj)\n        };\n      }\n\n    case ON_SET_CHECKUP_PHYSICAL_ACTIVITY_IDS:\n      {\n        let obj = Object.values(action.payload);\n        return { ...state,\n          prevPhysicalActivityIds: obj,\n          currentIDs: obj,\n          physicalActivityIDs: action.payload\n        };\n      }\n\n    case ON_RESET_CHECKUP_PHYSICAL_ACTIVITIES:\n      {\n        return { ...state,\n          currentIDs: [],\n          prevPhysicalActivityIds: [],\n          physicalActivityIDs: {}\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default selectPhysicalActivityReducer;","map":{"version":3,"sources":["C:/Users/chamald/Desktop/Chamal/react/react-app/src/app/views/admin/patient/newPatient/stepper/stepComponents/selectPhysicalActivities/store/reducers/select.physical.activities.reducer.js"],"names":["GET_PHYSICAL_ACTIVITIES_CATEGORIES","ON_CHECKUP_SELECT_PHYSICAL_ACTIVITIES","ON_RESET_CHECKUP_PHYSICAL_ACTIVITIES","ON_SET_CHECKUP_PHYSICAL_ACTIVITY_IDS","_","initialState","physicalActivityCategories","physicalActivityIDs","allPhysicalActivityIds","currentIDs","prevPhysicalActivityIds","selectPhysicalActivityReducer","state","action","type","allPhysicalActivitiesIDs","payload","forEach","element","physicalActivities","x","push","physicalActivityID","obj","cloneDeep","Object","assign","physicalActivityCategoryID","values"],"mappings":"AAAA,SACIA,kCADJ,EAEIC,qCAFJ,EAGIC,oCAHJ,EAIIC,oCAJJ,QAKO,+CALP;AAMA,OAAO,KAAKC,CAAZ,MAAmB,QAAnB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,0BAA0B,EAAE,EADX;AAEjBC,EAAAA,mBAAmB,EAAE,EAFJ;AAGjBC,EAAAA,sBAAsB,EAAE,EAHP;AAIjBC,EAAAA,UAAU,EAAE,EAJK;AAKjBC,EAAAA,uBAAuB,EAAE;AALR,CAArB;;AAQA,MAAMC,6BAA6B,GAAG,YAAwC;AAAA,MAA9BC,KAA8B,uEAAtBP,YAAsB;AAAA,MAARQ,MAAQ;;AAE1E,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKd,kCAAL;AAA0C;AACtC,YAAIe,wBAAwB,GAAG,EAA/B;AAEAF,QAAAA,MAAM,CAACG,OAAP,CAAeC,OAAf,CAAuBC,OAAO,IAAI;AAC9BA,UAAAA,OAAO,CAACC,kBAAR,CAA2BF,OAA3B,CACIG,CAAC,IAAI;AACDL,YAAAA,wBAAwB,CAACM,IAAzB,CAA8BD,CAAC,CAACE,kBAAhC;AACH,WAHL;AAKH,SAND;AAQA,eAAO,EACH,GAAGV,KADA;AAEHN,UAAAA,0BAA0B,EAAEO,MAAM,CAACG,OAFhC;AAGHR,UAAAA,sBAAsB,EAAEO;AAHrB,SAAP;AAKH;;AAED,SAAKd,qCAAL;AAA6C;AACzC,YAAIsB,GAAG,GAAGnB,CAAC,CAACoB,SAAF,CAAYZ,KAAK,CAACL,mBAAlB,CAAV;;AACA,YAAIM,MAAM,CAACG,OAAP,CAAeM,kBAAnB,EAAuC;AACnCC,UAAAA,GAAG,GAAGE,MAAM,CAACC,MAAP,CAAcH,GAAd,EAAmB;AAAC,aAACV,MAAM,CAACG,OAAP,CAAeW,0BAAhB,GAA6Cd,MAAM,CAACG,OAAP,CAAeM;AAA7D,WAAnB,CAAN;AACH;;AACD,eAAO,EACH,GAAGV,KADA;AAEHL,UAAAA,mBAAmB,EAAEgB,GAFlB;AAGHd,UAAAA,UAAU,EAAEgB,MAAM,CAACG,MAAP,CAAcL,GAAd;AAHT,SAAP;AAKH;;AAED,SAAKpB,oCAAL;AAA4C;AACxC,YAAIoB,GAAG,GAAGE,MAAM,CAACG,MAAP,CAAcf,MAAM,CAACG,OAArB,CAAV;AACA,eAAO,EACH,GAAGJ,KADA;AAEHF,UAAAA,uBAAuB,EAAEa,GAFtB;AAGHd,UAAAA,UAAU,EAAEc,GAHT;AAIHhB,UAAAA,mBAAmB,EAAEM,MAAM,CAACG;AAJzB,SAAP;AAMH;;AAED,SAAKd,oCAAL;AAA4C;AACxC,eAAO,EACH,GAAGU,KADA;AAEHH,UAAAA,UAAU,EAAE,EAFT;AAGHC,UAAAA,uBAAuB,EAAE,EAHtB;AAIHH,UAAAA,mBAAmB,EAAE;AAJlB,SAAP;AAMH;;AAED;AACI,aAAOK,KAAP;AAnDR;AAqDH,CAvDD;;AAyDA,eAAeD,6BAAf","sourcesContent":["import {\n    GET_PHYSICAL_ACTIVITIES_CATEGORIES,\n    ON_CHECKUP_SELECT_PHYSICAL_ACTIVITIES,\n    ON_RESET_CHECKUP_PHYSICAL_ACTIVITIES,\n    ON_SET_CHECKUP_PHYSICAL_ACTIVITY_IDS,\n} from \"../actions/select.physical.activities.actions\";\nimport * as _ from \"lodash\";\n\nconst initialState = {\n    physicalActivityCategories: [],\n    physicalActivityIDs: {},\n    allPhysicalActivityIds: [],\n    currentIDs: [],\n    prevPhysicalActivityIds: []\n};\n\nconst selectPhysicalActivityReducer = function (state = initialState, action) {\n\n    switch (action.type) {\n        case GET_PHYSICAL_ACTIVITIES_CATEGORIES : {\n            let allPhysicalActivitiesIDs = [];\n\n            action.payload.forEach(element => {\n                element.physicalActivities.forEach(\n                    x => {\n                        allPhysicalActivitiesIDs.push(x.physicalActivityID)\n                    }\n                )\n            });\n\n            return {\n                ...state,\n                physicalActivityCategories: action.payload,\n                allPhysicalActivityIds: allPhysicalActivitiesIDs\n            }\n        }\n\n        case ON_CHECKUP_SELECT_PHYSICAL_ACTIVITIES : {\n            let obj = _.cloneDeep(state.physicalActivityIDs);\n            if (action.payload.physicalActivityID) {\n                obj = Object.assign(obj, {[action.payload.physicalActivityCategoryID]: action.payload.physicalActivityID});\n            }\n            return {\n                ...state,\n                physicalActivityIDs: obj,\n                currentIDs: Object.values(obj)\n            }\n        }\n\n        case ON_SET_CHECKUP_PHYSICAL_ACTIVITY_IDS : {\n            let obj = Object.values(action.payload);\n            return {\n                ...state,\n                prevPhysicalActivityIds: obj,\n                currentIDs: obj,\n                physicalActivityIDs: action.payload,\n            }\n        }\n\n        case ON_RESET_CHECKUP_PHYSICAL_ACTIVITIES : {\n            return {\n                ...state,\n                currentIDs: [],\n                prevPhysicalActivityIds: [],\n                physicalActivityIDs: {},\n            }\n        }\n\n        default :\n            return state;\n    }\n};\n\nexport default selectPhysicalActivityReducer;\n\n"]},"metadata":{},"sourceType":"module"}