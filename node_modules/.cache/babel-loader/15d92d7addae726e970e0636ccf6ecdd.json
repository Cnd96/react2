{"ast":null,"code":"import dataService from \"../../../../../../services/dataService\";\nimport medicineAppEndpoints from \"./medicine.app.endpoints\";\nexport const GET_MEDICINE = '[MEDICINE ADD EDIT] GET_MEDICINE';\nexport const ON_ADD_EDIT_FORM_CHANGE = '[MEDICINE ADD EDIT] ON_ADD_EDIT_FORM_CHANGE';\nexport const ON_SAVE_UPDATE = '[MEDICINE ADD EDIT] ON_SAVE_UPDATE';\nexport const ON_RESET = '[MEDICINE ADD EDIT] ON_RESET';\nexport const ON_FORM_RESET = '[MEDICINE ADD EDIT] ON_FORM_RESET';\nexport function getMedicineDTOByID(medicalTestTypeID) {\n  let endpoint = Object.assign({}, medicineAppEndpoints.getMedicineDTOByID);\n  endpoint.url = endpoint.url + '/' + medicalTestTypeID;\n  const request = dataService.get(endpoint);\n  request.then(response => {\n    console.log(response);\n  });\n  return (dispatch, getState) => {\n    request.then(response => dispatch({\n      type: GET_MEDICINE,\n      payload: response.data.result\n    }));\n  };\n}\nexport function onFormChange(data) {\n  return (dispatch, getState) => {\n    dispatch({\n      type: ON_ADD_EDIT_FORM_CHANGE,\n      payload: data\n    });\n  };\n}\nexport function reset() {\n  return (dispatch, getState) => {\n    dispatch({\n      type: ON_RESET,\n      payload: {}\n    });\n  };\n}\nexport function onFormReset() {\n  return (dispatch, getState) => {\n    dispatch({\n      type: ON_FORM_RESET,\n      payload: {}\n    });\n  };\n}\nexport function saveOrUpdateMedicine(data) {\n  const request = dataService.post(medicineAppEndpoints.saveOrUpdateMedicine, data);\n  return (dispatch, getState) => {\n    request.then(response => {\n      dispatch({\n        type: ON_SAVE_UPDATE,\n        payload: response.data.result\n      });\n    });\n  };\n}","map":{"version":3,"sources":["C:/Users/chamald/Desktop/Chamal/react/react-app/src/app/views/admin/config/medicine/store/action/medicine.add.edit.action.js"],"names":["dataService","medicineAppEndpoints","GET_MEDICINE","ON_ADD_EDIT_FORM_CHANGE","ON_SAVE_UPDATE","ON_RESET","ON_FORM_RESET","getMedicineDTOByID","medicalTestTypeID","endpoint","Object","assign","url","request","get","then","response","console","log","dispatch","getState","type","payload","data","result","onFormChange","reset","onFormReset","saveOrUpdateMedicine","post"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,wCAAxB;AACA,OAAOC,oBAAP,MAAiC,0BAAjC;AAEA,OAAO,MAAMC,YAAY,GAAG,kCAArB;AACP,OAAO,MAAMC,uBAAuB,GAAG,6CAAhC;AACP,OAAO,MAAMC,cAAc,GAAG,oCAAvB;AACP,OAAO,MAAMC,QAAQ,GAAG,8BAAjB;AACP,OAAO,MAAMC,aAAa,GAAG,mCAAtB;AAGP,OAAO,SAASC,kBAAT,CAA4BC,iBAA5B,EAA+C;AAElD,MAAIC,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBV,oBAAoB,CAACM,kBAAvC,CAAf;AACAE,EAAAA,QAAQ,CAACG,GAAT,GAAeH,QAAQ,CAACG,GAAT,GAAe,GAAf,GAAqBJ,iBAApC;AAEA,QAAMK,OAAO,GAAGb,WAAW,CAACc,GAAZ,CAAgBL,QAAhB,CAAhB;AAEAI,EAAAA,OAAO,CAACE,IAAR,CAAcC,QAAD,IAAc;AACnBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACH,GAFL;AAKA,SAAO,CAACG,QAAD,EAAWC,QAAX,KAAwB;AAC3BP,IAAAA,OAAO,CAACE,IAAR,CAAcC,QAAD,IACTG,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEnB,YADD;AAELoB,MAAAA,OAAO,EAAEN,QAAQ,CAACO,IAAT,CAAcC;AAFlB,KAAD,CADZ;AAMH,GAPD;AASH;AAED,OAAO,SAASC,YAAT,CAAsBF,IAAtB,EAA4B;AAC/B,SAAO,CAACJ,QAAD,EAAWC,QAAX,KAAwB;AAC3BD,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAElB,uBADD;AAELmB,MAAAA,OAAO,EAAEC;AAFJ,KAAD,CAAR;AAIH,GALD;AAMH;AAED,OAAO,SAASG,KAAT,GAAiB;AACpB,SAAO,CAACP,QAAD,EAAWC,QAAX,KAAwB;AAC3BD,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEhB,QADD;AAELiB,MAAAA,OAAO,EAAE;AAFJ,KAAD,CAAR;AAIH,GALD;AAMH;AAED,OAAO,SAASK,WAAT,GAAuB;AAC1B,SAAO,CAACR,QAAD,EAAWC,QAAX,KAAwB;AAC3BD,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEf,aADD;AAELgB,MAAAA,OAAO,EAAE;AAFJ,KAAD,CAAR;AAIH,GALD;AAMH;AAED,OAAO,SAASM,oBAAT,CAA8BL,IAA9B,EAAoC;AACvC,QAAMV,OAAO,GAAGb,WAAW,CAAC6B,IAAZ,CAAiB5B,oBAAoB,CAAC2B,oBAAtC,EAA4DL,IAA5D,CAAhB;AAEA,SAAO,CAACJ,QAAD,EAAWC,QAAX,KAAwB;AAC3BP,IAAAA,OAAO,CAACE,IAAR,CAAcC,QAAD,IAAc;AACnBG,MAAAA,QAAQ,CAAC;AACLE,QAAAA,IAAI,EAAEjB,cADD;AAELkB,QAAAA,OAAO,EAAEN,QAAQ,CAACO,IAAT,CAAcC;AAFlB,OAAD,CAAR;AAIH,KALL;AAOH,GARD;AASH","sourcesContent":["import dataService from \"../../../../../../services/dataService\";\nimport medicineAppEndpoints from \"./medicine.app.endpoints\";\n\nexport const GET_MEDICINE = '[MEDICINE ADD EDIT] GET_MEDICINE';\nexport const ON_ADD_EDIT_FORM_CHANGE = '[MEDICINE ADD EDIT] ON_ADD_EDIT_FORM_CHANGE';\nexport const ON_SAVE_UPDATE = '[MEDICINE ADD EDIT] ON_SAVE_UPDATE';\nexport const ON_RESET = '[MEDICINE ADD EDIT] ON_RESET';\nexport const ON_FORM_RESET = '[MEDICINE ADD EDIT] ON_FORM_RESET';\n\n\nexport function getMedicineDTOByID(medicalTestTypeID) {\n\n    let endpoint = Object.assign({}, medicineAppEndpoints.getMedicineDTOByID);\n    endpoint.url = endpoint.url + '/' + medicalTestTypeID;\n\n    const request = dataService.get(endpoint);\n\n    request.then((response) => {\n            console.log(response);\n        }\n    );\n\n    return (dispatch, getState) => {\n        request.then((response) =>\n            dispatch({\n                type: GET_MEDICINE,\n                payload: response.data.result\n            })\n        );\n    };\n\n}\n\nexport function onFormChange(data) {\n    return (dispatch, getState) => {\n        dispatch({\n            type: ON_ADD_EDIT_FORM_CHANGE,\n            payload: data\n        })\n    };\n}\n\nexport function reset() {\n    return (dispatch, getState) => {\n        dispatch({\n            type: ON_RESET,\n            payload: {}\n        })\n    };\n}\n\nexport function onFormReset() {\n    return (dispatch, getState) => {\n        dispatch({\n            type: ON_FORM_RESET,\n            payload: {}\n        })\n    };\n}\n\nexport function saveOrUpdateMedicine(data) {\n    const request = dataService.post(medicineAppEndpoints.saveOrUpdateMedicine, data);\n\n    return (dispatch, getState) => {\n        request.then((response) => {\n                dispatch({\n                    type: ON_SAVE_UPDATE,\n                    payload: response.data.result\n                });\n            }\n        );\n    };\n}\n\n\n"]},"metadata":{},"sourceType":"module"}