{"ast":null,"code":"import * as moment from 'moment';\nexport const defaultDateFormat = 'DD/MM/YYYY';\nexport const defaultDateTimeFormat = 'DD/MM/YYYY HH:mm';\nexport const defaultDateTimeFormatWithSeconds = 'DD/MM/YYYY HH:mm:ss';\nexport const htmlDateFormatter = 'YYYY-MM-DD';\nexport const htmlDateTimeFormatter = '\"YYYY-MM-DDTHH:MM\"';\nexport const getFormattedDateString = (date, format) => {\n  return moment(date).format(format);\n};\nexport const getDefaultFormattedDate = (date\n/*Moment*/\n) =>\n/*string*/\n{\n  return moment(date).format(defaultDateFormat);\n};\nexport const getDefaultFormattedDateTimeWithSeconds = (date\n/*Moment*/\n) =>\n/*string*/\n{\n  return moment(date).format(defaultDateTimeFormatWithSeconds);\n};\nexport const getDefaultFormattedDateTime = (date\n/*Moment*/\n) =>\n/*string*/\n{\n  return moment(date).format(defaultDateTimeFormat);\n};\nexport const getMomentDateFromDateStr = (dateStr\n/* string*/\n) => {\n  return moment(dateStr, defaultDateFormat);\n};\nexport const getMomentDateFromHtmlDateStr = (dateStr\n/* string*/\n) => {\n  return moment(dateStr, htmlDateFormatter);\n};\nexport const getMomentDateFromHtmlDateTimeStr = (dateStr\n/* string*/\n) => {\n  return moment(dateStr, htmlDateTimeFormatter);\n};\nexport const getMonthStartDateStr = (date\n/*Moment*/\n) =>\n/*string*/\n{\n  return moment(date).startOf('month').format(defaultDateFormat);\n};\nexport const getMonthEndDateStr = (date\n/*Moment*/\n) =>\n/*string */\n{\n  return moment(date).endOf('month').format(defaultDateFormat);\n};\nexport const getJsDate = (date\n/*string*/\n) => {\n  return this.getMomentDateFromDateStr(date).toDate();\n};\nexport const getJSDateDifference = (date1\n/*Date*/\n, date2\n/*Date*/\n) => {\n  return moment(date2).diff(moment(date1), 'days');\n};\nexport const getMomentDateTimeFromString = (date\n/*Date*/\n, format) => {\n  return moment(date, format);\n};\nexport const getMomentDateFromJSDate = (date\n/*Date*/\n) => {\n  return moment(date);\n};\nexport const getNow = () =>\n/*Moment */\n{\n  return moment();\n};\nexport const getNowDateString = () => {\n  return getDefaultFormattedDate(getNow());\n};\nexport const getNowDateTimeString = () => {\n  return getDefaultFormattedDateTime(getNow());\n};\nexport const getNowDateTimeWithSecondsString = () => {\n  return getDefaultFormattedDateTimeWithSeconds(getNow());\n};\nexport const isSameOrBefore = (fromDate\n/* string*/\n, toDate\n/* string*/\n) => {\n  return this.getMomentDateFromDateStr(fromDate).isSameOrBefore(this.getMomentDateFromDateStr(toDate));\n};\nexport const isSame = (fromDate\n/*string*/\n, toDate\n/*string*/\n) => {\n  return this.getMomentDateFromDateStr(fromDate).isSame(this.getMomentDateFromDateStr(toDate));\n};\nexport const isEqualOrBeforeDefaultDateTimeFormatWithSeconds = (fromDate\n/* String */\n, toDate\n/*String */\n) => {\n  return moment(fromDate, defaultDateTimeFormatWithSeconds).isSameOrBefore(moment(toDate, defaultDateTimeFormatWithSeconds));\n};\nexport const getBeforeDate = days =>\n/*Moment */\n{\n  return moment().subtract(days, 'days');\n};\nexport const getAddDateStr = (date, days) => {\n  return moment(date, defaultDateFormat).add(days, 'days').format(defaultDateFormat);\n};\nexport const getAddDate = (date, days) =>\n/*Moment */\n{\n  return moment(date, defaultDateTimeFormatWithSeconds).add(days, 'days');\n};\nexport const getAddMins = (date, minutes) =>\n/*Moment */\n{\n  return moment(date, defaultDateTimeFormatWithSeconds).add(minutes, 'minutes');\n};\nexport const getMomentDateFromString = (date\n/* string*/\n) =>\n/*Moment */\n{\n  return moment(date, defaultDateTimeFormatWithSeconds);\n};\nexport const getMomentDateFromDefaultDateTime = date => {\n  return moment(date, defaultDateTimeFormat);\n};\nexport const getMomentDateFromDateTime = (date, dateFormat) => {\n  return moment(date, dateFormat);\n};\nexport const getStartDateStr = momentDate => {\n  return getDefaultFormattedDate(momentDate) + ' 00:00:00';\n};\nexport const getEndDateStr = momentDate => {\n  return getDefaultFormattedDate(momentDate) + ' 23:59:59';\n};\nexport const getDateNameString = dateStr => {\n  return moment(dateStr, defaultDateFormat).format('ddd');\n};\nexport const getDateCustomStringDWOR = dateStr => {\n  let momentDate = moment(dateStr, defaultDateFormat);\n\n  if (!momentDate.isValid()) {\n    return dateStr;\n  }\n\n  return moment(dateStr, defaultDateFormat).format('DD/MM');\n};\nexport const isSameOrBetween = (date, fromDate, toDate) => {\n  return date.isSame(fromDate) || date.isSame(toDate) || date.isBetween(fromDate, toDate);\n};\nexport const getJSDateFromDateString = (dateString, format) => {\n  return moment(dateString, format).toDate();\n};\nexport const getDateStringFromJSDate = (jsDate, format) => {\n  return moment(jsDate).format(format);\n};\nexport const getYearStartDateJS = year => {\n  return moment(year + ':01:01', 'YYYY:MM:DD').startOf('year').toDate();\n};\nexport const getYearEndDateJS = year => {\n  return moment(year + ':01:01', 'YYYY:MM:DD').endOf('year').toDate();\n};","map":{"version":3,"sources":["C:/Users/chamald/Desktop/Chamal/react/react-app/src/utils/DateTimeUtil.js"],"names":["moment","defaultDateFormat","defaultDateTimeFormat","defaultDateTimeFormatWithSeconds","htmlDateFormatter","htmlDateTimeFormatter","getFormattedDateString","date","format","getDefaultFormattedDate","getDefaultFormattedDateTimeWithSeconds","getDefaultFormattedDateTime","getMomentDateFromDateStr","dateStr","getMomentDateFromHtmlDateStr","getMomentDateFromHtmlDateTimeStr","getMonthStartDateStr","startOf","getMonthEndDateStr","endOf","getJsDate","toDate","getJSDateDifference","date1","date2","diff","getMomentDateTimeFromString","getMomentDateFromJSDate","getNow","getNowDateString","getNowDateTimeString","getNowDateTimeWithSecondsString","isSameOrBefore","fromDate","isSame","isEqualOrBeforeDefaultDateTimeFormatWithSeconds","getBeforeDate","days","subtract","getAddDateStr","add","getAddDate","getAddMins","minutes","getMomentDateFromString","getMomentDateFromDefaultDateTime","getMomentDateFromDateTime","dateFormat","getStartDateStr","momentDate","getEndDateStr","getDateNameString","getDateCustomStringDWOR","isValid","isSameOrBetween","isBetween","getJSDateFromDateString","dateString","getDateStringFromJSDate","jsDate","getYearStartDateJS","year","getYearEndDateJS"],"mappings":"AAAA,OAAO,KAAKA,MAAZ,MAAwB,QAAxB;AAEA,OAAO,MAAMC,iBAAiB,GAAG,YAA1B;AACP,OAAO,MAAMC,qBAAqB,GAAG,kBAA9B;AACP,OAAO,MAAMC,gCAAgC,GAAG,qBAAzC;AACP,OAAO,MAAMC,iBAAiB,GAAG,YAA1B;AACP,OAAO,MAAMC,qBAAqB,GAAG,oBAA9B;AAEP,OAAO,MAAMC,sBAAsB,GAAG,CAACC,IAAD,EAAOC,MAAP,KAAkB;AACpD,SAAOR,MAAM,CAACO,IAAD,CAAN,CAAaC,MAAb,CAAoBA,MAApB,CAAP;AACH,CAFM;AAIP,OAAO,MAAMC,uBAAuB,GAAG,CAACF;AAAK;AAAN;AAAoB;AAAW;AAClE,SAAOP,MAAM,CAACO,IAAD,CAAN,CAAaC,MAAb,CAAoBP,iBAApB,CAAP;AACH,CAFM;AAIP,OAAO,MAAMS,sCAAsC,GAAG,CAACH;AAAK;AAAN;AAAoB;AAAW;AACjF,SAAOP,MAAM,CAACO,IAAD,CAAN,CAAaC,MAAb,CAAoBL,gCAApB,CAAP;AACH,CAFM;AAIP,OAAO,MAAMQ,2BAA2B,GAAG,CAACJ;AAAI;AAAL;AAAmB;AAAW;AACrE,SAAOP,MAAM,CAACO,IAAD,CAAN,CAAaC,MAAb,CAAoBN,qBAApB,CAAP;AACH,CAFM;AAIP,OAAO,MAAMU,wBAAwB,GAAG,CAACC;AAAQ;AAAT,KAAyB;AAC7D,SAAOb,MAAM,CAACa,OAAD,EAAUZ,iBAAV,CAAb;AACH,CAFM;AAIP,OAAO,MAAMa,4BAA4B,GAAG,CAACD;AAAQ;AAAT,KAAyB;AACjE,SAAOb,MAAM,CAACa,OAAD,EAAUT,iBAAV,CAAb;AACH,CAFM;AAIP,OAAO,MAAMW,gCAAgC,GAAG,CAACF;AAAQ;AAAT,KAAyB;AACrE,SAAOb,MAAM,CAACa,OAAD,EAAUR,qBAAV,CAAb;AACH,CAFM;AAIP,OAAO,MAAMW,oBAAoB,GAAG,CAACT;AAAK;AAAN;AAAoB;AAAW;AAC/D,SAAOP,MAAM,CAACO,IAAD,CAAN,CAAaU,OAAb,CAAqB,OAArB,EAA8BT,MAA9B,CAAqCP,iBAArC,CAAP;AACH,CAFM;AAIP,OAAO,MAAMiB,kBAAkB,GAAG,CAACX;AAAK;AAAN;AAAqB;AAAY;AAC/D,SAAOP,MAAM,CAACO,IAAD,CAAN,CAAaY,KAAb,CAAmB,OAAnB,EAA4BX,MAA5B,CAAmCP,iBAAnC,CAAP;AACH,CAFM;AAIP,OAAO,MAAMmB,SAAS,GAAG,CAACb;AAAK;AAAN,KAAqB;AAC1C,SAAO,KAAKK,wBAAL,CAA8BL,IAA9B,EAAoCc,MAApC,EAAP;AACH,CAFM;AAIP,OAAO,MAAMC,mBAAmB,GAAG,CAACC;AAAM;AAAP,EAAiBC;AAAM;AAAvB,KAAoC;AACnE,SAAOxB,MAAM,CAACwB,KAAD,CAAN,CAAcC,IAAd,CAAmBzB,MAAM,CAACuB,KAAD,CAAzB,EAAkC,MAAlC,CAAP;AACH,CAFM;AAIP,OAAO,MAAMG,2BAA2B,GAAG,CAACnB;AAAK;AAAN,EAAgBC,MAAhB,KAA2B;AAClE,SAAOR,MAAM,CAACO,IAAD,EAAOC,MAAP,CAAb;AACH,CAFM;AAIP,OAAO,MAAMmB,uBAAuB,GAAG,CAACpB;AAAK;AAAN,KAAmB;AACtD,SAAOP,MAAM,CAACO,IAAD,CAAb;AACH,CAFM;AAIP,OAAO,MAAMqB,MAAM,GAAG;AAAK;AAAY;AACnC,SAAO5B,MAAM,EAAb;AACH,CAFM;AAIP,OAAO,MAAM6B,gBAAgB,GAAG,MAAM;AAClC,SAAOpB,uBAAuB,CAACmB,MAAM,EAAP,CAA9B;AACH,CAFM;AAIP,OAAO,MAAME,oBAAoB,GAAG,MAAM;AACtC,SAAOnB,2BAA2B,CAACiB,MAAM,EAAP,CAAlC;AACH,CAFM;AAIP,OAAO,MAAMG,+BAA+B,GAAG,MAAM;AACjD,SAAOrB,sCAAsC,CAACkB,MAAM,EAAP,CAA7C;AACH,CAFM;AAIP,OAAO,MAAMI,cAAc,GAAG,CAACC;AAAS;AAAV,EAAuBZ;AAAO;AAA9B,KAA8C;AACxE,SAAO,KAAKT,wBAAL,CAA8BqB,QAA9B,EAAwCD,cAAxC,CAAuD,KAAKpB,wBAAL,CAA8BS,MAA9B,CAAvD,CAAP;AACH,CAFM;AAIP,OAAO,MAAMa,MAAM,GAAG,CAACD;AAAU;AAAX,EAAuBZ;AAAQ;AAA/B,KAA8C;AAChE,SAAO,KAAKT,wBAAL,CAA8BqB,QAA9B,EAAwCC,MAAxC,CAA+C,KAAKtB,wBAAL,CAA8BS,MAA9B,CAA/C,CAAP;AACH,CAFM;AAIP,OAAO,MAAMc,+CAA+C,GAAG,CAACF;AAAS;AAAV,EAAwBZ;AAAO;AAA/B,KAA+C;AAC1G,SAAOrB,MAAM,CAACiC,QAAD,EAAW9B,gCAAX,CAAN,CAAmD6B,cAAnD,CAAkEhC,MAAM,CAACqB,MAAD,EAASlB,gCAAT,CAAxE,CAAP;AACH,CAFM;AAIP,OAAO,MAAMiC,aAAa,GAAIC,IAAD;AAAS;AAAY;AAC9C,SAAOrC,MAAM,GAAGsC,QAAT,CAAkBD,IAAlB,EAAwB,MAAxB,CAAP;AACH,CAFM;AAIP,OAAO,MAAME,aAAa,GAAG,CAAChC,IAAD,EAAO8B,IAAP,KAAgB;AACzC,SAAOrC,MAAM,CAACO,IAAD,EAAON,iBAAP,CAAN,CAAgCuC,GAAhC,CAAoCH,IAApC,EAA0C,MAA1C,EAAkD7B,MAAlD,CAAyDP,iBAAzD,CAAP;AACH,CAFM;AAIP,OAAO,MAAMwC,UAAU,GAAG,CAAClC,IAAD,EAAO8B,IAAP;AAAe;AAAY;AACjD,SAAOrC,MAAM,CAACO,IAAD,EAAOJ,gCAAP,CAAN,CAA+CqC,GAA/C,CAAmDH,IAAnD,EAAyD,MAAzD,CAAP;AACH,CAFM;AAIP,OAAO,MAAMK,UAAU,GAAG,CAACnC,IAAD,EAAOoC,OAAP;AAAkB;AAAY;AACpD,SAAO3C,MAAM,CAACO,IAAD,EAAOJ,gCAAP,CAAN,CAA+CqC,GAA/C,CAAmDG,OAAnD,EAA4D,SAA5D,CAAP;AACH,CAFM;AAIP,OAAO,MAAMC,uBAAuB,GAAG,CAACrC;AAAI;AAAL;AAAoB;AAAY;AACnE,SAAOP,MAAM,CAACO,IAAD,EAAOJ,gCAAP,CAAb;AACH,CAFM;AAIP,OAAO,MAAM0C,gCAAgC,GAAItC,IAAD,IAAU;AACtD,SAAOP,MAAM,CAACO,IAAD,EAAOL,qBAAP,CAAb;AACH,CAFM;AAIP,OAAO,MAAM4C,yBAAyB,GAAG,CAACvC,IAAD,EAAOwC,UAAP,KAAsB;AAC3D,SAAO/C,MAAM,CAACO,IAAD,EAAOwC,UAAP,CAAb;AACH,CAFM;AAIP,OAAO,MAAMC,eAAe,GAAIC,UAAD,IAAgB;AAC3C,SAAOxC,uBAAuB,CAACwC,UAAD,CAAvB,GAAsC,WAA7C;AACH,CAFM;AAIP,OAAO,MAAMC,aAAa,GAAID,UAAD,IAAgB;AACzC,SAAOxC,uBAAuB,CAACwC,UAAD,CAAvB,GAAsC,WAA7C;AACH,CAFM;AAIP,OAAO,MAAME,iBAAiB,GAAItC,OAAD,IAAa;AAC1C,SAAOb,MAAM,CAACa,OAAD,EAAUZ,iBAAV,CAAN,CAAmCO,MAAnC,CAA0C,KAA1C,CAAP;AACH,CAFM;AAIP,OAAO,MAAM4C,uBAAuB,GAAIvC,OAAD,IAAa;AAChD,MAAIoC,UAAU,GAAGjD,MAAM,CAACa,OAAD,EAAUZ,iBAAV,CAAvB;;AACA,MAAI,CAACgD,UAAU,CAACI,OAAX,EAAL,EAA2B;AACvB,WAAOxC,OAAP;AACH;;AACD,SAAOb,MAAM,CAACa,OAAD,EAAUZ,iBAAV,CAAN,CAAmCO,MAAnC,CAA0C,OAA1C,CAAP;AACH,CANM;AAQP,OAAO,MAAM8C,eAAe,GAAG,CAAC/C,IAAD,EAAO0B,QAAP,EAAiBZ,MAAjB,KAA4B;AACvD,SAAOd,IAAI,CAAC2B,MAAL,CAAYD,QAAZ,KACA1B,IAAI,CAAC2B,MAAL,CAAYb,MAAZ,CADA,IAEAd,IAAI,CAACgD,SAAL,CAAetB,QAAf,EAAyBZ,MAAzB,CAFP;AAGH,CAJM;AAMP,OAAO,MAAMmC,uBAAuB,GAAG,CAACC,UAAD,EAAajD,MAAb,KAAwB;AAC3D,SAAOR,MAAM,CAACyD,UAAD,EAAajD,MAAb,CAAN,CAA2Ba,MAA3B,EAAP;AACH,CAFM;AAIP,OAAO,MAAMqC,uBAAuB,GAAG,CAACC,MAAD,EAASnD,MAAT,KAAoB;AACvD,SAAOR,MAAM,CAAC2D,MAAD,CAAN,CAAenD,MAAf,CAAsBA,MAAtB,CAAP;AACH,CAFM;AAIP,OAAO,MAAMoD,kBAAkB,GAAIC,IAAD,IAAU;AACxC,SAAO7D,MAAM,CAAC6D,IAAI,GAAG,QAAR,EAAkB,YAAlB,CAAN,CAAsC5C,OAAtC,CAA8C,MAA9C,EAAsDI,MAAtD,EAAP;AACH,CAFM;AAIP,OAAO,MAAMyC,gBAAgB,GAAID,IAAD,IAAU;AACtC,SAAO7D,MAAM,CAAC6D,IAAI,GAAG,QAAR,EAAkB,YAAlB,CAAN,CAAsC1C,KAAtC,CAA4C,MAA5C,EAAoDE,MAApD,EAAP;AACH,CAFM","sourcesContent":["import * as moment from 'moment';\n\nexport const defaultDateFormat = 'DD/MM/YYYY';\nexport const defaultDateTimeFormat = 'DD/MM/YYYY HH:mm';\nexport const defaultDateTimeFormatWithSeconds = 'DD/MM/YYYY HH:mm:ss';\nexport const htmlDateFormatter = 'YYYY-MM-DD';\nexport const htmlDateTimeFormatter = '\"YYYY-MM-DDTHH:MM\"';\n\nexport const getFormattedDateString = (date, format) => {\n    return moment(date).format(format);\n};\n\nexport const getDefaultFormattedDate = (date /*Moment*/) =>/*string*/ {\n    return moment(date).format(defaultDateFormat);\n};\n\nexport const getDefaultFormattedDateTimeWithSeconds = (date /*Moment*/) =>/*string*/ {\n    return moment(date).format(defaultDateTimeFormatWithSeconds);\n};\n\nexport const getDefaultFormattedDateTime = (date/*Moment*/) =>/*string*/ {\n    return moment(date).format(defaultDateTimeFormat);\n};\n\nexport const getMomentDateFromDateStr = (dateStr /* string*/) => {\n    return moment(dateStr, defaultDateFormat);\n};\n\nexport const getMomentDateFromHtmlDateStr = (dateStr /* string*/) => {\n    return moment(dateStr, htmlDateFormatter);\n};\n\nexport const getMomentDateFromHtmlDateTimeStr = (dateStr /* string*/) => {\n    return moment(dateStr, htmlDateTimeFormatter);\n};\n\nexport const getMonthStartDateStr = (date /*Moment*/) =>/*string*/ {\n    return moment(date).startOf('month').format(defaultDateFormat);\n};\n\nexport const getMonthEndDateStr = (date /*Moment*/) => /*string */ {\n    return moment(date).endOf('month').format(defaultDateFormat);\n};\n\nexport const getJsDate = (date /*string*/) => {\n    return this.getMomentDateFromDateStr(date).toDate();\n};\n\nexport const getJSDateDifference = (date1 /*Date*/, date2 /*Date*/) => {\n    return moment(date2).diff(moment(date1), 'days');\n};\n\nexport const getMomentDateTimeFromString = (date /*Date*/, format) => {\n    return moment(date, format);\n};\n\nexport const getMomentDateFromJSDate = (date /*Date*/) => {\n    return moment(date);\n};\n\nexport const getNow = () =>/*Moment */ {\n    return moment();\n};\n\nexport const getNowDateString = () => {\n    return getDefaultFormattedDate(getNow());\n};\n\nexport const getNowDateTimeString = () => {\n    return getDefaultFormattedDateTime(getNow());\n};\n\nexport const getNowDateTimeWithSecondsString = () => {\n    return getDefaultFormattedDateTimeWithSeconds(getNow());\n};\n\nexport const isSameOrBefore = (fromDate /* string*/, toDate /* string*/) => {\n    return this.getMomentDateFromDateStr(fromDate).isSameOrBefore(this.getMomentDateFromDateStr(toDate));\n};\n\nexport const isSame = (fromDate  /*string*/, toDate  /*string*/) => {\n    return this.getMomentDateFromDateStr(fromDate).isSame(this.getMomentDateFromDateStr(toDate));\n};\n\nexport const isEqualOrBeforeDefaultDateTimeFormatWithSeconds = (fromDate /* String */, toDate /*String */) => {\n    return moment(fromDate, defaultDateTimeFormatWithSeconds).isSameOrBefore(moment(toDate, defaultDateTimeFormatWithSeconds));\n};\n\nexport const getBeforeDate = (days) =>/*Moment */ {\n    return moment().subtract(days, 'days');\n};\n\nexport const getAddDateStr = (date, days) => {\n    return moment(date, defaultDateFormat).add(days, 'days').format(defaultDateFormat);\n};\n\nexport const getAddDate = (date, days) =>/*Moment */ {\n    return moment(date, defaultDateTimeFormatWithSeconds).add(days, 'days');\n};\n\nexport const getAddMins = (date, minutes) =>/*Moment */ {\n    return moment(date, defaultDateTimeFormatWithSeconds).add(minutes, 'minutes');\n};\n\nexport const getMomentDateFromString = (date/* string*/) =>/*Moment */ {\n    return moment(date, defaultDateTimeFormatWithSeconds);\n};\n\nexport const getMomentDateFromDefaultDateTime = (date) => {\n    return moment(date, defaultDateTimeFormat);\n};\n\nexport const getMomentDateFromDateTime = (date, dateFormat) => {\n    return moment(date, dateFormat);\n};\n\nexport const getStartDateStr = (momentDate) => {\n    return getDefaultFormattedDate(momentDate) + ' 00:00:00';\n};\n\nexport const getEndDateStr = (momentDate) => {\n    return getDefaultFormattedDate(momentDate) + ' 23:59:59';\n};\n\nexport const getDateNameString = (dateStr) => {\n    return moment(dateStr, defaultDateFormat).format('ddd');\n};\n\nexport const getDateCustomStringDWOR = (dateStr) => {\n    let momentDate = moment(dateStr, defaultDateFormat);\n    if (!momentDate.isValid()) {\n        return dateStr;\n    }\n    return moment(dateStr, defaultDateFormat).format('DD/MM');\n};\n\nexport const isSameOrBetween = (date, fromDate, toDate) => {\n    return date.isSame(fromDate)\n        || date.isSame(toDate)\n        || date.isBetween(fromDate, toDate);\n};\n\nexport const getJSDateFromDateString = (dateString, format) => {\n    return moment(dateString, format).toDate();\n};\n\nexport const getDateStringFromJSDate = (jsDate, format) => {\n    return moment(jsDate).format(format);\n};\n\nexport const getYearStartDateJS = (year) => {\n    return moment(year + ':01:01', 'YYYY:MM:DD').startOf('year').toDate();\n};\n\nexport const getYearEndDateJS = (year) => {\n    return moment(year + ':01:01', 'YYYY:MM:DD').endOf('year').toDate();\n};\n"]},"metadata":{},"sourceType":"module"}