{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chamald\\\\Desktop\\\\Chamal\\\\react\\\\react-app\\\\src\\\\app\\\\views\\\\admin\\\\patient\\\\newPatient\\\\stepper\\\\stepComponents\\\\selectPrescription\\\\components\\\\PrescriptionTemplate.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { CCard, CCardBody, CCol, CFormGroup, CLabel, CRow, CSelect } from \"@coreui/react\";\nimport { getOptionsListByObjectListForCustomSelect } from \"../../../../../../../../../utils/FormUtils\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as Action from \"../store/actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PrescriptionTemplate = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const data = useSelector(_ref => {\n    let {\n      selectPrescriptionTemplate\n    } = _ref;\n    return selectPrescriptionTemplate.selectPrescriptionTemplate;\n  });\n  const [prescriptionTemplateID, setPrescriptionTemplateID] = useState(data.prescription.prescriptionTemplateID ? data.prescription.prescriptionTemplateID : '');\n  useEffect(() => {\n    setPrescriptionTemplateID(data.prescription.prescriptionTemplateID);\n  }, [data.prescription.prescriptionTemplateID]);\n\n  const onChange = values => {\n    if (values.target.value) {\n      setPrescriptionTemplateID(values.target.value);\n      dispatch(Action.onSelectPrescription(values.target.value));\n    } else {\n      dispatch(Action.onResetPrescription());\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(CRow, {\n      children: /*#__PURE__*/_jsxDEV(CCol, {\n        xs: \"12\",\n        children: /*#__PURE__*/_jsxDEV(CCard, {\n          children: /*#__PURE__*/_jsxDEV(CCardBody, {\n            children: /*#__PURE__*/_jsxDEV(\"form\", {\n              children: /*#__PURE__*/_jsxDEV(CRow, {\n                children: /*#__PURE__*/_jsxDEV(CCol, {\n                  sm: \"12\",\n                  md: \"6\",\n                  lg: \"3\",\n                  children: /*#__PURE__*/_jsxDEV(CFormGroup, {\n                    children: [/*#__PURE__*/_jsxDEV(CLabel, {\n                      htmlFor: \"prescriptionTemplateID\",\n                      children: \"Prescription Template\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 36,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(CSelect, {\n                      custom: true,\n                      name: \"prescriptionTemplateID\",\n                      onChange: onChange,\n                      value: prescriptionTemplateID,\n                      children: data && getOptionsListByObjectListForCustomSelect(data.prescriptionTemplateList, \"prescriptionTemplate\", \"prescriptionTemplateD\", \"physicalActivityCategoryID\", \"prescriptionTemplateID\", true).map(item => {\n                        return /*#__PURE__*/_jsxDEV(\"option\", {\n                          value: item.key,\n                          children: item.value\n                        }, item.key, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 47,\n                          columnNumber: 57\n                        }, this);\n                      })\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 38,\n                      columnNumber: 45\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 35,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 34,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 33,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 32,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PrescriptionTemplate, \"Jr2lEv4mUYMwd5d8sKzREqORuTo=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = PrescriptionTemplate;\nexport default PrescriptionTemplate;\n\nvar _c;\n\n$RefreshReg$(_c, \"PrescriptionTemplate\");","map":{"version":3,"sources":["C:/Users/chamald/Desktop/Chamal/react/react-app/src/app/views/admin/patient/newPatient/stepper/stepComponents/selectPrescription/components/PrescriptionTemplate.js"],"names":["React","useEffect","useState","CCard","CCardBody","CCol","CFormGroup","CLabel","CRow","CSelect","getOptionsListByObjectListForCustomSelect","useDispatch","useSelector","Action","PrescriptionTemplate","dispatch","data","selectPrescriptionTemplate","prescriptionTemplateID","setPrescriptionTemplateID","prescription","onChange","values","target","value","onSelectPrescription","onResetPrescription","prescriptionTemplateList","map","item","key"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {CCard, CCardBody, CCol, CFormGroup, CLabel, CRow, CSelect} from \"@coreui/react\";\nimport {getOptionsListByObjectListForCustomSelect} from \"../../../../../../../../../utils/FormUtils\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport * as Action from \"../store/actions\";\n\n\nconst PrescriptionTemplate = () => {\n    const dispatch = useDispatch();\n    const data = useSelector(({selectPrescriptionTemplate}) => selectPrescriptionTemplate.selectPrescriptionTemplate);\n    const [prescriptionTemplateID, setPrescriptionTemplateID] = useState(data.prescription.prescriptionTemplateID ? data.prescription.prescriptionTemplateID : '');\n\n    useEffect(() => {\n        setPrescriptionTemplateID(data.prescription.prescriptionTemplateID);\n    }, [data.prescription.prescriptionTemplateID]);\n\n    const onChange = (values) => {\n        if (values.target.value) {\n            setPrescriptionTemplateID(values.target.value);\n            dispatch(Action.onSelectPrescription(values.target.value));\n        } else {\n            dispatch(Action.onResetPrescription());\n        }\n    };\n\n    return (\n        <div>\n            <CRow>\n                <CCol xs=\"12\">\n                    <CCard>\n                        <CCardBody>\n                            <form>\n                                <CRow>\n                                    <CCol sm=\"12\" md=\"6\" lg=\"3\">\n                                        <CFormGroup>\n                                            <CLabel htmlFor=\"prescriptionTemplateID\">Prescription\n                                                Template</CLabel>\n                                            <CSelect\n                                                custom\n                                                name=\"prescriptionTemplateID\"\n                                                onChange={onChange}\n                                                value={prescriptionTemplateID}\n                                            >\n                                                {data &&\n                                                getOptionsListByObjectListForCustomSelect(data.prescriptionTemplateList, \"prescriptionTemplate\", \"prescriptionTemplateD\", \"physicalActivityCategoryID\", \"prescriptionTemplateID\", true).map((item) => {\n                                                    return (\n                                                        <option key={item.key}\n                                                                value={item.key}>{item.value}</option>\n                                                    );\n                                                })\n                                                }\n                                            </CSelect>\n                                        </CFormGroup>\n                                    </CCol>\n                                </CRow>\n                            </form>\n                        </CCardBody>\n                    </CCard>\n                </CCol>\n            </CRow>\n        </div>\n    );\n};\n\nexport default PrescriptionTemplate;"]},"metadata":{},"sourceType":"module"}