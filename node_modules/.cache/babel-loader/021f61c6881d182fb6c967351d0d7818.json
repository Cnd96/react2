{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chamald\\\\Desktop\\\\Chamal\\\\react\\\\react-app\\\\src\\\\app\\\\views\\\\admin\\\\config\\\\role\\\\add-edit\\\\RoleAddEditApp.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport withReducer from \"../../../../../store/withReducer\";\nimport reducer from \"../store/reducers/index\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as Actions from '../store/actions';\nimport { getStorageItem, removeStorageItem } from \"../../../../../../utils/StorageUtils\";\nimport Constants from \"../../../../../../utils/Constants\";\nimport * as _ from 'lodash';\nimport { trimData } from \"../../../../../../utils/DataExtractHelper\";\nimport RoleAddEditBase from \"./components/RoleAddEditBase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction RoleAddEditApp() {\n  _s();\n\n  const dispatch = useDispatch();\n  const data = useSelector(_ref => {\n    let {\n      roles\n    } = _ref;\n    return roles.roleAddEdit;\n  });\n  useEffect(() => {\n    dispatch(Actions.getAllPrivileges());\n    let roleID = getStorageItem(Constants.STORAGE.SELECTED_ROLE_ID);\n\n    if (roleID) {\n      dispatch(Actions.getRole(roleID));\n    }\n\n    return () => {\n      dispatch(Actions.reset());\n      removeStorageItem(Constants.STORAGE.SELECTED_ROLE_ID);\n    };\n  }, [dispatch]);\n\n  let isValid = () => {\n    return data.formData && data.formData.isValid;\n  };\n\n  let isNew = !data.role.roleID;\n\n  let save = () => {\n    if (!isValid()) {//TODO message\n    }\n\n    let role = Object.assign({}, data.role, data.formData.values);\n    let selectedPrivileges = data.selectedPrivileges;\n\n    if (isNew) {\n      role.privileges = selectedPrivileges;\n    } else {\n      let added = _.difference(selectedPrivileges, data.role.privileges);\n\n      let removed = _.difference(data.role.privileges, selectedPrivileges);\n\n      role.addedPrivileges = added;\n      role.deletedPrivileges = removed;\n    }\n\n    dispatch(Actions.saveUpdateRole(trimData(role)));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(RoleAddEditBase, {\n      allPrivileges: data.allPrivileges,\n      role: data.role,\n      isValid: isValid(),\n      onSaveUpdate: save\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(RoleAddEditApp, \"8ZSi0OBRHkt2uIn6fVrA7mYaxeA=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = RoleAddEditApp;\nexport default withReducer('roles', reducer)(RoleAddEditApp);\n\nvar _c;\n\n$RefreshReg$(_c, \"RoleAddEditApp\");","map":{"version":3,"sources":["C:/Users/chamald/Desktop/Chamal/react/react-app/src/app/views/admin/config/role/add-edit/RoleAddEditApp.js"],"names":["React","useEffect","withReducer","reducer","useDispatch","useSelector","Actions","getStorageItem","removeStorageItem","Constants","_","trimData","RoleAddEditBase","RoleAddEditApp","dispatch","data","roles","roleAddEdit","getAllPrivileges","roleID","STORAGE","SELECTED_ROLE_ID","getRole","reset","isValid","formData","isNew","role","save","Object","assign","values","selectedPrivileges","privileges","added","difference","removed","addedPrivileges","deletedPrivileges","saveUpdateRole","allPrivileges"],"mappings":"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","sourcesContent":["import React, {useEffect} from 'react';\nimport withReducer from \"../../../../../store/withReducer\";\nimport reducer from \"../store/reducers/index\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport * as Actions from '../store/actions';\nimport {getStorageItem, removeStorageItem} from \"../../../../../../utils/StorageUtils\";\nimport Constants from \"../../../../../../utils/Constants\";\nimport * as _ from 'lodash';\nimport {trimData} from \"../../../../../../utils/DataExtractHelper\";\nimport RoleAddEditBase from \"./components/RoleAddEditBase\";\n\nfunction RoleAddEditApp() {\n\n    const dispatch = useDispatch();\n    const data = useSelector(({roles}) => roles.roleAddEdit);\n\n    useEffect(() => {\n        dispatch(Actions.getAllPrivileges());\n\n        let roleID = getStorageItem(Constants.STORAGE.SELECTED_ROLE_ID);\n        if (roleID) {\n            dispatch(Actions.getRole(roleID));\n        }\n\n        return () => {\n            dispatch(Actions.reset());\n            removeStorageItem(Constants.STORAGE.SELECTED_ROLE_ID);\n        };\n    }, [dispatch]);\n\n    let isValid = () => {\n        return data.formData && data.formData.isValid;\n    };\n\n    let isNew = !data.role.roleID;\n\n    let save = () => {\n        if (!isValid()) {\n            //TODO message\n        }\n        let role = Object.assign({}, data.role, data.formData.values);\n        let selectedPrivileges = data.selectedPrivileges;\n\n        if (isNew) {\n            role.privileges = selectedPrivileges;\n        } else {\n            let added = _.difference(selectedPrivileges, data.role.privileges);\n            let removed = _.difference(data.role.privileges, selectedPrivileges);\n\n            role.addedPrivileges = added;\n            role.deletedPrivileges = removed;\n        }\n\n        dispatch(Actions.saveUpdateRole(trimData(role)));\n    };\n\n    return (\n        <>\n            <RoleAddEditBase\n                allPrivileges={data.allPrivileges}\n                role={data.role}\n                isValid={isValid()}\n                onSaveUpdate={save}\n            />\n        </>\n    );\n}\n\nexport default withReducer('roles', reducer)(RoleAddEditApp);\n"]},"metadata":{},"sourceType":"module"}