{"ast":null,"code":"import axios from \"axios/index\";\nimport { hideLoading, showLoading } from '../../../utils/LoaderHelper';\nimport jwtService from '../auth/jwtService';\nimport { showErrorMessage, showSuccessMessage } from \"../../../utils/ToastUtil\";\nimport history from '../../../@history';\nimport Constants from \"../../../utils/Constants\";\nimport loginAppEndpoints from \"../../auth/store/actions/login.api\";\n\nclass dataService {\n  constructor() {\n    this.init = () => {\n      this.client = axios.create({\n        baseURL: '/',\n        responseType: 'json',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n          'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS, HEAD'\n        }\n      });\n      let client = this.client;\n      this.client.interceptors.request.use(function (config) {\n        if (config.headers.showLoading) {\n          showLoading();\n        }\n\n        let accessToken = jwtService.getAccessToken();\n        config.headers.Authorization = \"Bearer \" + accessToken;\n        return config;\n      }, function (error) {\n        // Do something with request error\n        return Promise.reject(error);\n      });\n      this.client.interceptors.response.use(function (response) {\n        if (response.config.headers.showLoading) {\n          hideLoading();\n        }\n\n        if (response.data && response.data.status === 'FAILED') {\n          let errors = response.data.appsErrorMessages;\n\n          if (errors) {\n            showErrorMessage(errors[0].errorMessage);\n          }\n\n          throw errors;\n        }\n\n        if (response.config.headers.message) {\n          showSuccessMessage(response.config.headers.message);\n        }\n\n        return response;\n      }, function (error) {\n        hideLoading();\n        const {\n          config,\n          response: {\n            status\n          }\n        } = error;\n\n        if (status === 403 || status === 401 || status === 405) {\n          let isValidLogin = jwtService.isUserLoggedIn();\n\n          if (isValidLogin) {\n            return client.request(config);\n          } else {\n            jwtService.logout();\n            history.push({\n              pathname: Constants.PAGES.login\n            });\n          }\n\n          if (config.url && config.url.indexOf(loginAppEndpoints.login.url) !== -1) {\n            showErrorMessage('Invalid credentials');\n          }\n        } else {\n          if (status === 500 || status === 504) {\n            showErrorMessage('Please contact system administrator');\n          } else if (error && error.config.headers.showToast && error.message) {\n            showErrorMessage(error.message);\n          }\n\n          return Promise.reject(error);\n        }\n      });\n    };\n\n    this.get = (config, data) => {\n      return this.request(config.url, 'GET', data, config.headerParam);\n    };\n\n    this.post = (config, data) => {\n      return this.request(config.url, 'POST', data, config.headerParam);\n    };\n\n    this.request = (url, method, data, headerParams) => {\n      let config = {\n        url: url,\n        method: method,\n        withCredentials: true,\n        timeout: 0,\n        headers: {}\n      };\n\n      if (headerParams.isFileUpload) {\n        config.data = data;\n      } else if (headerParams.isFileDownload) {\n        config.responseType = 'blob';\n      } else {\n        if (data) {\n          if (method === 'PUT' || method === 'POST' || method === 'DELETE' || method === 'PATCH') {\n            config.data = JSON.stringify(data);\n          }\n        }\n      }\n\n      config.headers.showLoading = headerParams.showLoading;\n      config.headers.message = headerParams.message;\n      config.headers.showToast = headerParams.showToast;\n      return this.client.request(config);\n    };\n  }\n\n}\n\nconst instance = new dataService();\nexport default instance;","map":{"version":3,"sources":["C:/Users/chamald/Desktop/Chamal/react/react-app/src/app/services/dataService/dataService.js"],"names":["axios","hideLoading","showLoading","jwtService","showErrorMessage","showSuccessMessage","history","Constants","loginAppEndpoints","dataService","init","client","create","baseURL","responseType","headers","interceptors","request","use","config","accessToken","getAccessToken","Authorization","error","Promise","reject","response","data","status","errors","appsErrorMessages","errorMessage","message","isValidLogin","isUserLoggedIn","logout","push","pathname","PAGES","login","url","indexOf","showToast","get","headerParam","post","method","headerParams","withCredentials","timeout","isFileUpload","isFileDownload","JSON","stringify","instance"],"mappings":"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","sourcesContent":["import axios from \"axios/index\";\nimport {hideLoading, showLoading} from '../../../utils/LoaderHelper';\nimport jwtService from '../auth/jwtService';\nimport {showErrorMessage, showSuccessMessage} from \"../../../utils/ToastUtil\";\nimport history from '../../../@history';\nimport Constants from \"../../../utils/Constants\";\nimport loginAppEndpoints from \"../../auth/store/actions/login.api\";\n\nclass dataService {\n\n    client;\n\n    init = () => {\n        this.client = axios.create({\n            baseURL: '/',\n            responseType: 'json',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Access-Control-Allow-Origin': '*',\n                'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS, HEAD',\n            }\n        });\n\n        let client = this.client;\n\n        this.client.interceptors.request.use(function (config) {\n\n            if (config.headers.showLoading) {\n                showLoading();\n            }\n\n            let accessToken = jwtService.getAccessToken();\n            config.headers.Authorization = \"Bearer \" + accessToken;\n\n            return config;\n        }, function (error) {\n            // Do something with request error\n            return Promise.reject(error);\n        });\n\n        this.client.interceptors.response.use(function (response) {\n            if (response.config.headers.showLoading) {\n                hideLoading();\n            }\n\n            if (response.data && response.data.status === 'FAILED') {\n                let errors = response.data.appsErrorMessages;\n                if (errors) {\n                    showErrorMessage(errors[0].errorMessage);\n                }\n                throw errors;\n            }\n\n            if (response.config.headers.message) {\n                showSuccessMessage(response.config.headers.message);\n            }\n\n            return response;\n        }, function (error) {\n            hideLoading();\n\n            const {config, response: {status}} = error;\n\n            if (status === 403 || status === 401 || status === 405) {\n                let isValidLogin = jwtService.isUserLoggedIn();\n                if (isValidLogin) {\n                    return client.request(config);\n                } else {\n                    jwtService.logout();\n                    history.push({\n                        pathname: Constants.PAGES.login\n                    });\n                }\n\n                if (config.url && config.url.indexOf(loginAppEndpoints.login.url) !== -1) {\n                    showErrorMessage('Invalid credentials');\n                }\n            } else {\n                if (status === 500 || status === 504) {\n                    showErrorMessage('Please contact system administrator');\n                } else if (error && error.config.headers.showToast && error.message) {\n                    showErrorMessage(error.message);\n                }\n\n                return Promise.reject(error);\n            }\n        });\n    };\n\n    get = (config, data) => {\n        return this.request(config.url, 'GET', data, config.headerParam);\n    };\n\n    post = (config, data) => {\n        return this.request(config.url, 'POST', data, config.headerParam);\n    };\n\n    request = (url, method, data, headerParams) => {\n        let config = {\n            url: url,\n            method: method,\n            withCredentials: true,\n            timeout: 0,\n            headers: {}\n        };\n\n        if (headerParams.isFileUpload) {\n            config.data = data;\n        } else if (headerParams.isFileDownload) {\n            config.responseType = 'blob';\n        } else {\n            if (data) {\n                if (method === 'PUT'\n                    || method === 'POST'\n                    || method === 'DELETE'\n                    || method === 'PATCH'\n                ) {\n                    config.data = JSON.stringify(data);\n                }\n            }\n        }\n\n        config.headers.showLoading = headerParams.showLoading;\n        config.headers.message = headerParams.message;\n        config.headers.showToast = headerParams.showToast;\n\n        return this.client.request(config);\n    };\n}\n\nconst instance = new dataService();\n\nexport default instance;\n"]},"metadata":{},"sourceType":"module"}