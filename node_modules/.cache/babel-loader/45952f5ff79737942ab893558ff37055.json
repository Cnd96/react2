{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chamald\\\\Desktop\\\\Chamal\\\\react\\\\react-app\\\\src\\\\app\\\\views\\\\admin\\\\patient\\\\newPatient\\\\stepper\\\\stepComponents\\\\medicalTests\\\\components\\\\MedicalTestListNew.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { CCol, CRow, CFormGroup, CInput, CSelect } from \"@coreui/react\";\nimport * as Action from \"../store/actions/patient.add.medical.test.results.action\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst generateSaveObject = (checkupData, patientMedicalTestsData) => {\n  return Object.assign({}, {\n    checkupID: checkupData.checkup ? checkupData.checkup.checkupID : null,\n    medicalTestResults: patientMedicalTestsData.formData\n  });\n};\n\nconst colors = ['#e57373', '#f06292', '#fff176', '#dce775', '#4dd0e1', '#ffb74d', '#64b5f6', '#a1887f'];\n\nconst MedicalTestList = () => {\n  _s();\n\n  let dispatch = useDispatch();\n  const patientMedicalTestsData = useSelector(_ref => {\n    let {\n      patientMedicalTest\n    } = _ref;\n    return patientMedicalTest.patientMedicalTestAddEdit;\n  });\n  const [formValue, setFormValue] = useState({\n    value: '',\n    measureUnit: ''\n  });\n\n  const onChange = (event, record) => {\n    const target = event.target;\n    const name = target.name;\n    dispatch(Actions.onSetMedicalResult({\n      medicalTestRecordID: record.medicalTestRecordID,\n      ...formValue,\n      [name]: target.value\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(CRow, {\n      children: [/*#__PURE__*/_jsxDEV(CCol, {\n        sm: \"12\",\n        md: \"6\",\n        lg: \"5\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            overflowY: 'scroll',\n            height: '500px',\n            overflowX: 'hidden'\n          },\n          children: patientMedicalTestsData.medicalTestTypes.map((medicalTestType, indexr) => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              backgroundColor: `${colors[indexr]}`,\n              marginBottom: '20px'\n            },\n            id: 'm' + indexr,\n            children: [/*#__PURE__*/_jsxDEV(CRow, {\n              style: {\n                paddingTop: '10px'\n              },\n              children: /*#__PURE__*/_jsxDEV(CCol, {\n                sm: \"12\",\n                md: \"6\",\n                lg: \"6\",\n                children: /*#__PURE__*/_jsxDEV(\"h4\", {\n                  style: {\n                    textAlign: 'right'\n                  },\n                  children: medicalTestType.testType\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 42,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 41,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 33\n            }, this), medicalTestType.medicalTestRecords.map((record, index) => /*#__PURE__*/_jsxDEV(CRow, {\n              children: [/*#__PURE__*/_jsxDEV(CCol, {\n                sm: \"12\",\n                md: \"6\",\n                lg: \"5\",\n                children: /*#__PURE__*/_jsxDEV(\"h6\", {\n                  style: {\n                    textAlign: 'right',\n                    paddingTop: '10px'\n                  },\n                  children: record.measurementName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 49,\n                  columnNumber: 49\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 48,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(CCol, {\n                sm: \"12\",\n                md: \"6\",\n                lg: \"3\",\n                children: /*#__PURE__*/_jsxDEV(CFormGroup, {\n                  children: /*#__PURE__*/_jsxDEV(CInput, {\n                    type: \"text\",\n                    name: 'value',\n                    placeholder: 'Value',\n                    onChange: e => onChange(e, record)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 53,\n                    columnNumber: 53\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 52,\n                  columnNumber: 49\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 51,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(CCol, {\n                sm: \"12\",\n                md: \"6\",\n                lg: \"3\",\n                children: /*#__PURE__*/_jsxDEV(CFormGroup, {\n                  children: /*#__PURE__*/_jsxDEV(CSelect, {\n                    custom: true,\n                    name: \"status\",\n                    style: {\n                      height: '35px'\n                    },\n                    children: record.measurementUnits.map(item => {\n                      return /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: item,\n                        children: item\n                      }, item, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 68,\n                        columnNumber: 69\n                      }, this);\n                    })\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 64,\n                    columnNumber: 53\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 63,\n                  columnNumber: 49\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 45\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 41\n            }, this))]\n          }, indexr, true, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CCol, {\n        sm: \"12\",\n        md: \"6\",\n        lg: \"7\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"medicalTestTypeMenu\",\n          children: patientMedicalTestsData.medicalTestTypes.map((medicalTestType, indexr) => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              backgroundColor: `${colors[indexr]}`\n            },\n            onClick: () => document.getElementById('m' + indexr).scrollIntoView(),\n            className: \"medicalTestTypeCard\",\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              children: medicalTestType.testType\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 33\n            }, this)\n          }, indexr, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MedicalTestList, \"l1duNpxKNtEL9EEBRulq77G3zQs=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = MedicalTestList;\nexport default MedicalTestList;\n\nvar _c;\n\n$RefreshReg$(_c, \"MedicalTestList\");","map":{"version":3,"sources":["C:/Users/chamald/Desktop/Chamal/react/react-app/src/app/views/admin/patient/newPatient/stepper/stepComponents/medicalTests/components/MedicalTestListNew.js"],"names":["React","useEffect","useState","useDispatch","useSelector","CCol","CRow","CFormGroup","CInput","CSelect","Action","generateSaveObject","checkupData","patientMedicalTestsData","Object","assign","checkupID","checkup","medicalTestResults","formData","colors","MedicalTestList","dispatch","patientMedicalTest","patientMedicalTestAddEdit","formValue","setFormValue","value","measureUnit","onChange","event","record","target","name","Actions","onSetMedicalResult","medicalTestRecordID","overflowY","height","overflowX","medicalTestTypes","map","medicalTestType","indexr","backgroundColor","marginBottom","paddingTop","textAlign","testType","medicalTestRecords","index","measurementName","e","measurementUnits","item","document","getElementById","scrollIntoView"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport { CCol, CRow, CFormGroup, CInput,CSelect} from \"@coreui/react\";\n\nimport * as Action from \"../store/actions/patient.add.medical.test.results.action\";\n\nconst generateSaveObject = (checkupData, patientMedicalTestsData) => {\n    return Object.assign({}, {\n        checkupID: checkupData.checkup ? checkupData.checkup.checkupID : null,\n        medicalTestResults: patientMedicalTestsData.formData\n    });\n};\n\nconst colors = ['#e57373','#f06292','#fff176','#dce775','#4dd0e1','#ffb74d','#64b5f6','#a1887f'];\n\nconst MedicalTestList = () => {\n\n    let dispatch = useDispatch();\n    const patientMedicalTestsData = useSelector(({patientMedicalTest}) => patientMedicalTest.patientMedicalTestAddEdit);\n    const [formValue, setFormValue] = useState({value: '', measureUnit: ''});\n    const onChange = (event,record) => {\n        const target = event.target;\n        const name = target.name;\n        dispatch(Actions.onSetMedicalResult({\n            medicalTestRecordID: record.medicalTestRecordID,\n            ...formValue,\n            [name]: target.value,\n        }));\n    };\n\n\n    return (\n        <div>\n            <CRow>\n                <CCol sm=\"12\" md=\"6\" lg=\"5\">\n                    <div  style={{overflowY:'scroll',height:'500px',overflowX:'hidden'}} >\n                        {   \n                        patientMedicalTestsData.medicalTestTypes.map((medicalTestType, indexr) =>\n                            <div key={indexr} style={{backgroundColor:`${colors[indexr]}`,marginBottom:'20px'}} id={'m'+indexr}>\n                                <CRow style={{paddingTop:'10px'}}>\n                                    <CCol sm=\"12\" md=\"6\" lg=\"6\" >\n                                        <h4 style={{textAlign: 'right'}}>{medicalTestType.testType}</h4> \n                                    </CCol>\n                                </CRow>\n                                {\n                                    medicalTestType.medicalTestRecords.map((record,index)=>\n                                        <CRow key={index} >\n                                            <CCol sm=\"12\" md=\"6\" lg=\"5\" >\n                                                <h6 style={{textAlign: 'right',paddingTop:'10px'}}>{record.measurementName}</h6> \n                                            </CCol>\n                                            <CCol sm=\"12\" md=\"6\" lg=\"3\" >\n                                                <CFormGroup>\n                                                    <CInput\n                                                        type=\"text\"\n                                                        name={'value'}\n                                                        placeholder={'Value'}\n                                                        onChange={(e)=>onChange(e,record)}\n                                                    />\n                                                </CFormGroup>\n                                            </CCol>\n                                            \n                                            <CCol sm=\"12\" md=\"6\" lg=\"3\" >\n                                                <CFormGroup>\n                                                    <CSelect custom name=\"status\" style={{height:'35px'}} >\n                                                        {\n                                                            record.measurementUnits.map((item) => {\n                                                                return (\n                                                                    <option key={item} value={item}>{item}</option>\n                                                                );\n                                                            })\n                                                        }\n                                                    </CSelect>\n                                                </CFormGroup> \n                                            </CCol>\n                                        </CRow>\n                                    )\n                                }\n                                \n                            </div>\n                        )\n                        }\n                    </div>\n                </CCol>\n                \n                <CCol sm=\"12\" md=\"6\" lg=\"7\">\n                    <div className='medicalTestTypeMenu'>\n                        {\n                            patientMedicalTestsData.medicalTestTypes.map((medicalTestType, indexr) =>\n                            <div style={{backgroundColor:`${colors[indexr]}`}} key={indexr} onClick={()=>document.getElementById('m'+indexr).scrollIntoView()} className='medicalTestTypeCard'  >\n                                <a >{medicalTestType.testType}</a> \n                            </div>\n                            )\n                        }\n                    </div>\n                </CCol>\n            </CRow>\n        </div>\n    );\n};\n\nexport default MedicalTestList;"]},"metadata":{},"sourceType":"module"}