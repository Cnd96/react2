{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chamald\\\\Desktop\\\\Chamal\\\\react\\\\react-app\\\\src\\\\app\\\\views\\\\admin\\\\patient\\\\newPatient\\\\stepper\\\\stepComponents\\\\registerPatient\\\\RegisterPatientBase.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport PatientAddEditFrom from \"./components/PatientAddEditFrom\";\nimport withReducer from \"../../../../../../../store/withReducer\";\nimport reducer from \"./store/reducers\";\nimport { getStorageItem } from \"../../../../../../../../utils/StorageUtils\";\nimport Constants from \"../../../../../../../../utils/Constants\";\nimport { useDispatch } from \"react-redux\";\nimport * as Action from \"./store/actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst RegisterPatientBase = _ref => {\n  _s();\n\n  let {\n    setPageIndex,\n    nextPageIndex\n  } = _ref;\n  let dispatch = useDispatch();\n  useEffect(() => {\n    let patientID = getStorageItem(Constants.STORAGE.PATIENT_ID);\n\n    if (patientID) {\n      dispatch(Action.getPatientDTOByID(patientID));\n    } else {\n      dispatch(Action.reset());\n    }\n\n    return () => {\n      dispatch(Action.reset());\n    };\n  }, [dispatch]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(PatientAddEditFrom, {\n      setPageIndex: setPageIndex,\n      nextPageIndex: nextPageIndex\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(RegisterPatientBase, \"rAh3tY+Iv6hWC9AI4Dm+rCbkwNE=\", false, function () {\n  return [useDispatch];\n});\n\n_c = RegisterPatientBase;\nexport default withReducer('patient', reducer)(RegisterPatientBase);\n\nvar _c;\n\n$RefreshReg$(_c, \"RegisterPatientBase\");","map":{"version":3,"sources":["C:/Users/chamald/Desktop/Chamal/react/react-app/src/app/views/admin/patient/newPatient/stepper/stepComponents/registerPatient/RegisterPatientBase.js"],"names":["React","useEffect","PatientAddEditFrom","withReducer","reducer","getStorageItem","Constants","useDispatch","Action","RegisterPatientBase","setPageIndex","nextPageIndex","dispatch","patientID","STORAGE","PATIENT_ID","getPatientDTOByID","reset"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,kBAAP,MAA+B,iCAA/B;AACA,OAAOC,WAAP,MAAwB,wCAAxB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,SAAQC,cAAR,QAA6B,4CAA7B;AACA,OAAOC,SAAP,MAAsB,yCAAtB;AACA,SAAQC,WAAR,QAA0B,aAA1B;AACA,OAAO,KAAKC,MAAZ,MAAwB,iBAAxB;;;;AAEA,MAAMC,mBAAmB,GAAG,QAAmC;AAAA;;AAAA,MAAlC;AAACC,IAAAA,YAAD;AAAeC,IAAAA;AAAf,GAAkC;AAE3D,MAAIC,QAAQ,GAAGL,WAAW,EAA1B;AAEAN,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIY,SAAS,GAAGR,cAAc,CAACC,SAAS,CAACQ,OAAV,CAAkBC,UAAnB,CAA9B;;AACA,QAAIF,SAAJ,EAAe;AACXD,MAAAA,QAAQ,CAACJ,MAAM,CAACQ,iBAAP,CAAyBH,SAAzB,CAAD,CAAR;AACH,KAFD,MAEO;AACHD,MAAAA,QAAQ,CAACJ,MAAM,CAACS,KAAP,EAAD,CAAR;AACH;;AACD,WAAQ,MAAM;AACVL,MAAAA,QAAQ,CAACJ,MAAM,CAACS,KAAP,EAAD,CAAR;AACH,KAFD;AAGH,GAVQ,EAUN,CAACL,QAAD,CAVM,CAAT;AAYA,sBACI;AAAA,2BAWI,QAAC,kBAAD;AAAoB,MAAA,YAAY,EAAEF,YAAlC;AAAgD,MAAA,aAAa,EAAEC;AAA/D;AAAA;AAAA;AAAA;AAAA;AAXJ,mBADJ;AAeH,CA/BD;;GAAMF,mB;UAEaF,W;;;KAFbE,mB;AAiCN,eAAeN,WAAW,CAAC,SAAD,EAAYC,OAAZ,CAAX,CAAgCK,mBAAhC,CAAf","sourcesContent":["import React, {useEffect} from 'react';\nimport PatientAddEditFrom from \"./components/PatientAddEditFrom\";\nimport withReducer from \"../../../../../../../store/withReducer\";\nimport reducer from \"./store/reducers\";\nimport {getStorageItem} from \"../../../../../../../../utils/StorageUtils\";\nimport Constants from \"../../../../../../../../utils/Constants\";\nimport {useDispatch} from \"react-redux\";\nimport * as Action from \"./store/actions\";\n\nconst RegisterPatientBase = ({setPageIndex, nextPageIndex}) => {\n\n    let dispatch = useDispatch();\n\n    useEffect(() => {\n        let patientID = getStorageItem(Constants.STORAGE.PATIENT_ID);\n        if (patientID) {\n            dispatch(Action.getPatientDTOByID(patientID))\n        } else {\n            dispatch(Action.reset());\n        }\n        return (() => {\n            dispatch(Action.reset());\n        })\n    }, [dispatch]);\n\n    return (\n        <>\n            {/*This following implementations is for Patient Search*/}\n            {/*<div className={'privilege-main-category-section'}>*/}\n            {/*    <div className={'privilege-category-name'}>*/}\n            {/*        <h5>Search Patient </h5>*/}\n            {/*    </div>*/}\n            {/*    <div className={'privilege-category-section'}>*/}\n            {/*        <SearchPatientFrom/>*/}\n            {/*    </div>*/}\n            {/*</div>*/}\n\n            <PatientAddEditFrom setPageIndex={setPageIndex} nextPageIndex={nextPageIndex}/>\n        </>\n    );\n};\n\nexport default withReducer('patient', reducer)(RegisterPatientBase);"]},"metadata":{},"sourceType":"module"}