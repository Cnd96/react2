{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chamald\\\\Desktop\\\\Chamal\\\\react\\\\react-app\\\\src\\\\app\\\\views\\\\admin\\\\patient\\\\newPatient\\\\stepper\\\\stepComponents\\\\selectFamilyHistory\\\\SelectFamilyHistory.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport withReducer from \"../../../../../../../store/withReducer\";\nimport reducer from \"./store/reducers\";\nimport { CNav, CTabContent, CTabs } from \"@coreui/react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as Action from \"./store/actions\";\nimport * as PatientAction from \"../registerPatient/store/actions\";\nimport * as _ from \"lodash\";\nimport TabHeader from \"./components/TabHeader\";\nimport TabBody from \"./components/TabBody\";\nimport NextPrevButtonGroup from \"../../../../../../common/NextPrevButtonGroup\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst generateSaveObject = (patientData, familyTypeData) => {\n  let removedMedicalDiseasesMap = {};\n  let addedMedicalDiseasesMap = {};\n  let selectedMedicalDiseasesMap = familyTypeData.selectedMedicalDiseasesMap;\n  let currentMedicalDiseasesMap = familyTypeData.currentMedicalDiseasesMap;\n  let isChanged = false;\n  familyTypeData.familyTypes.forEach(familyType => {\n    removedMedicalDiseasesMap[familyType.familyTypeID] = _.difference(currentMedicalDiseasesMap[familyType.familyTypeID], selectedMedicalDiseasesMap[familyType.familyTypeID]);\n    addedMedicalDiseasesMap[familyType.familyTypeID] = _.difference(selectedMedicalDiseasesMap[familyType.familyTypeID], currentMedicalDiseasesMap[familyType.familyTypeID]);\n  });\n  familyTypeData.familyTypes.forEach(familyType => {\n    if (removedMedicalDiseasesMap[familyType.familyTypeID].length > 0 || addedMedicalDiseasesMap[familyType.familyTypeID].length > 0) {\n      isChanged = true;\n    }\n  });\n  return Object.assign({}, {\n    removedMedicalDiseases: removedMedicalDiseasesMap,\n    familyWiseMedicalDiseases: addedMedicalDiseasesMap\n  }, {\n    patientID: patientData.patient ? patientData.patient.patientID : null\n  }, {\n    isChanged: isChanged\n  });\n};\n\nconst SelectFamilyHistory = _ref => {\n  _s();\n\n  let {\n    setPageIndex,\n    nextPageIndex,\n    prevPageIndex\n  } = _ref;\n  const dispatch = useDispatch();\n  const patientData = useSelector(_ref2 => {\n    let {\n      patient\n    } = _ref2;\n    return patient.patientAddEdit;\n  });\n  const familyTypeData = useSelector(_ref3 => {\n    let {\n      familyType\n    } = _ref3;\n    return familyType.familyTypeAddEdit;\n  });\n  const [activeTabID, setActiveTabID] = useState();\n  useEffect(() => {\n    dispatch(Action.setPatientInitialData({\n      currentMedicalDiseasesMap: patientData.patient.familyWiseMedicalDiseases,\n      familyTypeID: patientData.patient.familyTypeID\n    }));\n    dispatch(Action.getAllFamilyTypes());\n    dispatch(Action.getMedicalDiseasesList({}));\n  }, []);\n  useEffect(() => {\n    setActiveTabID(familyTypeData.familyTypes[0] ? familyTypeData.familyTypes[0].familyTypeID : 0);\n  }, [familyTypeData.familyTypes]);\n\n  const saveFunction = () => {\n    let saveObject = generateSaveObject(patientData, familyTypeData);\n\n    if (saveObject.isChanged) {\n      dispatch(Action.saveOrUpdatePatientWithFamilyDiseases(saveObject)).then(response => {\n        dispatch(PatientAction.setPatient(response.payload));\n        setPageIndex(nextPageIndex);\n      });\n    } else {\n      setPageIndex(nextPageIndex);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(NextPrevButtonGroup, {\n      setPageIndex: setPageIndex,\n      prevPageIndex: prevPageIndex,\n      saveFunction: saveFunction,\n      isValid: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CTabs, {\n      activeTab: `${activeTabID}`,\n      children: [/*#__PURE__*/_jsxDEV(CNav, {\n        variant: \"tabs\",\n        children: familyTypeData.familyTypes.map((familyType, index) => {\n          return /*#__PURE__*/_jsxDEV(TabHeader, {\n            familyType: familyType,\n            index: index\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 36\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CTabContent, {\n        children: familyTypeData.familyTypes.map((familyType, index) => {\n          return /*#__PURE__*/_jsxDEV(TabBody, {\n            familyType: familyType,\n            index: index\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 36\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SelectFamilyHistory, \"9oHAvN4R4enWt166RK2XV3yz4kU=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = SelectFamilyHistory;\nexport default withReducer('familyType', reducer)(SelectFamilyHistory);\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectFamilyHistory\");","map":{"version":3,"sources":["C:/Users/chamald/Desktop/Chamal/react/react-app/src/app/views/admin/patient/newPatient/stepper/stepComponents/selectFamilyHistory/SelectFamilyHistory.js"],"names":["React","useEffect","useState","withReducer","reducer","CNav","CTabContent","CTabs","useDispatch","useSelector","Action","PatientAction","_","TabHeader","TabBody","NextPrevButtonGroup","generateSaveObject","patientData","familyTypeData","removedMedicalDiseasesMap","addedMedicalDiseasesMap","selectedMedicalDiseasesMap","currentMedicalDiseasesMap","isChanged","familyTypes","forEach","familyType","familyTypeID","difference","length","Object","assign","removedMedicalDiseases","familyWiseMedicalDiseases","patientID","patient","SelectFamilyHistory","setPageIndex","nextPageIndex","prevPageIndex","dispatch","patientAddEdit","familyTypeAddEdit","activeTabID","setActiveTabID","setPatientInitialData","getAllFamilyTypes","getMedicalDiseasesList","saveFunction","saveObject","saveOrUpdatePatientWithFamilyDiseases","then","response","setPatient","payload","map","index"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport withReducer from \"../../../../../../../store/withReducer\";\nimport reducer from \"./store/reducers\";\nimport {CNav, CTabContent, CTabs} from \"@coreui/react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport * as Action from \"./store/actions\";\nimport * as PatientAction from \"../registerPatient/store/actions\";\nimport * as _ from \"lodash\";\nimport TabHeader from \"./components/TabHeader\";\nimport TabBody from \"./components/TabBody\";\nimport NextPrevButtonGroup from \"../../../../../../common/NextPrevButtonGroup\";\n\nconst generateSaveObject = (patientData, familyTypeData) => {\n    let removedMedicalDiseasesMap = {};\n    let addedMedicalDiseasesMap = {};\n    let selectedMedicalDiseasesMap = familyTypeData.selectedMedicalDiseasesMap;\n    let currentMedicalDiseasesMap = familyTypeData.currentMedicalDiseasesMap;\n    let isChanged = false;\n\n    familyTypeData.familyTypes.forEach((familyType) => {\n        removedMedicalDiseasesMap[familyType.familyTypeID] = _.difference(currentMedicalDiseasesMap[familyType.familyTypeID], selectedMedicalDiseasesMap[familyType.familyTypeID]);\n        addedMedicalDiseasesMap[familyType.familyTypeID] = _.difference(selectedMedicalDiseasesMap[familyType.familyTypeID], currentMedicalDiseasesMap[familyType.familyTypeID]);\n    });\n\n    familyTypeData.familyTypes.forEach((familyType) => {\n        if (removedMedicalDiseasesMap[familyType.familyTypeID].length > 0 || addedMedicalDiseasesMap[familyType.familyTypeID].length > 0) {\n            isChanged = true;\n        }\n    });\n\n    return Object.assign({}, {\n        removedMedicalDiseases: removedMedicalDiseasesMap,\n        familyWiseMedicalDiseases: addedMedicalDiseasesMap\n    }, {patientID: patientData.patient ? patientData.patient.patientID : null}, {isChanged: isChanged});\n};\n\nconst SelectFamilyHistory = ({setPageIndex, nextPageIndex, prevPageIndex}) => {\n\n    const dispatch = useDispatch();\n    const patientData = useSelector(({patient}) => patient.patientAddEdit);\n    const familyTypeData = useSelector(({familyType}) => familyType.familyTypeAddEdit);\n    const [activeTabID, setActiveTabID] = useState();\n\n    useEffect(() => {\n        dispatch(Action.setPatientInitialData({\n            currentMedicalDiseasesMap: patientData.patient.familyWiseMedicalDiseases,\n            familyTypeID: patientData.patient.familyTypeID\n        }));\n        dispatch(Action.getAllFamilyTypes());\n        dispatch(Action.getMedicalDiseasesList({}));\n\n    }, []);\n\n    useEffect(() => {\n        setActiveTabID(familyTypeData.familyTypes[0] ? familyTypeData.familyTypes[0].familyTypeID : 0);\n    }, [familyTypeData.familyTypes]);\n\n    const saveFunction = () => {\n        let saveObject = generateSaveObject(patientData, familyTypeData);\n        if (saveObject.isChanged) {\n            dispatch(Action.saveOrUpdatePatientWithFamilyDiseases(saveObject)).then(response => {\n                dispatch(PatientAction.setPatient(response.payload));\n                setPageIndex(nextPageIndex);\n            })\n        } else {\n            setPageIndex(nextPageIndex);\n        }\n    };\n\n    return (\n        <div>\n\n            <NextPrevButtonGroup setPageIndex={setPageIndex} prevPageIndex={prevPageIndex} saveFunction={saveFunction}\n                                 isValid={true}/>\n\n            <CTabs activeTab={`${activeTabID}`}>\n                <CNav variant=\"tabs\">\n                    {\n                        familyTypeData.familyTypes.map((familyType, index) => {\n                            return <TabHeader familyType={familyType} index={index} key={index}/>\n                        })\n                    }\n                </CNav>\n                <CTabContent>\n                    {\n                        familyTypeData.familyTypes.map((familyType, index) => {\n                            return <TabBody familyType={familyType} index={index} key={index}/>\n                        })\n                    }\n                </CTabContent>\n            </CTabs>\n\n        </div>\n    );\n};\n\nexport default withReducer('familyType', reducer)(SelectFamilyHistory);"]},"metadata":{},"sourceType":"module"}