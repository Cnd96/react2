{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chamald\\\\Desktop\\\\Chamal\\\\react\\\\react-app\\\\src\\\\app\\\\views\\\\admin\\\\patient\\\\registeredPatient\\\\search\\\\PatientSearchApp.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Constants from \"../../../../../../utils/Constants\";\nimport { getPagedDataFromState } from \"../../../../../../utils/DataExtractHelper\";\nimport { getConstantValueForSearch } from \"../../../../../../utils/FormUtils\";\nimport * as Actions from \"../store/actions/index\";\nimport withReducer from \"../../../../../store/withReducer\";\nimport reducer from \"../store/reducers/index\";\nimport PatientResult from \"./components/PatientResult\";\nimport PatientSearch from \"./components/PatientSearch\";\nimport { removeStorageItem, setStorageItem } from \"../../../../../../utils/StorageUtils\";\nimport * as PatientActions from \"../../newPatient/stepper/stepComponents/registerPatient/store/actions\";\nimport * as CheckupActions from \"../../newPatient/stepper/stepComponents/createCheckUp/store/action\";\nimport history from \"../../../../../../@history\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst PatientSearchApp = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const data = useSelector(_ref => {\n    let {\n      patientSearch\n    } = _ref;\n    return patientSearch.patientSearch;\n  });\n  useEffect(() => {\n    onSearch();\n  }, [dispatch, data.pageInfo, data.searchData]);\n  useEffect(() => {\n    return () => {\n      dispatch(Actions.resetSearchData());\n    };\n  }, [dispatch]);\n\n  const createCheckUp = patientID => {\n    removeStorageItem(Constants.STORAGE.CHECKUP_ID);\n    dispatch(PatientActions.onResetPatientData());\n    dispatch(CheckupActions.resetCheckupData());\n    setStorageItem(Constants.STORAGE.PATIENT_ID, patientID);\n    history.push({\n      pathname: Constants.PAGES.newPatient\n    });\n  };\n\n  let onSearch = () => {\n    let pageInfo = data.pageInfo;\n    let formData = data.searchData;\n    let pageData = getPagedDataFromState(pageInfo);\n    let searchData = { ...pageData,\n      ...formData,\n      status: getConstantValueForSearch(formData.status, Constants.STATUS_CONST.ACT)\n    };\n    dispatch(Actions.getPagedPatients(searchData));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(PatientSearch, {\n      createCheckUp: createCheckUp\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PatientResult, {\n      createCheckUp: createCheckUp\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(PatientSearchApp, \"hTtiwWwa8HKknKpsxSg+Go+O4m0=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = PatientSearchApp;\nexport default withReducer('patientSearch', reducer)(PatientSearchApp);\n\nvar _c;\n\n$RefreshReg$(_c, \"PatientSearchApp\");","map":{"version":3,"sources":["C:/Users/chamald/Desktop/Chamal/react/react-app/src/app/views/admin/patient/registeredPatient/search/PatientSearchApp.js"],"names":["React","useEffect","useDispatch","useSelector","Constants","getPagedDataFromState","getConstantValueForSearch","Actions","withReducer","reducer","PatientResult","PatientSearch","removeStorageItem","setStorageItem","PatientActions","CheckupActions","history","PatientSearchApp","dispatch","data","patientSearch","onSearch","pageInfo","searchData","resetSearchData","createCheckUp","patientID","STORAGE","CHECKUP_ID","onResetPatientData","resetCheckupData","PATIENT_ID","push","pathname","PAGES","newPatient","formData","pageData","status","STATUS_CONST","ACT","getPagedPatients"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,OAAOC,SAAP,MAAsB,mCAAtB;AACA,SAAQC,qBAAR,QAAoC,2CAApC;AACA,SAAQC,yBAAR,QAAwC,mCAAxC;AACA,OAAO,KAAKC,OAAZ,MAAyB,wBAAzB;AACA,OAAOC,WAAP,MAAwB,kCAAxB;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AACA,SAAQC,iBAAR,EAA2BC,cAA3B,QAAgD,sCAAhD;AACA,OAAO,KAAKC,cAAZ,MAAgC,uEAAhC;AACA,OAAO,KAAKC,cAAZ,MAAgC,oEAAhC;AACA,OAAOC,OAAP,MAAoB,4BAApB;;;;AAEA,MAAMC,gBAAgB,GAAG,MAAM;AAAA;;AAC3B,QAAMC,QAAQ,GAAGhB,WAAW,EAA5B;AACA,QAAMiB,IAAI,GAAGhB,WAAW,CAAC;AAAA,QAAC;AAACiB,MAAAA;AAAD,KAAD;AAAA,WAAqBA,aAAa,CAACA,aAAnC;AAAA,GAAD,CAAxB;AAEAnB,EAAAA,SAAS,CAAC,MAAM;AACZoB,IAAAA,QAAQ;AACX,GAFQ,EAEN,CAACH,QAAD,EAAWC,IAAI,CAACG,QAAhB,EAA0BH,IAAI,CAACI,UAA/B,CAFM,CAAT;AAIAtB,EAAAA,SAAS,CAAC,MAAM;AACZ,WAAQ,MAAM;AACViB,MAAAA,QAAQ,CAACX,OAAO,CAACiB,eAAR,EAAD,CAAR;AACH,KAFD;AAGH,GAJQ,EAIN,CAACN,QAAD,CAJM,CAAT;;AAMA,QAAMO,aAAa,GAAIC,SAAD,IAAe;AACjCd,IAAAA,iBAAiB,CAACR,SAAS,CAACuB,OAAV,CAAkBC,UAAnB,CAAjB;AACAV,IAAAA,QAAQ,CAACJ,cAAc,CAACe,kBAAf,EAAD,CAAR;AACAX,IAAAA,QAAQ,CAACH,cAAc,CAACe,gBAAf,EAAD,CAAR;AAGAjB,IAAAA,cAAc,CAACT,SAAS,CAACuB,OAAV,CAAkBI,UAAnB,EAA+BL,SAA/B,CAAd;AACAV,IAAAA,OAAO,CAACgB,IAAR,CAAa;AACTC,MAAAA,QAAQ,EAAE7B,SAAS,CAAC8B,KAAV,CAAgBC;AADjB,KAAb;AAGH,GAVD;;AAaA,MAAId,QAAQ,GAAG,MAAM;AACjB,QAAIC,QAAQ,GAAGH,IAAI,CAACG,QAApB;AACA,QAAIc,QAAQ,GAAGjB,IAAI,CAACI,UAApB;AACA,QAAIc,QAAQ,GAAGhC,qBAAqB,CAACiB,QAAD,CAApC;AACA,QAAIC,UAAU,GAAG,EACb,GAAGc,QADU;AAEb,SAAGD,QAFU;AAGbE,MAAAA,MAAM,EAAEhC,yBAAyB,CAAC8B,QAAQ,CAACE,MAAV,EAAkBlC,SAAS,CAACmC,YAAV,CAAuBC,GAAzC;AAHpB,KAAjB;AAMAtB,IAAAA,QAAQ,CAACX,OAAO,CAACkC,gBAAR,CAAyBlB,UAAzB,CAAD,CAAR;AACH,GAXD;;AAaA,sBACI;AAAA,4BACI,QAAC,aAAD;AAAe,MAAA,aAAa,EAAEE;AAA9B;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,aAAD;AAAe,MAAA,aAAa,EAAEA;AAA9B;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA,kBADJ;AAMH,CA9CD;;GAAMR,gB;UACef,W,EACJC,W;;;KAFXc,gB;AAgDN,eAAeT,WAAW,CAAC,eAAD,EAAkBC,OAAlB,CAAX,CAAsCQ,gBAAtC,CAAf","sourcesContent":["import React, {useEffect} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport Constants from \"../../../../../../utils/Constants\";\nimport {getPagedDataFromState} from \"../../../../../../utils/DataExtractHelper\";\nimport {getConstantValueForSearch} from \"../../../../../../utils/FormUtils\";\nimport * as Actions from \"../store/actions/index\";\nimport withReducer from \"../../../../../store/withReducer\";\nimport reducer from \"../store/reducers/index\";\nimport PatientResult from \"./components/PatientResult\";\nimport PatientSearch from \"./components/PatientSearch\";\nimport {removeStorageItem, setStorageItem} from \"../../../../../../utils/StorageUtils\";\nimport * as PatientActions from \"../../newPatient/stepper/stepComponents/registerPatient/store/actions\";\nimport * as CheckupActions from \"../../newPatient/stepper/stepComponents/createCheckUp/store/action\";\nimport history from \"../../../../../../@history\";\n\nconst PatientSearchApp = () => {\n    const dispatch = useDispatch();\n    const data = useSelector(({patientSearch}) => patientSearch.patientSearch);\n\n    useEffect(() => {\n        onSearch();\n    }, [dispatch, data.pageInfo, data.searchData]);\n\n    useEffect(() => {\n        return (() => {\n            dispatch(Actions.resetSearchData());\n        });\n    }, [dispatch]);\n\n    const createCheckUp = (patientID) => {\n        removeStorageItem(Constants.STORAGE.CHECKUP_ID);\n        dispatch(PatientActions.onResetPatientData());\n        dispatch(CheckupActions.resetCheckupData());\n\n\n        setStorageItem(Constants.STORAGE.PATIENT_ID, patientID);\n        history.push({\n            pathname: Constants.PAGES.newPatient\n        });\n    };\n\n\n    let onSearch = () => {\n        let pageInfo = data.pageInfo;\n        let formData = data.searchData;\n        let pageData = getPagedDataFromState(pageInfo);\n        let searchData = {\n            ...pageData,\n            ...formData,\n            status: getConstantValueForSearch(formData.status, Constants.STATUS_CONST.ACT)\n        };\n\n        dispatch(Actions.getPagedPatients(searchData));\n    };\n\n    return (\n        <>\n            <PatientSearch createCheckUp={createCheckUp}/>\n            <PatientResult createCheckUp={createCheckUp}/>\n        </>\n    );\n};\n\nexport default withReducer('patientSearch', reducer)(PatientSearchApp);"]},"metadata":{},"sourceType":"module"}