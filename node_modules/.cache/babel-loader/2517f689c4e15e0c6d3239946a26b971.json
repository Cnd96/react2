{"ast":null,"code":"import * as Actions from '../../store/actions/index';\nimport { addMedicineLine, initMedicineLines, setMedicineLines } from \"../../../../../../../../../../utils/HealthTrackerUtils\";\nimport { cloneDeep, find } from \"lodash\";\nconst initialState = {\n  prescriptionTemplateList: [],\n  prescriptionTemplateID: '',\n  prescription: '',\n  medicineList: [],\n  dose: {},\n  mealTime: {},\n  frequents: {},\n  addedTemplateMedicine: []\n};\n\nconst selectPrescriptionTemplateReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case Actions.GET_PRESCRIPTION_TEMPLATE_LIST:\n      return { ...state,\n        prescriptionTemplateList: action.payload\n      };\n\n    case Actions.ON_SELECT_PRESCRIPTION:\n      return { ...state,\n        prescriptionTemplateID: action.payload\n      };\n    // case Actions.ON_CHECKUP_SAVE_PRESCRIPTION:\n\n    case Actions.GET_PRESCRIPTION:\n    case Actions.GET_PRESCRIPTION_TEMPLATE:\n      {\n        let prescriptionTemplateMedicine = cloneDeep(action.payload.addedTemplateMedicine);\n        let dataLength = prescriptionTemplateMedicine.length;\n        let addedTemplateMedicine = [];\n\n        if (dataLength > 0) {\n          addedTemplateMedicine = setMedicineLines(dataLength);\n        } else {\n          addedTemplateMedicine = cloneDeep(state.addedTemplateMedicine);\n        }\n\n        let retrievedItems = [];\n        prescriptionTemplateMedicine.forEach((medicine, index) => {\n          let item = Object.assign({}, { ...addedTemplateMedicine[index]\n          }, { ...medicine\n          }, {\n            updated: true,\n            removed: false\n          });\n          retrievedItems.push(item);\n        });\n        console.log(retrievedItems);\n\n        if (retrievedItems.length == 0) {\n          retrievedItems = initMedicineLines();\n        } else {\n          retrievedItems.push(addMedicineLine());\n        }\n\n        let prescription = cloneDeep(state.prescription);\n        return { ...state,\n          prescription: { ...prescription,\n            ...action.payload\n          },\n          addedTemplateMedicine: retrievedItems\n        };\n      }\n\n    case Actions.GET_DOES_LIST:\n      {\n        return { ...state,\n          dose: Object.assign({}, state.dose, action.payload)\n        };\n      }\n\n    case Actions.GET_MEAL_TIME_LIST:\n      {\n        return { ...state,\n          mealTime: Object.assign({}, state.mealTime, action.payload)\n        };\n      }\n\n    case Actions.GET_FREQUENT_LIST:\n      {\n        return { ...state,\n          frequents: Object.assign({}, state.frequents, action.payload)\n        };\n      }\n\n    case Actions.ADD_TEMPLATE_MEDICINE:\n      {\n        let {\n          uuid,\n          ...data\n        } = action.payload;\n        let addedItems = cloneDeep(state.addedTemplateMedicine);\n        let item = find(addedItems, lineItem => lineItem.uuid == uuid);\n\n        if (item) {\n          item = Object.assign(item, { ...data\n          }, {\n            updated: true,\n            removed: false\n          });\n        } else {\n          addedItems.push({\n            uuid,\n            ...data\n          });\n        }\n\n        let index = _.findIndex(addedItems, item);\n\n        if (index === addedItems.length - 1) {\n          addedItems.push(addMedicineLine());\n        }\n\n        return { ...state,\n          addedTemplateMedicine: addedItems\n        };\n      }\n\n    case Actions.TOGGLE_STATE:\n      {\n        let {\n          uuid,\n          ...data\n        } = action.payload;\n        let addedItems = cloneDeep(state.addedTemplateMedicine);\n        let item = find(addedItems, lineItem => lineItem.uuid == uuid);\n\n        if (item) {\n          item = Object.assign(item, { ...data\n          }, {\n            updated: true\n          }, {\n            removed: !data.removed\n          });\n        }\n\n        return { ...state,\n          addedTemplateMedicine: addedItems\n        };\n      }\n\n    case Actions.ON_RESET_PRESCRIPTION:\n      {\n        return { ...state,\n          addedTemplateMedicine: [],\n          prescriptionTemplateID: '',\n          prescription: ''\n        };\n      }\n\n    case Actions.GET_MEDICINE_VALUE_LIST:\n      {\n        return { ...state,\n          medicineList: action.payload\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default selectPrescriptionTemplateReducer;","map":{"version":3,"sources":["C:/Users/chamald/Desktop/Chamal/react/react-app/src/app/views/admin/patient/newPatient/stepper/stepComponents/selectPrescription/store/reducer/select.prescription.reducer.js"],"names":["Actions","addMedicineLine","initMedicineLines","setMedicineLines","cloneDeep","find","initialState","prescriptionTemplateList","prescriptionTemplateID","prescription","medicineList","dose","mealTime","frequents","addedTemplateMedicine","selectPrescriptionTemplateReducer","state","action","type","GET_PRESCRIPTION_TEMPLATE_LIST","payload","ON_SELECT_PRESCRIPTION","GET_PRESCRIPTION","GET_PRESCRIPTION_TEMPLATE","prescriptionTemplateMedicine","dataLength","length","retrievedItems","forEach","medicine","index","item","Object","assign","updated","removed","push","console","log","GET_DOES_LIST","GET_MEAL_TIME_LIST","GET_FREQUENT_LIST","ADD_TEMPLATE_MEDICINE","uuid","data","addedItems","lineItem","_","findIndex","TOGGLE_STATE","ON_RESET_PRESCRIPTION","GET_MEDICINE_VALUE_LIST"],"mappings":"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","sourcesContent":["import * as Actions from '../../store/actions/index';\nimport {\n    addMedicineLine,\n    initMedicineLines,\n    setMedicineLines\n} from \"../../../../../../../../../../utils/HealthTrackerUtils\";\nimport {cloneDeep, find} from \"lodash\";\n\n\nconst initialState = {\n    prescriptionTemplateList: [],\n    prescriptionTemplateID: '',\n    prescription: '',\n    medicineList: [],\n    dose: {},\n    mealTime: {},\n    frequents: {},\n    addedTemplateMedicine: []\n};\n\nconst selectPrescriptionTemplateReducer = function (state = initialState, action) {\n\n    switch (action.type) {\n        case Actions.GET_PRESCRIPTION_TEMPLATE_LIST:\n            return {\n                ...state,\n                prescriptionTemplateList: action.payload\n            };\n\n        case Actions.ON_SELECT_PRESCRIPTION:\n            return {\n                ...state,\n                prescriptionTemplateID: action.payload\n            };\n        // case Actions.ON_CHECKUP_SAVE_PRESCRIPTION:\n        case Actions.GET_PRESCRIPTION :\n        case Actions.GET_PRESCRIPTION_TEMPLATE : {\n\n            let prescriptionTemplateMedicine = cloneDeep(action.payload.addedTemplateMedicine);\n\n            let dataLength = prescriptionTemplateMedicine.length;\n\n            let addedTemplateMedicine = [];\n\n            if (dataLength > 0) {\n                addedTemplateMedicine = setMedicineLines(dataLength);\n            } else {\n                addedTemplateMedicine = cloneDeep(state.addedTemplateMedicine);\n            }\n            let retrievedItems = [];\n            prescriptionTemplateMedicine.forEach((medicine, index) => {\n                let item = Object.assign({}, {...addedTemplateMedicine[index]}, {...medicine}, {\n                    updated: true,\n                    removed: false\n                });\n                retrievedItems.push(item);\n            });\n\n            console.log(retrievedItems);\n\n            if (retrievedItems.length == 0) {\n                retrievedItems = initMedicineLines();\n            } else {\n                retrievedItems.push(addMedicineLine());\n            }\n\n            let prescription = cloneDeep(state.prescription);\n            return {\n                ...state,\n                prescription: {...prescription, ...action.payload},\n                addedTemplateMedicine: retrievedItems\n            }\n        }\n\n        case Actions.GET_DOES_LIST : {\n            return {\n                ...state,\n                dose: Object.assign({}, state.dose, action.payload)\n            }\n        }\n\n        case Actions.GET_MEAL_TIME_LIST : {\n            return {\n                ...state,\n                mealTime: Object.assign({}, state.mealTime, action.payload)\n            }\n        }\n\n        case Actions.GET_FREQUENT_LIST : {\n            return {\n                ...state,\n                frequents: Object.assign({}, state.frequents, action.payload)\n            }\n        }\n\n        case Actions.ADD_TEMPLATE_MEDICINE : {\n            let {uuid, ...data} = action.payload;\n            let addedItems = cloneDeep(state.addedTemplateMedicine);\n            let item = find(addedItems, (lineItem) => lineItem.uuid == uuid);\n            if (item) {\n                item = Object.assign(item, {...data}, {updated: true, removed: false});\n            } else {\n                addedItems.push({uuid, ...data});\n            }\n\n            let index = _.findIndex(addedItems, item);\n\n            if (index === addedItems.length - 1) {\n                addedItems.push(addMedicineLine());\n            }\n\n            return {\n                ...state,\n                addedTemplateMedicine: addedItems\n            }\n        }\n\n\n        case Actions.TOGGLE_STATE : {\n            let {uuid, ...data} = action.payload;\n            let addedItems = cloneDeep(state.addedTemplateMedicine);\n            let item = find(addedItems, (lineItem) => lineItem.uuid == uuid);\n            if (item) {\n\n                item = Object.assign(item, {...data}, {updated: true}, {removed: !data.removed});\n            }\n\n            return {\n                ...state,\n                addedTemplateMedicine: addedItems\n            }\n        }\n\n        case Actions.ON_RESET_PRESCRIPTION : {\n\n            return {\n                ...state,\n                addedTemplateMedicine: [],\n                prescriptionTemplateID: '',\n                prescription: '',\n            }\n\n        }\n\n        case Actions.GET_MEDICINE_VALUE_LIST: {\n            return {\n                ...state,\n                medicineList: action.payload\n            }\n        }\n\n        default:\n            return state;\n    }\n\n};\n\nexport default selectPrescriptionTemplateReducer;\n"]},"metadata":{},"sourceType":"module"}