{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chamald\\\\Desktop\\\\Chamal\\\\react\\\\react-app\\\\src\\\\app\\\\views\\\\admin\\\\patient\\\\newPatient\\\\stepper\\\\stepComponents\\\\medicalTests\\\\components\\\\MedicalTestList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { CButton, CCol, CNav, CRow, CTabContent, CTabs } from \"@coreui/react\";\nimport MedicalTestTabHeader from \"./MedicalTestTabHeader\";\nimport MedicalTestTabBody from \"./MedicalTestTabBody\";\nimport Constants from \"../../../../../../../../../utils/Constants\";\nimport * as Action from \"../store/actions/patient.add.medical.test.results.action\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst generateSaveObject = (checkupData, patientMedicalTestsData) => {\n  return Object.assign({}, {\n    checkupID: checkupData.checkup ? checkupData.checkup.checkupID : null,\n    medicalTestResults: patientMedicalTestsData.formData\n  });\n};\n\nconst MedicalTestList = () => {\n  _s();\n\n  let dispatch = useDispatch();\n  const checkupData = useSelector(_ref => {\n    let {\n      checkup\n    } = _ref;\n    return checkup.checkupAddEdit;\n  });\n  const patientMedicalTestsData = useSelector(_ref2 => {\n    let {\n      patientMedicalTest\n    } = _ref2;\n    return patientMedicalTest.patientMedicalTestAddEdit;\n  });\n  const [activeTabID, setActiveTabID] = useState();\n  useEffect(() => {\n    setActiveTabID(patientMedicalTestsData.medicalTestTypes[0] ? patientMedicalTestsData.medicalTestTypes[0].medicalTestTypeID : 0);\n  }, [patientMedicalTestsData.medicalTestTypes]);\n\n  const save = () => {\n    let saveObj = generateSaveObject(checkupData, patientMedicalTestsData);\n\n    if (saveObj.checkupID) {\n      dispatch(Action.saveOrUpdateCheckupWithPatientMedicalTestsResults(saveObj));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(CRow, {\n      children: [/*#__PURE__*/_jsxDEV(CCol, {\n        sm: \"12\",\n        children: /*#__PURE__*/_jsxDEV(\"h5\", {\n          style: {\n            textAlign: 'center'\n          },\n          children: \"Checkup Recordss\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CCol, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex flex-row flex-wrap  justify-content-end\",\n          children: /*#__PURE__*/_jsxDEV(CButton, {\n            onClick: () => {\n              save();\n            },\n            color: \"success\",\n            className: \"custom-button\",\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CCol, {\n        sm: \"12\",\n        children: /*#__PURE__*/_jsxDEV(CTabs, {\n          activeTab: `${activeTabID}`,\n          children: [/*#__PURE__*/_jsxDEV(CNav, {\n            variant: \"tabs\",\n            children: _.sortBy(patientMedicalTestsData.medicalTestTypes.filter(testType => testType.status === Constants.STATUS_CONST.ACT), ['testType']).map((medicalTestType, index) => {\n              return /*#__PURE__*/_jsxDEV(MedicalTestTabHeader, {\n                medicalTestType: medicalTestType,\n                index: index\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 59,\n                columnNumber: 44\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(CTabContent, {\n            children: _.sortBy(patientMedicalTestsData.medicalTestTypes.filter(testType => testType.status === Constants.STATUS_CONST.ACT), ['testType']).map((medicalTestType, index) => {\n              return /*#__PURE__*/_jsxDEV(MedicalTestTabBody, {\n                medicalTestType: medicalTestType,\n                index: index\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 44\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MedicalTestList, \"q025O4G0W89FV4bl4e7flgP9v4c=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = MedicalTestList;\nexport default MedicalTestList;\n\nvar _c;\n\n$RefreshReg$(_c, \"MedicalTestList\");","map":{"version":3,"sources":["C:/Users/chamald/Desktop/Chamal/react/react-app/src/app/views/admin/patient/newPatient/stepper/stepComponents/medicalTests/components/MedicalTestList.js"],"names":["React","useEffect","useState","useDispatch","useSelector","CButton","CCol","CNav","CRow","CTabContent","CTabs","MedicalTestTabHeader","MedicalTestTabBody","Constants","Action","generateSaveObject","checkupData","patientMedicalTestsData","Object","assign","checkupID","checkup","medicalTestResults","formData","MedicalTestList","dispatch","checkupAddEdit","patientMedicalTest","patientMedicalTestAddEdit","activeTabID","setActiveTabID","medicalTestTypes","medicalTestTypeID","save","saveObj","saveOrUpdateCheckupWithPatientMedicalTestsResults","textAlign","_","sortBy","filter","testType","status","STATUS_CONST","ACT","map","medicalTestType","index"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {CButton, CCol, CNav, CRow, CTabContent, CTabs} from \"@coreui/react\";\nimport MedicalTestTabHeader from \"./MedicalTestTabHeader\";\nimport MedicalTestTabBody from \"./MedicalTestTabBody\";\nimport Constants from \"../../../../../../../../../utils/Constants\";\nimport * as Action from \"../store/actions/patient.add.medical.test.results.action\";\n\nconst generateSaveObject = (checkupData, patientMedicalTestsData) => {\n    return Object.assign({}, {\n        checkupID: checkupData.checkup ? checkupData.checkup.checkupID : null,\n        medicalTestResults: patientMedicalTestsData.formData\n    });\n};\n\nconst MedicalTestList = () => {\n\n    let dispatch = useDispatch();\n    const checkupData = useSelector(({checkup}) => checkup.checkupAddEdit);\n    const patientMedicalTestsData = useSelector(({patientMedicalTest}) => patientMedicalTest.patientMedicalTestAddEdit);\n    const [activeTabID, setActiveTabID] = useState();\n\n    useEffect(() => {\n        setActiveTabID(patientMedicalTestsData.medicalTestTypes[0] ? patientMedicalTestsData.medicalTestTypes[0].medicalTestTypeID : 0);\n    }, [patientMedicalTestsData.medicalTestTypes]);\n\n    const save = () => {\n        let saveObj = generateSaveObject(checkupData, patientMedicalTestsData);\n        if (saveObj.checkupID) {\n            dispatch(Action.saveOrUpdateCheckupWithPatientMedicalTestsResults(saveObj));\n        }\n    };\n\n\n    return (\n        <div>\n            <CRow>\n                <CCol sm=\"12\">\n                    <h5 style={{textAlign: 'center'}}>Checkup Recordss</h5>\n                </CCol>\n                <CCol>\n                    <div className='d-flex flex-row flex-wrap  justify-content-end'>\n                        <CButton\n                            onClick={() => {\n                                save();\n                            }}\n                            color=\"success\"\n                            className='custom-button'\n                        >\n                            Save\n                        </CButton>\n                    </div>\n                </CCol>\n                <CCol sm=\"12\">\n                    <CTabs activeTab={`${activeTabID}`}>\n                        <CNav variant=\"tabs\">\n                            {\n                                _.sortBy(patientMedicalTestsData.medicalTestTypes.filter(testType => testType.status === Constants.STATUS_CONST.ACT), ['testType']).map((medicalTestType, index) => {\n                                    return <MedicalTestTabHeader medicalTestType={medicalTestType} index={index}\n                                                                 key={index}/>\n                                })\n                            }\n                        </CNav>\n                        <CTabContent>\n                            {\n                                _.sortBy(patientMedicalTestsData.medicalTestTypes.filter(testType => testType.status === Constants.STATUS_CONST.ACT), ['testType']).map((medicalTestType, index) => {\n                                    return <MedicalTestTabBody medicalTestType={medicalTestType} index={index}\n                                                               key={index}/>\n                                })\n                            }\n                        </CTabContent>\n                    </CTabs>\n                </CCol>\n            </CRow>\n\n        </div>\n    );\n};\n\nexport default MedicalTestList;"]},"metadata":{},"sourceType":"module"}