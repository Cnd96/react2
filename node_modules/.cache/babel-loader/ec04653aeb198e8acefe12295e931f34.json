{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chamald\\\\Desktop\\\\Chamal\\\\react\\\\react-app\\\\src\\\\app\\\\views\\\\admin\\\\config\\\\diagnosis\\\\add-edit\\\\components\\\\DiagnosisAddEditForm.js\";\nimport React, { Component } from 'react';\nimport Constants from \"../../../../../../../utils/Constants\";\nimport customValidator from \"../../../../../../../utils/ValidationUtil\";\nimport { ErrorMessage, Field, Form, Formik } from \"formik\";\nimport { CCol, CFormGroup, CLabel, CRow, CSelect } from \"@coreui/react\";\nimport { getCommonStatusOptions, getInputFieldClassNames } from \"../../../../../../../utils/FormUtils\";\nimport * as Action from \"../../store/action\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass DiagnosisAddEditForm extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      userInit: {\n        diagnosisName: '',\n        description: '',\n        status: Constants.STATUS_CONST.ACT\n      }\n    };\n\n    this.setInitialValues = () => {\n      let diagnosis = this.props.diagnosis;\n      diagnosis = diagnosis ? diagnosis : {};\n      let userInit = {\n        diagnosisID: diagnosis.diagnosisID ? diagnosis.diagnosisID : '',\n        diagnosisName: diagnosis.diagnosisName ? diagnosis.diagnosisName : '',\n        description: diagnosis.description ? diagnosis.description : '',\n        status: diagnosis.status ? diagnosis.status : Constants.STATUS_CONST.ACT\n      };\n      this.setState({\n        userInit: userInit\n      }, () => {\n        this.onCustomValidation(userInit);\n      });\n    };\n\n    this.getValidations = () => {\n      return {\n        diagnosisName: {\n          required: {\n            message: 'Required'\n          },\n          maxLength: {\n            value: 255\n          }\n        },\n        description: {\n          maxLength: {\n            value: 255\n          }\n        }\n      };\n    };\n\n    this.onCustomValidation = values => {\n      const {\n        onFormChange\n      } = this.props;\n      let validate = customValidator(values, this.getValidations());\n      onFormChange({\n        isValid: validate.isValid,\n        values: values\n      });\n      return validate.errors;\n    };\n  }\n\n  componentDidMount() {\n    this.setInitialValues();\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (this.props.diagnosis !== prevProps.diagnosis) {\n      this.setInitialValues();\n    }\n  }\n\n  render() {\n    const initValues = this.state.userInit;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Formik, {\n        enableReinitialize: true,\n        initialValues: initValues,\n        onSubmit: (values, _ref) => {\n          let {\n            setSubmitting\n          } = _ref;\n          setTimeout(() => {\n            setSubmitting(false);\n          }, 200);\n        },\n        validateOnChange: true,\n        validate: values => {\n          return this.onCustomValidation(values);\n        },\n        children: _ref2 => {\n          let {\n            errors,\n            touched\n          } = _ref2;\n          return /*#__PURE__*/_jsxDEV(Form, {\n            children: /*#__PURE__*/_jsxDEV(CRow, {\n              children: [/*#__PURE__*/_jsxDEV(CCol, {\n                sm: \"12\",\n                md: \"6\",\n                lg: \"3\",\n                children: [/*#__PURE__*/_jsxDEV(CFormGroup, {\n                  children: [/*#__PURE__*/_jsxDEV(CLabel, {\n                    htmlFor: \"diagnosisName\",\n                    className: 'required',\n                    children: \"Diagnosis Name\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 98,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(Field, {\n                    type: \"text\",\n                    name: \"diagnosisName\",\n                    placeholder: 'Diagnosis Name',\n                    className: getInputFieldClassNames(touched.diagnosisName, errors.diagnosisName)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 101,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 97,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                  name: \"diagnosisName\",\n                  render: msg => /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: 'formik-error-message',\n                    children: msg\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 111,\n                    columnNumber: 62\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 109,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(CCol, {\n                sm: \"12\",\n                md: \"6\",\n                lg: \"3\",\n                children: [/*#__PURE__*/_jsxDEV(CFormGroup, {\n                  children: [/*#__PURE__*/_jsxDEV(CLabel, {\n                    htmlFor: \"description\",\n                    children: \"Description\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 118,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(Field, {\n                    type: \"text\",\n                    name: \"description\",\n                    placeholder: 'Diagnosis Description',\n                    className: getInputFieldClassNames(touched.description, errors.description)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 120,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 117,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                  name: \"description\",\n                  render: msg => /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: 'formik-error-message',\n                    children: msg\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 130,\n                    columnNumber: 62\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 128,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(CCol, {\n                sm: \"12\",\n                md: \"6\",\n                lg: \"3\",\n                children: [/*#__PURE__*/_jsxDEV(CFormGroup, {\n                  children: [/*#__PURE__*/_jsxDEV(CLabel, {\n                    htmlFor: \"status\",\n                    className: 'required',\n                    children: \"Status\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 138,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(Field, {\n                    name: \"status\",\n                    className: getInputFieldClassNames(touched.status, errors.status),\n                    children: _ref3 => {\n                      let {\n                        field,\n                        // { name, value, onChange, onBlur }\n                        form: {\n                          touched,\n                          errors\n                        },\n                        // also values, setXXXX, handleXXXX, dirty, isValid, status, etc.\n                        meta\n                      } = _ref3;\n                      return /*#__PURE__*/_jsxDEV(CSelect, {\n                        custom: true,\n                        name: \"status\",\n                        ...field,\n                        children: getCommonStatusOptions(false).map(item => {\n                          return /*#__PURE__*/_jsxDEV(\"option\", {\n                            value: item.key,\n                            children: item.value\n                          }, item.key, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 153,\n                            columnNumber: 69\n                          }, this);\n                        })\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 149,\n                        columnNumber: 53\n                      }, this);\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 140,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 137,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                  name: \"status\",\n                  render: msg => /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: 'formik-error-message',\n                    children: msg\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 164,\n                    columnNumber: 62\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 162,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 135,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 29\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({\n    onFormChange: Action.onFormChange\n  }, dispatch);\n};\n\nfunction mapStateToProps(_ref4) {\n  let {\n    diagnosis\n  } = _ref4;\n  return {\n    diagnosis: diagnosis.diagnosisAddEdit.diagnosis\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DiagnosisAddEditForm);","map":{"version":3,"sources":["C:/Users/chamald/Desktop/Chamal/react/react-app/src/app/views/admin/config/diagnosis/add-edit/components/DiagnosisAddEditForm.js"],"names":["React","Component","Constants","customValidator","ErrorMessage","Field","Form","Formik","CCol","CFormGroup","CLabel","CRow","CSelect","getCommonStatusOptions","getInputFieldClassNames","Action","connect","bindActionCreators","DiagnosisAddEditForm","state","userInit","diagnosisName","description","status","STATUS_CONST","ACT","setInitialValues","diagnosis","props","diagnosisID","setState","onCustomValidation","getValidations","required","message","maxLength","value","values","onFormChange","validate","isValid","errors","componentDidMount","componentDidUpdate","prevProps","prevState","snapshot","render","initValues","setSubmitting","setTimeout","touched","msg","field","form","meta","map","item","key","mapDispatchToProps","dispatch","mapStateToProps","diagnosisAddEdit"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,SAAP,MAAsB,sCAAtB;AACA,OAAOC,eAAP,MAA4B,2CAA5B;AACA,SAAQC,YAAR,EAAsBC,KAAtB,EAA6BC,IAA7B,EAAmCC,MAAnC,QAAgD,QAAhD;AACA,SAAQC,IAAR,EAAcC,UAAd,EAA0BC,MAA1B,EAAkCC,IAAlC,EAAwCC,OAAxC,QAAsD,eAAtD;AACA,SAAQC,sBAAR,EAAgCC,uBAAhC,QAA8D,sCAA9D;AACA,OAAO,KAAKC,MAAZ,MAAwB,oBAAxB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,kBAAR,QAAiC,OAAjC;;;;AAEA,MAAMC,oBAAN,SAAmCjB,SAAnC,CAA6C;AAAA;AAAA;AAAA,SACzCkB,KADyC,GACjC;AACJC,MAAAA,QAAQ,EAAE;AACNC,QAAAA,aAAa,EAAE,EADT;AAENC,QAAAA,WAAW,EAAE,EAFP;AAGNC,QAAAA,MAAM,EAAErB,SAAS,CAACsB,YAAV,CAAuBC;AAHzB;AADN,KADiC;;AAAA,SAmBzCC,gBAnByC,GAmBtB,MAAM;AACrB,UAAIC,SAAS,GAAG,KAAKC,KAAL,CAAWD,SAA3B;AACAA,MAAAA,SAAS,GAAGA,SAAS,GAAGA,SAAH,GAAe,EAApC;AACA,UAAIP,QAAQ,GAAG;AACXS,QAAAA,WAAW,EAAEF,SAAS,CAACE,WAAV,GAAwBF,SAAS,CAACE,WAAlC,GAAgD,EADlD;AAEXR,QAAAA,aAAa,EAAEM,SAAS,CAACN,aAAV,GAA0BM,SAAS,CAACN,aAApC,GAAoD,EAFxD;AAGXC,QAAAA,WAAW,EAAEK,SAAS,CAACL,WAAV,GAAwBK,SAAS,CAACL,WAAlC,GAAgD,EAHlD;AAIXC,QAAAA,MAAM,EAAEI,SAAS,CAACJ,MAAV,GAAmBI,SAAS,CAACJ,MAA7B,GAAsCrB,SAAS,CAACsB,YAAV,CAAuBC;AAJ1D,OAAf;AAOA,WAAKK,QAAL,CAAc;AACVV,QAAAA,QAAQ,EAAEA;AADA,OAAd,EAGG,MAAM;AACL,aAAKW,kBAAL,CAAwBX,QAAxB;AACH,OALD;AAMH,KAnCwC;;AAAA,SAqCzCY,cArCyC,GAqCxB,MAAM;AACnB,aAAO;AACHX,QAAAA,aAAa,EAAE;AACXY,UAAAA,QAAQ,EAAE;AAACC,YAAAA,OAAO,EAAE;AAAV,WADC;AAEXC,UAAAA,SAAS,EAAE;AAACC,YAAAA,KAAK,EAAE;AAAR;AAFA,SADZ;AAKHd,QAAAA,WAAW,EAAE;AACTa,UAAAA,SAAS,EAAE;AAACC,YAAAA,KAAK,EAAE;AAAR;AADF;AALV,OAAP;AASH,KA/CwC;;AAAA,SAiDzCL,kBAjDyC,GAiDnBM,MAAD,IAAY;AAC7B,YAAM;AAACC,QAAAA;AAAD,UAAiB,KAAKV,KAA5B;AAEA,UAAIW,QAAQ,GAAGpC,eAAe,CAACkC,MAAD,EAAS,KAAKL,cAAL,EAAT,CAA9B;AAEAM,MAAAA,YAAY,CAAC;AACTE,QAAAA,OAAO,EAAED,QAAQ,CAACC,OADT;AAETH,QAAAA,MAAM,EAAEA;AAFC,OAAD,CAAZ;AAKA,aAAOE,QAAQ,CAACE,MAAhB;AACH,KA5DwC;AAAA;;AASzCC,EAAAA,iBAAiB,GAAG;AAChB,SAAKhB,gBAAL;AACH;;AAEDiB,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuBC,QAAvB,EAAiC;AAC/C,QAAI,KAAKlB,KAAL,CAAWD,SAAX,KAAyBiB,SAAS,CAACjB,SAAvC,EAAkD;AAC9C,WAAKD,gBAAL;AACH;AACJ;;AA6CDqB,EAAAA,MAAM,GAAG;AAEL,UAAMC,UAAU,GAAG,KAAK7B,KAAL,CAAWC,QAA9B;AAEA,wBACI;AAAA,6BACI,QAAC,MAAD;AACI,QAAA,kBAAkB,EAAE,IADxB;AAEI,QAAA,aAAa,EAAE4B,UAFnB;AAGI,QAAA,QAAQ,EAAE,CAACX,MAAD,WAA6B;AAAA,cAApB;AAACY,YAAAA;AAAD,WAAoB;AACnCC,UAAAA,UAAU,CAAC,MAAM;AACbD,YAAAA,aAAa,CAAC,KAAD,CAAb;AACH,WAFS,EAEP,GAFO,CAAV;AAGH,SAPL;AAQI,QAAA,gBAAgB,EAAE,IARtB;AASI,QAAA,QAAQ,EAAGZ,MAAD,IAAY;AAClB,iBAAO,KAAKN,kBAAL,CAAwBM,MAAxB,CAAP;AACH,SAXL;AAAA,kBAaK,SAAuB;AAAA,cAAtB;AAACI,YAAAA,MAAD;AAASU,YAAAA;AAAT,WAAsB;AACpB,8BACI,QAAC,IAAD;AAAA,mCACI,QAAC,IAAD;AAAA,sCACI,QAAC,IAAD;AAAM,gBAAA,EAAE,EAAC,IAAT;AAAc,gBAAA,EAAE,EAAC,GAAjB;AAAqB,gBAAA,EAAE,EAAC,GAAxB;AAAA,wCACI,QAAC,UAAD;AAAA,0CACI,QAAC,MAAD;AAAQ,oBAAA,OAAO,EAAC,eAAhB;AAAgC,oBAAA,SAAS,EAAE,UAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ,eAII,QAAC,KAAD;AACI,oBAAA,IAAI,EAAC,MADT;AAEI,oBAAA,IAAI,EAAC,eAFT;AAGI,oBAAA,WAAW,EAAE,gBAHjB;AAII,oBAAA,SAAS,EAAErC,uBAAuB,CAACqC,OAAO,CAAC9B,aAAT,EAAwBoB,MAAM,CAACpB,aAA/B;AAJtC;AAAA;AAAA;AAAA;AAAA,0BAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,eAaI,QAAC,YAAD;AACI,kBAAA,IAAI,EAAC,eADT;AAEI,kBAAA,MAAM,EAAG+B,GAAD,iBAAS;AACb,oBAAA,SAAS,EAAE,sBADE;AAAA,8BACuBA;AADvB;AAAA;AAAA;AAAA;AAAA;AAFrB;AAAA;AAAA;AAAA;AAAA,wBAbJ;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAqBI,QAAC,IAAD;AAAM,gBAAA,EAAE,EAAC,IAAT;AAAc,gBAAA,EAAE,EAAC,GAAjB;AAAqB,gBAAA,EAAE,EAAC,GAAxB;AAAA,wCACI,QAAC,UAAD;AAAA,0CACI,QAAC,MAAD;AAAQ,oBAAA,OAAO,EAAC,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ,eAGI,QAAC,KAAD;AACI,oBAAA,IAAI,EAAC,MADT;AAEI,oBAAA,IAAI,EAAC,aAFT;AAGI,oBAAA,WAAW,EAAE,uBAHjB;AAII,oBAAA,SAAS,EAAEtC,uBAAuB,CAACqC,OAAO,CAAC7B,WAAT,EAAsBmB,MAAM,CAACnB,WAA7B;AAJtC;AAAA;AAAA;AAAA;AAAA,0BAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,eAYI,QAAC,YAAD;AACI,kBAAA,IAAI,EAAC,aADT;AAEI,kBAAA,MAAM,EAAG8B,GAAD,iBAAS;AACb,oBAAA,SAAS,EAAE,sBADE;AAAA,8BACuBA;AADvB;AAAA;AAAA;AAAA;AAAA;AAFrB;AAAA;AAAA;AAAA;AAAA,wBAZJ;AAAA;AAAA;AAAA;AAAA;AAAA,sBArBJ,eAwCI,QAAC,IAAD;AAAM,gBAAA,EAAE,EAAC,IAAT;AAAc,gBAAA,EAAE,EAAC,GAAjB;AAAqB,gBAAA,EAAE,EAAC,GAAxB;AAAA,wCAEI,QAAC,UAAD;AAAA,0CACI,QAAC,MAAD;AAAQ,oBAAA,OAAO,EAAC,QAAhB;AAAyB,oBAAA,SAAS,EAAE,UAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ,eAGI,QAAC,KAAD;AAAO,oBAAA,IAAI,EAAC,QAAZ;AACO,oBAAA,SAAS,EAAEtC,uBAAuB,CAACqC,OAAO,CAAC5B,MAAT,EAAiBkB,MAAM,CAAClB,MAAxB,CADzC;AAAA,8BAGK;AAAA,0BAAC;AACI8B,wBAAAA,KADJ;AACW;AACPC,wBAAAA,IAAI,EAAE;AAACH,0BAAAA,OAAD;AAAUV,0BAAAA;AAAV,yBAFV;AAE6B;AACzBc,wBAAAA;AAHJ,uBAAD;AAAA,0CAMG,QAAC,OAAD;AAAS,wBAAA,MAAM,MAAf;AAAgB,wBAAA,IAAI,EAAC,QAArB;AAAA,2BAAkCF,KAAlC;AAAA,kCAEQxC,sBAAsB,CAAC,KAAD,CAAtB,CAA8B2C,GAA9B,CAAmCC,IAAD,IAAU;AACxC,8CACI;AACQ,4BAAA,KAAK,EAAEA,IAAI,CAACC,GADpB;AAAA,sCAC0BD,IAAI,CAACrB;AAD/B,6BAAaqB,IAAI,CAACC,GAAlB;AAAA;AAAA;AAAA;AAAA,kCADJ;AAIH,yBALD;AAFR;AAAA;AAAA;AAAA;AAAA,8BANH;AAAA;AAHL;AAAA;AAAA;AAAA;AAAA,0BAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,wBAFJ,eA2BI,QAAC,YAAD;AACI,kBAAA,IAAI,EAAC,QADT;AAEI,kBAAA,MAAM,EAAGN,GAAD,iBAAS;AACb,oBAAA,SAAS,EAAE,sBADE;AAAA,8BACuBA;AADvB;AAAA;AAAA;AAAA;AAAA;AAFrB;AAAA;AAAA;AAAA;AAAA,wBA3BJ;AAAA;AAAA;AAAA;AAAA;AAAA,sBAxCJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBADJ;AA8EH;AA5FL;AAAA;AAAA;AAAA;AAAA;AADJ,qBADJ;AAkGH;;AApKwC;;AAuK7C,MAAMO,kBAAkB,GAAIC,QAAD,IAAc;AACrC,SAAO3C,kBAAkB,CAAC;AACtBqB,IAAAA,YAAY,EAAEvB,MAAM,CAACuB;AADC,GAAD,EAEtBsB,QAFsB,CAAzB;AAGH,CAJD;;AAMA,SAASC,eAAT,QAAsC;AAAA,MAAb;AAAClC,IAAAA;AAAD,GAAa;AAClC,SAAO;AACHA,IAAAA,SAAS,EAAEA,SAAS,CAACmC,gBAAV,CAA2BnC;AADnC,GAAP;AAGH;;AAED,eAAeX,OAAO,CAAC6C,eAAD,EAAkBF,kBAAlB,CAAP,CAA6CzC,oBAA7C,CAAf","sourcesContent":["import React, {Component} from 'react';\nimport Constants from \"../../../../../../../utils/Constants\";\nimport customValidator from \"../../../../../../../utils/ValidationUtil\";\nimport {ErrorMessage, Field, Form, Formik} from \"formik\";\nimport {CCol, CFormGroup, CLabel, CRow, CSelect} from \"@coreui/react\";\nimport {getCommonStatusOptions, getInputFieldClassNames} from \"../../../../../../../utils/FormUtils\";\nimport * as Action from \"../../store/action\";\nimport {connect} from \"react-redux\";\nimport {bindActionCreators} from \"redux\";\n\nclass DiagnosisAddEditForm extends Component {\n    state = {\n        userInit: {\n            diagnosisName: '',\n            description: '',\n            status: Constants.STATUS_CONST.ACT,\n        },\n    };\n\n    componentDidMount() {\n        this.setInitialValues();\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (this.props.diagnosis !== prevProps.diagnosis) {\n            this.setInitialValues();\n        }\n    }\n\n    setInitialValues = () => {\n        let diagnosis = this.props.diagnosis;\n        diagnosis = diagnosis ? diagnosis : {};\n        let userInit = {\n            diagnosisID: diagnosis.diagnosisID ? diagnosis.diagnosisID : '',\n            diagnosisName: diagnosis.diagnosisName ? diagnosis.diagnosisName : '',\n            description: diagnosis.description ? diagnosis.description : '',\n            status: diagnosis.status ? diagnosis.status : Constants.STATUS_CONST.ACT\n        };\n\n        this.setState({\n            userInit: userInit,\n\n        }, () => {\n            this.onCustomValidation(userInit);\n        })\n    };\n\n    getValidations = () => {\n        return {\n            diagnosisName: {\n                required: {message: 'Required'},\n                maxLength: {value: 255}\n            },\n            description: {\n                maxLength: {value: 255}\n            },\n        };\n    };\n\n    onCustomValidation = (values) => {\n        const {onFormChange} = this.props;\n\n        let validate = customValidator(values, this.getValidations());\n\n        onFormChange({\n            isValid: validate.isValid,\n            values: values\n        });\n\n        return validate.errors;\n    };\n\n    render() {\n\n        const initValues = this.state.userInit;\n\n        return (\n            <>\n                <Formik\n                    enableReinitialize={true}\n                    initialValues={initValues}\n                    onSubmit={(values, {setSubmitting}) => {\n                        setTimeout(() => {\n                            setSubmitting(false)\n                        }, 200)\n                    }}\n                    validateOnChange={true}\n                    validate={(values) => {\n                        return this.onCustomValidation(values);\n                    }}\n                >\n                    {({errors, touched}) => {\n                        return (\n                            <Form>\n                                <CRow>\n                                    <CCol sm=\"12\" md=\"6\" lg=\"3\">\n                                        <CFormGroup>\n                                            <CLabel htmlFor=\"diagnosisName\" className={'required'}>Diagnosis\n                                                Name</CLabel>\n\n                                            <Field\n                                                type=\"text\"\n                                                name=\"diagnosisName\"\n                                                placeholder={'Diagnosis Name'}\n                                                className={getInputFieldClassNames(touched.diagnosisName, errors.diagnosisName)}\n                                            />\n                                        </CFormGroup>\n\n                                        <ErrorMessage\n                                            name=\"diagnosisName\"\n                                            render={(msg) => <div\n                                                className={'formik-error-message'}>{msg}</div>}\n                                        />\n                                    </CCol>\n\n                                    <CCol sm=\"12\" md=\"6\" lg=\"3\">\n                                        <CFormGroup>\n                                            <CLabel htmlFor=\"description\">Description</CLabel>\n\n                                            <Field\n                                                type=\"text\"\n                                                name=\"description\"\n                                                placeholder={'Diagnosis Description'}\n                                                className={getInputFieldClassNames(touched.description, errors.description)}\n                                            />\n                                        </CFormGroup>\n\n                                        <ErrorMessage\n                                            name=\"description\"\n                                            render={(msg) => <div\n                                                className={'formik-error-message'}>{msg}</div>}\n                                        />\n                                    </CCol>\n\n                                    <CCol sm=\"12\" md=\"6\" lg=\"3\">\n\n                                        <CFormGroup>\n                                            <CLabel htmlFor=\"status\" className={'required'}>Status</CLabel>\n\n                                            <Field name=\"status\"\n                                                   className={getInputFieldClassNames(touched.status, errors.status)}\n                                            >\n                                                {({\n                                                      field, // { name, value, onChange, onBlur }\n                                                      form: {touched, errors}, // also values, setXXXX, handleXXXX, dirty, isValid, status, etc.\n                                                      meta,\n                                                  }) => (\n\n                                                    <CSelect custom name=\"status\" {...field}>\n                                                        {\n                                                            getCommonStatusOptions(false).map((item) => {\n                                                                return (\n                                                                    <option key={item.key}\n                                                                            value={item.key}>{item.value}</option>\n                                                                );\n                                                            })\n                                                        }\n                                                    </CSelect>\n                                                )}\n                                            </Field>\n                                        </CFormGroup>\n                                        <ErrorMessage\n                                            name=\"status\"\n                                            render={(msg) => <div\n                                                className={'formik-error-message'}>{msg}</div>}\n                                        />\n                                    </CCol>\n                                </CRow>\n                            </Form>\n                        );\n                    }}\n                </Formik>\n            </>\n        );\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return bindActionCreators({\n        onFormChange: Action.onFormChange,\n    }, dispatch)\n};\n\nfunction mapStateToProps({diagnosis}) {\n    return {\n        diagnosis: diagnosis.diagnosisAddEdit.diagnosis\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DiagnosisAddEditForm)\n"]},"metadata":{},"sourceType":"module"}