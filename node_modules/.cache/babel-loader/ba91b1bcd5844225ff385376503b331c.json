{"ast":null,"code":"import dataService from \"../../../../../../services/dataService\";\nimport medicalTestRecordAppEndpoints from \"./medical.test.record.app.endpoints\";\nexport const GET_MEDICAL_TEST_RECORD = '[MEDICAL TEST RECORD ADD EDIT] GET_MEDICAL_TEST_RECORD';\nexport const ON_ADD_EDIT_FORM_CHANGE = '[MEDICAL TEST RECORD ADD EDIT] ON_ADD_EDIT_FORM_CHANGE';\nexport const ON_SAVE_UPDATE = '[MEDICAL TEST RECORD ADD EDIT] ON_SAVE_UPDATE';\nexport const ON_RESET = '[MEDICAL TEST RECORD ADD EDIT] ON_RESET';\nexport const ON_FORM_RESET = '[MEDICAL TEST RECORD ADD EDIT] ON_FORM_RESET';\nexport const GET_MEDICAL_TEST_TYPES = '[MEDICAL TEST RECORD ADD EDIT]GET_MEDICAL_TEST_TYPES';\nexport function getMedicalTestRecordDTOByID(medicalTestRecordID) {\n  let endpoint = Object.assign({}, medicalTestRecordAppEndpoints.getMedicalTestRecordDTOByID);\n  endpoint.url = endpoint.url + '/' + medicalTestRecordID;\n  const request = dataService.get(endpoint);\n  return (dispatch, getState) => {\n    request.then(response => dispatch({\n      type: GET_MEDICAL_TEST_RECORD,\n      payload: response.data.result\n    }));\n  };\n}\nexport function getMedicalTestTypes() {\n  const request = dataService.get(medicalTestRecordAppEndpoints.getMedicalTestTypes);\n  return (dispatch, getState) => {\n    request.then(response => dispatch({\n      type: GET_MEDICAL_TEST_TYPES,\n      payload: response.data.result\n    }));\n  };\n}\nexport function onFormChange(data) {\n  return (dispatch, getState) => {\n    dispatch({\n      type: ON_ADD_EDIT_FORM_CHANGE,\n      payload: data\n    });\n  };\n}\nexport function reset() {\n  return (dispatch, getState) => {\n    dispatch({\n      type: ON_RESET,\n      payload: {}\n    });\n  };\n}\nexport function onFormReset() {\n  return (dispatch, getState) => {\n    dispatch({\n      type: ON_FORM_RESET,\n      payload: {}\n    });\n  };\n}\nexport function saveOrUpdateMedicalTestRecord(data) {\n  con; // const request = dataService.post(medicalTestRecordAppEndpoints.saveOrUpdateMedicalTestRecord, data);\n  // return (dispatch, getState) => {\n  //     request.then((response) => {\n  //             dispatch({\n  //                 type: ON_SAVE_UPDATE,\n  //                 payload: response.data.result\n  //             });\n  //         }\n  //     );\n  // };\n}","map":{"version":3,"sources":["C:/Users/chamald/Desktop/Chamal/react/react-app/src/app/views/admin/config/medicalTestRecords/store/actions/medical.test.record.add.edit.action.js"],"names":["dataService","medicalTestRecordAppEndpoints","GET_MEDICAL_TEST_RECORD","ON_ADD_EDIT_FORM_CHANGE","ON_SAVE_UPDATE","ON_RESET","ON_FORM_RESET","GET_MEDICAL_TEST_TYPES","getMedicalTestRecordDTOByID","medicalTestRecordID","endpoint","Object","assign","url","request","get","dispatch","getState","then","response","type","payload","data","result","getMedicalTestTypes","onFormChange","reset","onFormReset","saveOrUpdateMedicalTestRecord","con"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,wCAAxB;AACA,OAAOC,6BAAP,MAA0C,qCAA1C;AAEA,OAAO,MAAMC,uBAAuB,GAAG,wDAAhC;AACP,OAAO,MAAMC,uBAAuB,GAAG,wDAAhC;AACP,OAAO,MAAMC,cAAc,GAAG,+CAAvB;AACP,OAAO,MAAMC,QAAQ,GAAG,yCAAjB;AACP,OAAO,MAAMC,aAAa,GAAG,8CAAtB;AACP,OAAO,MAAMC,sBAAsB,GAAG,sDAA/B;AAGP,OAAO,SAASC,2BAAT,CAAqCC,mBAArC,EAA0D;AAE7D,MAAIC,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBX,6BAA6B,CAACO,2BAAhD,CAAf;AACAE,EAAAA,QAAQ,CAACG,GAAT,GAAeH,QAAQ,CAACG,GAAT,GAAe,GAAf,GAAqBJ,mBAApC;AAEA,QAAMK,OAAO,GAAGd,WAAW,CAACe,GAAZ,CAAgBL,QAAhB,CAAhB;AAEA,SAAO,CAACM,QAAD,EAAWC,QAAX,KAAwB;AAC3BH,IAAAA,OAAO,CAACI,IAAR,CAAcC,QAAD,IACTH,QAAQ,CAAC;AACLI,MAAAA,IAAI,EAAElB,uBADD;AAELmB,MAAAA,OAAO,EAAEF,QAAQ,CAACG,IAAT,CAAcC;AAFlB,KAAD,CADZ;AAMH,GAPD;AAQH;AAED,OAAO,SAASC,mBAAT,GAA+B;AAElC,QAAMV,OAAO,GAAGd,WAAW,CAACe,GAAZ,CAAgBd,6BAA6B,CAACuB,mBAA9C,CAAhB;AACA,SAAO,CAACR,QAAD,EAAWC,QAAX,KAAwB;AAC3BH,IAAAA,OAAO,CAACI,IAAR,CAAcC,QAAD,IACTH,QAAQ,CAAC;AACLI,MAAAA,IAAI,EAAEb,sBADD;AAELc,MAAAA,OAAO,EAAEF,QAAQ,CAACG,IAAT,CAAcC;AAFlB,KAAD,CADZ;AAMH,GAPD;AASH;AAGD,OAAO,SAASE,YAAT,CAAsBH,IAAtB,EAA4B;AAC/B,SAAO,CAACN,QAAD,EAAWC,QAAX,KAAwB;AAC3BD,IAAAA,QAAQ,CAAC;AACLI,MAAAA,IAAI,EAAEjB,uBADD;AAELkB,MAAAA,OAAO,EAAEC;AAFJ,KAAD,CAAR;AAIH,GALD;AAMH;AAED,OAAO,SAASI,KAAT,GAAiB;AACpB,SAAO,CAACV,QAAD,EAAWC,QAAX,KAAwB;AAC3BD,IAAAA,QAAQ,CAAC;AACLI,MAAAA,IAAI,EAAEf,QADD;AAELgB,MAAAA,OAAO,EAAE;AAFJ,KAAD,CAAR;AAIH,GALD;AAMH;AAED,OAAO,SAASM,WAAT,GAAuB;AAC1B,SAAO,CAACX,QAAD,EAAWC,QAAX,KAAwB;AAC3BD,IAAAA,QAAQ,CAAC;AACLI,MAAAA,IAAI,EAAEd,aADD;AAELe,MAAAA,OAAO,EAAE;AAFJ,KAAD,CAAR;AAIH,GALD;AAMH;AAED,OAAO,SAASO,6BAAT,CAAuCN,IAAvC,EAA6C;AAChDO,EAAAA,GAAG,CAD6C,CAEhD;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH","sourcesContent":["import dataService from \"../../../../../../services/dataService\";\nimport medicalTestRecordAppEndpoints from \"./medical.test.record.app.endpoints\";\n\nexport const GET_MEDICAL_TEST_RECORD = '[MEDICAL TEST RECORD ADD EDIT] GET_MEDICAL_TEST_RECORD';\nexport const ON_ADD_EDIT_FORM_CHANGE = '[MEDICAL TEST RECORD ADD EDIT] ON_ADD_EDIT_FORM_CHANGE';\nexport const ON_SAVE_UPDATE = '[MEDICAL TEST RECORD ADD EDIT] ON_SAVE_UPDATE';\nexport const ON_RESET = '[MEDICAL TEST RECORD ADD EDIT] ON_RESET';\nexport const ON_FORM_RESET = '[MEDICAL TEST RECORD ADD EDIT] ON_FORM_RESET';\nexport const GET_MEDICAL_TEST_TYPES = '[MEDICAL TEST RECORD ADD EDIT]GET_MEDICAL_TEST_TYPES';\n\n\nexport function getMedicalTestRecordDTOByID(medicalTestRecordID) {\n\n    let endpoint = Object.assign({}, medicalTestRecordAppEndpoints.getMedicalTestRecordDTOByID);\n    endpoint.url = endpoint.url + '/' + medicalTestRecordID;\n\n    const request = dataService.get(endpoint);\n\n    return (dispatch, getState) => {\n        request.then((response) =>\n            dispatch({\n                type: GET_MEDICAL_TEST_RECORD,\n                payload: response.data.result\n            })\n        );\n    };\n}\n\nexport function getMedicalTestTypes() {\n\n    const request = dataService.get(medicalTestRecordAppEndpoints.getMedicalTestTypes);\n    return (dispatch, getState) => {\n        request.then((response) =>\n            dispatch({\n                type: GET_MEDICAL_TEST_TYPES,\n                payload: response.data.result\n            })\n        );\n    };\n\n}\n\n\nexport function onFormChange(data) {\n    return (dispatch, getState) => {\n        dispatch({\n            type: ON_ADD_EDIT_FORM_CHANGE,\n            payload: data\n        })\n    };\n}\n\nexport function reset() {\n    return (dispatch, getState) => {\n        dispatch({\n            type: ON_RESET,\n            payload: {}\n        })\n    };\n}\n\nexport function onFormReset() {\n    return (dispatch, getState) => {\n        dispatch({\n            type: ON_FORM_RESET,\n            payload: {}\n        })\n    };\n}\n\nexport function saveOrUpdateMedicalTestRecord(data) {\n    con\n    // const request = dataService.post(medicalTestRecordAppEndpoints.saveOrUpdateMedicalTestRecord, data);\n\n    // return (dispatch, getState) => {\n    //     request.then((response) => {\n    //             dispatch({\n    //                 type: ON_SAVE_UPDATE,\n    //                 payload: response.data.result\n    //             });\n    //         }\n    //     );\n    // };\n}\n\n\n"]},"metadata":{},"sourceType":"module"}