{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chamald\\\\Desktop\\\\Chamal\\\\react\\\\react-app\\\\src\\\\app\\\\views\\\\admin\\\\patient\\\\newPatient\\\\stepper\\\\stepComponents\\\\createInstructionNote\\\\CreateInstructionNote.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport withReducer from \"../../../../../../../store/withReducer\";\nimport reducer from \"./store/reducers\";\nimport { useDispatch } from \"react-redux\";\nimport { getStorageItem } from \"../../../../../../../../utils/StorageUtils\";\nimport Constants from \"../../../../../../../../utils/Constants\";\nimport * as Action from \"./store/actions/instruction.note.add.edit.action\";\nimport InstructionAddEditForm from \"./components/InstructionAddEditForm\";\nimport Image from \"./webCam/WebCamImage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CreateInstructionNote = _ref => {\n  _s();\n\n  let {\n    setPageIndex,\n    nextPageIndex,\n    prevPageIndex\n  } = _ref;\n  let dispatch = useDispatch();\n  useEffect(() => {\n    let checkupID = getStorageItem(Constants.STORAGE.CHECKUP_ID);\n\n    if (checkupID) {\n      dispatch(Action.getInstructionNoteDTOByCheckupID(checkupID));\n    } else {\n      dispatch(Action.onRemoveInstructionData());\n    }\n\n    return () => {\n      dispatch(Action.onRemoveInstructionData());\n    };\n  }, [dispatch]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(InstructionAddEditForm, {\n      setPageIndex: setPageIndex,\n      nextPageIndex: nextPageIndex,\n      prevPageIndex: prevPageIndex\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Image, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CreateInstructionNote, \"rAh3tY+Iv6hWC9AI4Dm+rCbkwNE=\", false, function () {\n  return [useDispatch];\n});\n\n_c = CreateInstructionNote;\nexport default withReducer('InstructionNote', reducer)(CreateInstructionNote);\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateInstructionNote\");","map":{"version":3,"sources":["C:/Users/chamald/Desktop/Chamal/react/react-app/src/app/views/admin/patient/newPatient/stepper/stepComponents/createInstructionNote/CreateInstructionNote.js"],"names":["React","useEffect","withReducer","reducer","useDispatch","getStorageItem","Constants","Action","InstructionAddEditForm","Image","CreateInstructionNote","setPageIndex","nextPageIndex","prevPageIndex","dispatch","checkupID","STORAGE","CHECKUP_ID","getInstructionNoteDTOByCheckupID","onRemoveInstructionData"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,WAAP,MAAwB,wCAAxB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,SAAQC,WAAR,QAA0B,aAA1B;AACA,SAAQC,cAAR,QAA6B,4CAA7B;AACA,OAAOC,SAAP,MAAsB,yCAAtB;AACA,OAAO,KAAKC,MAAZ,MAAwB,kDAAxB;AACA,OAAOC,sBAAP,MAAmC,qCAAnC;AACA,OAAOC,KAAP,MAAkB,sBAAlB;;;AAEA,MAAMC,qBAAqB,GAAG,QAAkD;AAAA;;AAAA,MAAjD;AAACC,IAAAA,YAAD;AAAeC,IAAAA,aAAf;AAA8BC,IAAAA;AAA9B,GAAiD;AAE5E,MAAIC,QAAQ,GAAGV,WAAW,EAA1B;AAEAH,EAAAA,SAAS,CAAC,MAAM;AAEZ,QAAIc,SAAS,GAAGV,cAAc,CAACC,SAAS,CAACU,OAAV,CAAkBC,UAAnB,CAA9B;;AACA,QAAIF,SAAJ,EAAe;AACXD,MAAAA,QAAQ,CAACP,MAAM,CAACW,gCAAP,CAAwCH,SAAxC,CAAD,CAAR;AACH,KAFD,MAEO;AACHD,MAAAA,QAAQ,CAACP,MAAM,CAACY,uBAAP,EAAD,CAAR;AACH;;AACD,WAAQ,MAAM;AACVL,MAAAA,QAAQ,CAACP,MAAM,CAACY,uBAAP,EAAD,CAAR;AACH,KAFD;AAGH,GAXQ,EAWN,CAACL,QAAD,CAXM,CAAT;AAcA,sBACI;AAAA,4BACI,QAAC,sBAAD;AACI,MAAA,YAAY,EAAEH,YADlB;AAEI,MAAA,aAAa,EAAEC,aAFnB;AAGI,MAAA,aAAa,EAAEC;AAHnB;AAAA;AAAA;AAAA;AAAA,YADJ,eAOI,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,YAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH,CA7BD;;GAAMH,qB;UAEaN,W;;;KAFbM,qB;AA+BN,eAAeR,WAAW,CAAC,iBAAD,EAAoBC,OAApB,CAAX,CAAwCO,qBAAxC,CAAf","sourcesContent":["import React, {useEffect} from 'react';\nimport withReducer from \"../../../../../../../store/withReducer\";\nimport reducer from \"./store/reducers\";\nimport {useDispatch} from \"react-redux\";\nimport {getStorageItem} from \"../../../../../../../../utils/StorageUtils\";\nimport Constants from \"../../../../../../../../utils/Constants\";\nimport * as Action from \"./store/actions/instruction.note.add.edit.action\";\nimport InstructionAddEditForm from \"./components/InstructionAddEditForm\";\nimport Image from \"./webCam/WebCamImage\";\n\nconst CreateInstructionNote = ({setPageIndex, nextPageIndex, prevPageIndex}) => {\n\n    let dispatch = useDispatch();\n\n    useEffect(() => {\n\n        let checkupID = getStorageItem(Constants.STORAGE.CHECKUP_ID);\n        if (checkupID) {\n            dispatch(Action.getInstructionNoteDTOByCheckupID(checkupID))\n        } else {\n            dispatch(Action.onRemoveInstructionData());\n        }\n        return (() => {\n            dispatch(Action.onRemoveInstructionData())\n        })\n    }, [dispatch]);\n\n\n    return (\n        <div>\n            <InstructionAddEditForm\n                setPageIndex={setPageIndex}\n                nextPageIndex={nextPageIndex}\n                prevPageIndex={prevPageIndex}\n            />\n\n            <Image/>\n        </div>\n    );\n};\n\nexport default withReducer('InstructionNote', reducer)(CreateInstructionNote);"]},"metadata":{},"sourceType":"module"}