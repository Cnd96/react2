{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chamald\\\\Desktop\\\\Chamal\\\\react\\\\react-app\\\\src\\\\app\\\\views\\\\admin\\\\patient\\\\newPatient\\\\stepper\\\\stepComponents\\\\createInstructionNote\\\\components\\\\InstructionAddEditForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Constants from \"../../../../../../../../../utils/Constants\";\nimport customValidator from \"../../../../../../../../../utils/ValidationUtil\";\nimport * as Action from \"../store/actions/instruction.note.add.edit.action\";\nimport { Form, Formik } from \"formik\";\nimport { CCol, CFormGroup, CLabel, CRow } from \"@coreui/react\";\nimport { getInputFieldClassNames } from \"../../../../../../../../../utils/FormUtils\";\nimport NextPrevButtonGroup from \"../../../../../../../common/NextPrevButtonGroup\";\nimport { setStorageItem } from \"../../../../../../../../../utils/StorageUtils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst getValidations = () => {\n  return {\n    status: {\n      required: {\n        message: 'Required'\n      }\n    }\n  };\n};\n\nconst initData = {\n  instructionNoteID: Constants.STORAGE.INSTRUCTION_NOTE_ID ? Constants.STORAGE.INSTRUCTION_NOTE_ID : '',\n  instructionNote: '',\n  indication: '',\n  procedure: '',\n  postop: '',\n  status: Constants.STATUS_CONST.ACT\n};\n\nconst generateSaveObject = (checkupData, instructionNoteData) => {\n  return Object.assign({}, {\n    status: Constants.STATUS_CONST.ACT\n  }, {\n    instructionNoteID: instructionNoteData.instructionNoteID,\n    instructionNote: instructionNoteData.instructionNote,\n    indication: instructionNoteData.indication,\n    procedure: instructionNoteData.procedure,\n    postop: instructionNoteData.postop\n  }, {\n    checkupID: checkupData.checkup ? checkupData.checkup.checkupID : null\n  });\n};\n\nconst InstructionAddEditForm = _ref => {\n  _s();\n\n  let {\n    setPageIndex,\n    nextPageIndex,\n    prevPageIndex\n  } = _ref;\n  const dispatch = useDispatch();\n  const [instructionNoteForm, setInstructionNoteForm] = useState(initData);\n  const checkupData = useSelector(_ref2 => {\n    let {\n      checkup\n    } = _ref2;\n    return checkup.checkupAddEdit;\n  });\n  const instructionNoteData = useSelector(_ref3 => {\n    let {\n      InstructionNote\n    } = _ref3;\n    return InstructionNote.instructionNoteAddEdit;\n  });\n  useEffect(() => {\n    let instructionNoteID = instructionNoteData ? instructionNoteData.instructionNoteID : initData.instructionNoteID;\n    let instructionNote = instructionNoteData ? instructionNoteData.instructionNote : initData.instructionNote;\n    let indication = instructionNoteData ? instructionNoteData.indication : initData.indication;\n    let procedure = instructionNoteData ? instructionNoteData.procedure : initData.procedure;\n    let postop = instructionNoteData ? instructionNoteData.postop : initData.postop;\n    setInstructionNoteForm({\n      instructionNoteID: instructionNoteID,\n      instructionNote: instructionNote,\n      indication: indication,\n      procedure: procedure,\n      postop: postop\n    });\n  }, [dispatch, instructionNoteData.indication, instructionNoteData.procedure, instructionNoteData.postop]);\n\n  const onCustomValidation = (name, value) => {\n    let validate = customValidator({\n      [name]: value\n    }, getValidations());\n    dispatch(Action.onFormChange({\n      isValid: validate.isValid,\n      [name]: value\n    }));\n    return validate.errors;\n  };\n\n  const onChange = event => {\n    const target = event.target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    const name = target.name;\n    onCustomValidation(name, value);\n    setInstructionNoteForm({ ...instructionNoteForm,\n      [name]: value\n    });\n  };\n\n  const saveFunction = () => {\n    let saveObject = generateSaveObject(checkupData, instructionNoteData);\n    console.log(saveObject);\n\n    if (saveObject.checkupID) {\n      dispatch(Action.saveOrUpdateInstructionNote(saveObject)).then(response => {\n        setStorageItem(Constants.STORAGE.INSTRUCTION_NOTE_ID, response.payload.instructionNoteID);\n      });\n    }\n\n    setPageIndex(nextPageIndex);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NextPrevButtonGroup, {\n      setPageIndex: setPageIndex,\n      prevPageIndex: prevPageIndex,\n      saveFunction: saveFunction,\n      isValid: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Formik, {\n      enableReinitialize: true,\n      initialValues: instructionNoteForm,\n      onSubmit: (values, _ref4) => {\n        let {\n          setSubmitting\n        } = _ref4;\n        setTimeout(() => {\n          setSubmitting(false);\n        }, 200);\n      },\n      validateOnChange: true,\n      validate: values => {\n        return onCustomValidation(values);\n      },\n      children: _ref5 => {\n        let {\n          errors,\n          touched\n        } = _ref5;\n        return /*#__PURE__*/_jsxDEV(Form, {\n          children: /*#__PURE__*/_jsxDEV(CRow, {\n            children: [/*#__PURE__*/_jsxDEV(CCol, {\n              sm: \"12\",\n              children: /*#__PURE__*/_jsxDEV(CFormGroup, {\n                children: [/*#__PURE__*/_jsxDEV(CLabel, {\n                  htmlFor: \"indication\",\n                  className: 'required',\n                  children: \"Indication\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 134,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n                  rows: \"5\",\n                  cols: \"120\",\n                  name: \"indication\",\n                  value: instructionNoteForm.indication,\n                  placeholder: 'Indication',\n                  onChange: onChange,\n                  className: getInputFieldClassNames(touched.indication, errors.indication)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 135,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(CCol, {\n              sm: \"12\",\n              children: /*#__PURE__*/_jsxDEV(CFormGroup, {\n                children: [/*#__PURE__*/_jsxDEV(CLabel, {\n                  htmlFor: \"procedure\",\n                  className: 'required',\n                  children: \"Procedure\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 149,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n                  rows: \"5\",\n                  cols: \"120\",\n                  name: \"procedure\",\n                  value: instructionNoteForm.procedure,\n                  placeholder: 'Procedure',\n                  onChange: onChange,\n                  className: getInputFieldClassNames(touched.procedure, errors.procedure)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 150,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 148,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(CCol, {\n              sm: \"12\",\n              children: /*#__PURE__*/_jsxDEV(CFormGroup, {\n                children: [/*#__PURE__*/_jsxDEV(CLabel, {\n                  htmlFor: \"postop\",\n                  className: 'required',\n                  children: \"Post op\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 164,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n                  rows: \"5\",\n                  cols: \"120\",\n                  name: \"postop\",\n                  value: instructionNoteForm.postop,\n                  placeholder: 'Post op',\n                  onChange: onChange,\n                  className: getInputFieldClassNames(touched.postop, errors.postop)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 165,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 163,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 25\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(NextPrevButtonGroup, {\n      setPageIndex: setPageIndex,\n      prevPageIndex: prevPageIndex,\n      saveFunction: saveFunction,\n      isValid: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(InstructionAddEditForm, \"2pduhiO8woMgrGxWqmi6KKsNI0k=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = InstructionAddEditForm;\nexport default InstructionAddEditForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"InstructionAddEditForm\");","map":{"version":3,"sources":["C:/Users/chamald/Desktop/Chamal/react/react-app/src/app/views/admin/patient/newPatient/stepper/stepComponents/createInstructionNote/components/InstructionAddEditForm.js"],"names":["React","useEffect","useState","useDispatch","useSelector","Constants","customValidator","Action","Form","Formik","CCol","CFormGroup","CLabel","CRow","getInputFieldClassNames","NextPrevButtonGroup","setStorageItem","getValidations","status","required","message","initData","instructionNoteID","STORAGE","INSTRUCTION_NOTE_ID","instructionNote","indication","procedure","postop","STATUS_CONST","ACT","generateSaveObject","checkupData","instructionNoteData","Object","assign","checkupID","checkup","InstructionAddEditForm","setPageIndex","nextPageIndex","prevPageIndex","dispatch","instructionNoteForm","setInstructionNoteForm","checkupAddEdit","InstructionNote","instructionNoteAddEdit","onCustomValidation","name","value","validate","onFormChange","isValid","errors","onChange","event","target","type","checked","saveFunction","saveObject","console","log","saveOrUpdateInstructionNote","then","response","payload","values","setSubmitting","setTimeout","touched"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport Constants from \"../../../../../../../../../utils/Constants\";\nimport customValidator from \"../../../../../../../../../utils/ValidationUtil\";\nimport * as Action from \"../store/actions/instruction.note.add.edit.action\";\nimport {Form, Formik} from \"formik\";\nimport {CCol, CFormGroup, CLabel, CRow} from \"@coreui/react\";\nimport {getInputFieldClassNames} from \"../../../../../../../../../utils/FormUtils\";\nimport NextPrevButtonGroup from \"../../../../../../../common/NextPrevButtonGroup\";\nimport {setStorageItem} from \"../../../../../../../../../utils/StorageUtils\";\n\nconst getValidations = () => {\n    return {\n        status: {\n            required: {message: 'Required'},\n        }\n    };\n};\n\nconst initData = {\n    instructionNoteID: Constants.STORAGE.INSTRUCTION_NOTE_ID ? Constants.STORAGE.INSTRUCTION_NOTE_ID : '',\n    instructionNote: '',\n    indication: '',\n    procedure: '',\n    postop: '',\n    status: Constants.STATUS_CONST.ACT\n};\n\nconst generateSaveObject = (checkupData, instructionNoteData) => {\n    return Object.assign({}, {status: Constants.STATUS_CONST.ACT}, {\n        instructionNoteID: instructionNoteData.instructionNoteID,\n        instructionNote: instructionNoteData.instructionNote,\n        indication: instructionNoteData.indication,\n        procedure: instructionNoteData.procedure,\n        postop: instructionNoteData.postop,\n    }, {checkupID: checkupData.checkup ? checkupData.checkup.checkupID : null});\n};\n\nconst InstructionAddEditForm = ({setPageIndex, nextPageIndex, prevPageIndex}) => {\n    const dispatch = useDispatch();\n    const [instructionNoteForm, setInstructionNoteForm] = useState(initData);\n    const checkupData = useSelector(({checkup}) => checkup.checkupAddEdit);\n    const instructionNoteData = useSelector(({InstructionNote}) => InstructionNote.instructionNoteAddEdit);\n\n    useEffect(() => {\n        let instructionNoteID = instructionNoteData ? instructionNoteData.instructionNoteID : initData.instructionNoteID;\n        let instructionNote = instructionNoteData ? instructionNoteData.instructionNote : initData.instructionNote;\n        let indication = instructionNoteData ? instructionNoteData.indication : initData.indication;\n        let procedure = instructionNoteData ? instructionNoteData.procedure : initData.procedure;\n        let postop = instructionNoteData ? instructionNoteData.postop : initData.postop;\n        setInstructionNoteForm({\n            instructionNoteID: instructionNoteID,\n            instructionNote: instructionNote,\n            indication: indication,\n            procedure: procedure,\n            postop: postop\n        });\n    }, [dispatch, instructionNoteData.indication, instructionNoteData.procedure, instructionNoteData.postop]);\n\n    const onCustomValidation = (name, value) => {\n        let validate = customValidator({[name]: value}, getValidations());\n        dispatch(Action.onFormChange({\n            isValid: validate.isValid,\n            [name]: value\n        }));\n        return validate.errors;\n    };\n\n    const onChange = (event) => {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n        onCustomValidation(name, value);\n        setInstructionNoteForm({...instructionNoteForm, [name]: value});\n    };\n\n    const saveFunction = () => {\n        let saveObject = generateSaveObject(checkupData, instructionNoteData);\n        console.log(saveObject);\n        if (saveObject.checkupID) {\n            dispatch(Action.saveOrUpdateInstructionNote(saveObject)).then(response => {\n                setStorageItem(Constants.STORAGE.INSTRUCTION_NOTE_ID, response.payload.instructionNoteID);\n            })\n        }\n        setPageIndex(nextPageIndex);\n    };\n\n    return (\n        <>\n            <NextPrevButtonGroup\n                setPageIndex={setPageIndex}\n                prevPageIndex={prevPageIndex}\n                saveFunction={saveFunction}\n                isValid={true}\n            />\n\n            <Formik\n                enableReinitialize={true}\n                initialValues={instructionNoteForm}\n                onSubmit={(values, {setSubmitting}) => {\n                    setTimeout(() => {\n                        setSubmitting(false)\n                    }, 200)\n                }}\n                validateOnChange={true}\n                validate={(values) => {\n\n                    return onCustomValidation(values);\n                }}\n            >\n                {({errors, touched}) => {\n                    return (\n                        <Form>\n                            <CRow>\n\n                                {/*<CCol sm=\"12\">*/}\n                                {/*    <CFormGroup>*/}\n                                {/*        <CLabel htmlFor=\"instructionNote\" className={'required'}>Instruction*/}\n                                {/*            Note</CLabel>*/}\n                                {/*        <textarea*/}\n                                {/*            rows=\"10\" cols=\"120\"*/}\n                                {/*            name=\"instructionNote\"*/}\n                                {/*            value={instructionNoteForm.instructionNote}*/}\n                                {/*            placeholder={'Instruction Note'}*/}\n                                {/*            onChange={onChange}*/}\n                                {/*            className={getInputFieldClassNames(touched.instructionNote, errors.instructionNote)}*/}\n                                {/*        />*/}\n                                {/*    </CFormGroup>*/}\n\n                                {/*</CCol>*/}\n\n                                <CCol sm=\"12\">\n                                    <CFormGroup>\n                                        <CLabel htmlFor=\"indication\" className={'required'}>Indication</CLabel>\n                                        <textarea\n                                            rows=\"5\" cols=\"120\"\n                                            name=\"indication\"\n                                            value={instructionNoteForm.indication}\n                                            placeholder={'Indication'}\n                                            onChange={onChange}\n                                            className={getInputFieldClassNames(touched.indication, errors.indication)}\n                                        />\n                                    </CFormGroup>\n\n                                </CCol>\n\n                                <CCol sm=\"12\">\n                                    <CFormGroup>\n                                        <CLabel htmlFor=\"procedure\" className={'required'}>Procedure</CLabel>\n                                        <textarea\n                                            rows=\"5\" cols=\"120\"\n                                            name=\"procedure\"\n                                            value={instructionNoteForm.procedure}\n                                            placeholder={'Procedure'}\n                                            onChange={onChange}\n                                            className={getInputFieldClassNames(touched.procedure, errors.procedure)}\n                                        />\n                                    </CFormGroup>\n\n                                </CCol>\n\n                                <CCol sm=\"12\">\n                                    <CFormGroup>\n                                        <CLabel htmlFor=\"postop\" className={'required'}>Post op</CLabel>\n                                        <textarea\n                                            rows=\"5\" cols=\"120\"\n                                            name=\"postop\"\n                                            value={instructionNoteForm.postop}\n                                            placeholder={'Post op'}\n                                            onChange={onChange}\n                                            className={getInputFieldClassNames(touched.postop, errors.postop)}\n                                        />\n                                    </CFormGroup>\n\n                                </CCol>\n                            </CRow>\n                        </Form>\n                    );\n                }}\n            </Formik>\n\n            <NextPrevButtonGroup\n                setPageIndex={setPageIndex}\n                prevPageIndex={prevPageIndex}\n                saveFunction={saveFunction}\n                isValid={true}\n            />\n        </>\n    );\n};\n\nexport default InstructionAddEditForm;"]},"metadata":{},"sourceType":"module"}