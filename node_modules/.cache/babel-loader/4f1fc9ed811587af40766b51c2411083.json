{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chamald\\\\Desktop\\\\Chamal\\\\react\\\\react-app\\\\src\\\\app\\\\views\\\\admin\\\\patient\\\\newPatient\\\\stepper\\\\stepComponents\\\\createCheckUp\\\\components\\\\CreateCheckupForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { ErrorMessage, Field, Form, Formik } from \"formik\";\nimport { CCol, CFormGroup, CLabel, CRow } from \"@coreui/react\";\nimport FormikDatePicker from \"../../../../../../../../common/FormikDatePicker\";\nimport Constants from \"../../../../../../../../../utils/Constants\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as Action from \"../store/action/checkup.app.add.edit.action\";\nimport { setStorageItem } from \"../../../../../../../../../utils/StorageUtils\";\nimport NextPrevButtonGroup from \"../../../../../../../common/NextPrevButtonGroup\";\nimport CIcon from \"@coreui/icons-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst generateSaveObject = (checkupData, patientData) => {\n  return Object.assign({}, { ...checkupData.formData.values\n  }, {\n    patientID: patientData.patientID ? patientData.patientID : null\n  });\n};\n\nconst validateDateInput = value => {\n  let invalidDateObj = {\n    isValid: false,\n    errors: {\n      checkupDateStr: 'Invalid date'\n    }\n  };\n  let length = value ? value.length : 0;\n  let day = '',\n      month = '',\n      year = '';\n\n  if (length !== 8 && length !== 10 && length !== 16) {\n    return invalidDateObj;\n  }\n\n  if (length === 8) {\n    day = parseInt(value.substr(0, 2));\n    month = parseInt(value.substr(2, 2));\n    year = parseInt(value.substr(4, 4));\n  } else {\n    day = parseInt(value.substr(0, 2));\n    month = parseInt(value.substr(3, 2));\n    year = parseInt(value.substr(6, 4));\n  }\n\n  let currentDate = new Date();\n\n  if (currentDate.getUTCFullYear() < year) {\n    return invalidDateObj;\n  }\n\n  if (currentDate.getUTCFullYear() === year) {\n    if (currentDate.getUTCMonth() + 1 < month) {\n      return invalidDateObj;\n    }\n  }\n\n  if (currentDate.getUTCFullYear() === year && currentDate.getUTCMonth() + 1 === month) {\n    if (currentDate.getUTCDate() < day) {\n      return invalidDateObj;\n    }\n  }\n\n  if (_.isNaN(day) || _.isNaN(month) || _.isNaN(year)) {\n    return invalidDateObj;\n  }\n\n  return {\n    isValid: true,\n    errors: {}\n  };\n};\n\nconst CreateCheckupForm = _ref => {\n  _s();\n\n  let {\n    setPageIndex,\n    prevPageIndex,\n    nextPageIndex\n  } = _ref;\n  const [checkupForm, setCheckupForm] = useState({\n    checkupDateStr: new Date().toLocaleDateString('en-GB')\n  });\n  const dispatch = useDispatch();\n  const checkupData = useSelector(_ref2 => {\n    let {\n      checkup\n    } = _ref2;\n    return checkup.checkupAddEdit;\n  });\n  const patientData = useSelector(_ref3 => {\n    let {\n      patient\n    } = _ref3;\n    return patient.patientAddEdit;\n  });\n  const [isValid, setIsValid] = useState(false);\n  useEffect(() => {\n    let checkup = checkupData.checkup.checkupDateStr ? checkupData.checkup : {\n      checkupDateStr: new Date().toLocaleDateString('en-GB')\n    };\n    setCheckupForm({ ...checkup\n    });\n    onCustomValidation({ ...checkup\n    });\n  }, [dispatch, checkupData.checkup]);\n\n  const onCustomValidation = values => {\n    let validate = validateDateInput(values.checkupDateStr);\n    dispatch(Action.onFormChange({\n      isValid: validate.isValid,\n      values: values\n    }));\n    setIsValid(validate.isValid);\n    return validate.errors;\n  };\n\n  const saveFunction = () => {\n    let saveObject = generateSaveObject(checkupData, patientData.patient);\n\n    if (saveObject.patientID) {\n      dispatch(Action.saveOrUpdateCheckup(saveObject)).then(response => {\n        setStorageItem(Constants.STORAGE.CHECKUP_ID, response.payload.checkupID);\n        setPageIndex(nextPageIndex);\n      }).catch(error => {\n        console.log(error);\n      });\n    } else {\n      setPageIndex(Constants.PAGE_INDEXES.RegisterPatientBase);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NextPrevButtonGroup, {\n      setPageIndex: setPageIndex,\n      prevPageIndex: prevPageIndex,\n      saveFunction: saveFunction,\n      isValid: isValid\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Formik, {\n      enableReinitialize: true,\n      initialValues: checkupForm,\n      onSubmit: (values, _ref4) => {\n        let {\n          setSubmitting\n        } = _ref4;\n        setTimeout(() => {\n          setSubmitting(false);\n        }, 200);\n      },\n      validateOnChange: true,\n      validate: values => {\n        return onCustomValidation(values);\n      },\n      children: _ref5 => {\n        let {\n          errors,\n          touched\n        } = _ref5;\n        return /*#__PURE__*/_jsxDEV(Form, {\n          children: /*#__PURE__*/_jsxDEV(CRow, {\n            children: /*#__PURE__*/_jsxDEV(CCol, {\n              sm: \"12\",\n              children: [/*#__PURE__*/_jsxDEV(CFormGroup, {\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"d-flex flex-row flex-wrap\",\n                  children: [/*#__PURE__*/_jsxDEV(CLabel, {\n                    htmlFor: \"checkupDateStr\",\n                    className: 'required mt-0 mb-0',\n                    children: \"Checkup Date\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 137,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(Field, {\n                    className: 'ml-15p',\n                    type: \"test\",\n                    name: \"checkupDateStr\",\n                    placeholder: 'checkup Date',\n                    component: FormikDatePicker\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 140,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: /*#__PURE__*/_jsxDEV(CIcon, {\n                      size: 'lg',\n                      name: 'cil-calendar',\n                      style: {\n                        margin: '6px'\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 149,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 148,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 136,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 135,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                name: \"checkupDateStr\",\n                render: msg => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: 'formik-error-message',\n                  children: msg\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 160,\n                  columnNumber: 58\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 158,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 25\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(CreateCheckupForm, \"q0uhsCa60amb14u+hbEWlDNOipE=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = CreateCheckupForm;\nexport default CreateCheckupForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateCheckupForm\");","map":{"version":3,"sources":["C:/Users/chamald/Desktop/Chamal/react/react-app/src/app/views/admin/patient/newPatient/stepper/stepComponents/createCheckUp/components/CreateCheckupForm.js"],"names":["React","useEffect","useState","ErrorMessage","Field","Form","Formik","CCol","CFormGroup","CLabel","CRow","FormikDatePicker","Constants","useDispatch","useSelector","Action","setStorageItem","NextPrevButtonGroup","CIcon","generateSaveObject","checkupData","patientData","Object","assign","formData","values","patientID","validateDateInput","value","invalidDateObj","isValid","errors","checkupDateStr","length","day","month","year","parseInt","substr","currentDate","Date","getUTCFullYear","getUTCMonth","getUTCDate","_","isNaN","CreateCheckupForm","setPageIndex","prevPageIndex","nextPageIndex","checkupForm","setCheckupForm","toLocaleDateString","dispatch","checkup","checkupAddEdit","patient","patientAddEdit","setIsValid","onCustomValidation","validate","onFormChange","saveFunction","saveObject","saveOrUpdateCheckup","then","response","STORAGE","CHECKUP_ID","payload","checkupID","catch","error","console","log","PAGE_INDEXES","RegisterPatientBase","setSubmitting","setTimeout","touched","margin","msg"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {ErrorMessage, Field, Form, Formik} from \"formik\";\nimport {CCol, CFormGroup, CLabel, CRow} from \"@coreui/react\";\nimport FormikDatePicker from \"../../../../../../../../common/FormikDatePicker\";\nimport Constants from \"../../../../../../../../../utils/Constants\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport * as Action from \"../store/action/checkup.app.add.edit.action\";\nimport {setStorageItem} from \"../../../../../../../../../utils/StorageUtils\";\nimport NextPrevButtonGroup from \"../../../../../../../common/NextPrevButtonGroup\";\nimport CIcon from \"@coreui/icons-react\";\n\nconst generateSaveObject = (checkupData, patientData) => {\n    return Object.assign({}, {...checkupData.formData.values}, {patientID: patientData.patientID ? patientData.patientID : null});\n};\n\nconst validateDateInput = (value) => {\n    let invalidDateObj = {\n        isValid: false,\n        errors: {\n            checkupDateStr: 'Invalid date'\n        }\n    };\n\n    let length = value ? value.length : 0;\n\n    let day = '', month = '', year = '';\n\n    if (length !== 8 && length !== 10 && length !== 16) {\n        return invalidDateObj;\n    }\n\n    if (length === 8) {\n        day = parseInt(value.substr(0, 2));\n        month = parseInt(value.substr(2, 2));\n        year = parseInt(value.substr(4, 4));\n    } else {\n        day = parseInt(value.substr(0, 2));\n        month = parseInt(value.substr(3, 2));\n        year = parseInt(value.substr(6, 4));\n    }\n\n    let currentDate = new Date();\n\n    if (currentDate.getUTCFullYear() < year) {\n        return invalidDateObj;\n    }\n\n    if (currentDate.getUTCFullYear() === year) {\n        if ((currentDate.getUTCMonth() + 1) < month) {\n            return invalidDateObj;\n        }\n    }\n\n    if (currentDate.getUTCFullYear() === year && (currentDate.getUTCMonth() + 1) === month) {\n        if (currentDate.getUTCDate() < day) {\n            return invalidDateObj;\n        }\n    }\n\n    if (_.isNaN(day) || _.isNaN(month) || _.isNaN(year)) {\n        return invalidDateObj;\n    }\n\n    return {\n        isValid: true,\n        errors: {}\n    };\n};\n\nconst CreateCheckupForm = ({setPageIndex, prevPageIndex, nextPageIndex}) => {\n    const [checkupForm, setCheckupForm] = useState({checkupDateStr: new Date().toLocaleDateString('en-GB')});\n    const dispatch = useDispatch();\n    const checkupData = useSelector(({checkup}) => checkup.checkupAddEdit);\n    const patientData = useSelector(({patient}) => patient.patientAddEdit);\n    const [isValid, setIsValid] = useState(false);\n\n    useEffect(() => {\n        let checkup = checkupData.checkup.checkupDateStr ? checkupData.checkup : {checkupDateStr: new Date().toLocaleDateString('en-GB')};\n        setCheckupForm({...checkup});\n        onCustomValidation({...checkup})\n    }, [dispatch, checkupData.checkup]);\n\n    const onCustomValidation = (values) => {\n        let validate = validateDateInput(values.checkupDateStr);\n        dispatch(Action.onFormChange({\n            isValid: validate.isValid,\n            values: values\n        }));\n        setIsValid(validate.isValid);\n        return validate.errors;\n    };\n\n    const saveFunction = () => {\n        let saveObject = generateSaveObject(checkupData, patientData.patient);\n\n        if (saveObject.patientID) {\n            dispatch(Action.saveOrUpdateCheckup(saveObject)).then(response => {\n                setStorageItem(Constants.STORAGE.CHECKUP_ID, response.payload.checkupID);\n                setPageIndex(nextPageIndex);\n            }).catch(error => {\n                console.log(error);\n            })\n        } else {\n            setPageIndex(Constants.PAGE_INDEXES.RegisterPatientBase);\n        }\n    };\n\n    return (\n        <>\n            <NextPrevButtonGroup\n                setPageIndex={setPageIndex}\n                prevPageIndex={prevPageIndex}\n                saveFunction={saveFunction}\n                isValid={isValid}\n            />\n\n            <Formik\n                enableReinitialize={true}\n                initialValues={checkupForm}\n                onSubmit={(values, {setSubmitting}) => {\n                    setTimeout(() => {\n                        setSubmitting(false)\n                    }, 200)\n                }}\n                validateOnChange={true}\n                validate={(values) => {\n                    return onCustomValidation(values);\n                }}\n            >\n                {({errors, touched}) => {\n                    return (\n                        <Form>\n                            <CRow>\n                                <CCol sm=\"12\">\n                                    <CFormGroup>\n                                        <div className='d-flex flex-row flex-wrap'>\n                                            <CLabel htmlFor=\"checkupDateStr\" className={'required mt-0 mb-0'}>Checkup\n                                                Date</CLabel>\n\n                                            <Field\n                                                className={'ml-15p'}\n                                                type=\"test\"\n                                                name=\"checkupDateStr\"\n                                                placeholder={'checkup Date'}\n                                                component={FormikDatePicker}\n                                            />\n\n                                            <span>\n                                            <CIcon\n                                                size={'lg'}\n                                                name={'cil-calendar'}\n                                                style={{margin: '6px'}}\n                                            />\n                                        </span>\n                                        </div>\n                                    </CFormGroup>\n\n                                    <ErrorMessage\n                                        name=\"checkupDateStr\"\n                                        render={(msg) => <div\n                                            className={'formik-error-message'}>{msg}</div>}\n                                    />\n\n                                </CCol>\n                            </CRow>\n                        </Form>\n                    );\n                }}\n            </Formik>\n\n\n        </>\n    );\n};\n\nexport default CreateCheckupForm;"]},"metadata":{},"sourceType":"module"}