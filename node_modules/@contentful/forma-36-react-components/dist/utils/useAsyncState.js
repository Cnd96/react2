"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useAsyncState = useAsyncState;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = require("react");

/**
 * An asyncronous state hook.
 *
 * Think of it as a slight modification of React's `useState` hook, where the
 * state returned is instead a `MutableRefObject` like you know it from the
 * `useRef` hook.
 *
 * @param value
 * @returns A tuple with the `MutableRefObject` and a function to set the state
 */
function useAsyncState(value) {
  var ref = (0, _react.useRef)(value);

  var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      forceUpdate = _useState2[1];

  var setState = function setState(newState) {
    if (!Object.is(ref.current, newState)) {
      ref.current = newState;
      forceUpdate(function (state) {
        return !state;
      });
    }
  };

  return [ref, setState];
}