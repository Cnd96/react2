"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EditorToolbarButton = EditorToolbarButton;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _IconButton = require("../../IconButton");

var _Tooltip = require("../../Tooltip");

var _excluded = ["className", "label", "testId", "icon", "tooltip", "tooltipPlace", "iconButtonProps", "isActive", "disabled", "onClick", "withDropdown"];
var styles = {
  "EditorToolbarButton": "EditorToolbarButton__EditorToolbarButton___2t--R",
  "EditorToolbarButton--is-active": "EditorToolbarButton__EditorToolbarButton--is-active___12pD0"
};

function EditorToolbarButton(_ref) {
  var className = _ref.className,
      label = _ref.label,
      _ref$testId = _ref.testId,
      testId = _ref$testId === void 0 ? 'cf-ui-editor-toolbar-button' : _ref$testId,
      icon = _ref.icon,
      tooltip = _ref.tooltip,
      tooltipPlace = _ref.tooltipPlace,
      iconButtonProps = _ref.iconButtonProps,
      _ref$isActive = _ref.isActive,
      isActive = _ref$isActive === void 0 ? false : _ref$isActive,
      _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === void 0 ? false : _ref$disabled,
      onClick = _ref.onClick,
      _ref$withDropdown = _ref.withDropdown,
      withDropdown = _ref$withDropdown === void 0 ? false : _ref$withDropdown,
      otherProps = (0, _objectWithoutProperties2["default"])(_ref, _excluded);
  var classNames = (0, _classnames["default"])(styles['EditorToolbarButton'], className, (0, _defineProperty2["default"])({}, styles['EditorToolbarButton--is-active'], isActive));
  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(_Tooltip.Tooltip, {
    content: !disabled ? tooltip : undefined,
    place: tooltipPlace
  }, /*#__PURE__*/_react["default"].createElement(_IconButton.IconButton, (0, _extends2["default"])({
    iconProps: {
      icon: icon
    },
    testId: testId,
    buttonType: "secondary",
    label: label,
    className: classNames,
    onClick: !disabled ? onClick : function () {},
    disabled: disabled,
    withDropdown: withDropdown
  }, iconButtonProps, otherProps))));
}