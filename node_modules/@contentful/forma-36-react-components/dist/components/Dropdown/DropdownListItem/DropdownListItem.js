"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DropdownListItem = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _TabFocusTrap = require("../../TabFocusTrap");

var _excluded = ["isActive", "isDisabled", "isTitle", "onClick", "submenuToggleLabel", "testId"],
    _excluded2 = ["onEnter", "onLeave", "onFocus", "children"],
    _excluded3 = ["onMouseDown", "href", "children", "listItemRef"];
var styles = {
  "DropdownListItem": "DropdownListItem__DropdownListItem___LOUnP",
  "DropdownListItem__button": "DropdownListItem__DropdownListItem__button___1Po6h a11y__focus-outline--default___2hwb1",
  "DropdownListItem__submenu-toggle": "DropdownListItem__DropdownListItem__submenu-toggle___1SVw1",
  "DropdownListItem__button__inner-wrapper": "DropdownListItem__DropdownListItem__button__inner-wrapper___LFlkP",
  "DropdownListItem--disabled": "DropdownListItem__DropdownListItem--disabled___1txXv",
  "DropdownListItem--active": "DropdownListItem__DropdownListItem--active___21eet",
  "DropdownListItem--title": "DropdownListItem__DropdownListItem--title___CyVKB"
};
var DropdownListItem = /*#__PURE__*/(0, _react.forwardRef)(function DropdownListItem(_ref, refCallback) {
  var _cn;

  var _ref$isActive = _ref.isActive,
      isActive = _ref$isActive === void 0 ? false : _ref$isActive,
      _ref$isDisabled = _ref.isDisabled,
      isDisabled = _ref$isDisabled === void 0 ? false : _ref$isDisabled,
      _ref$isTitle = _ref.isTitle,
      isTitle = _ref$isTitle === void 0 ? false : _ref$isTitle,
      onClick = _ref.onClick,
      submenuToggleLabel = _ref.submenuToggleLabel,
      _ref$testId = _ref.testId,
      testId = _ref$testId === void 0 ? 'cf-ui-dropdown-list-item' : _ref$testId,
      props = (0, _objectWithoutProperties2["default"])(_ref, _excluded);
  // We're not dealing with React RefObjects but with useState (because we
  // want to re-render on all changes)
  var setReference = refCallback;
  var renderSubmenuToggle = (0, _react.useCallback)(function () {
    var onEnter = props.onEnter,
        onLeave = props.onLeave,
        onFocus = props.onFocus,
        children = props.children,
        otherProps = (0, _objectWithoutProperties2["default"])(props, _excluded2);
    return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement("button", (0, _extends2["default"])({
      type: "button",
      "data-test-id": "cf-ui-dropdown-submenu-toggle",
      className: styles['DropdownListItem__button'],
      onClick: onClick,
      onMouseEnter: onEnter,
      onFocus: onFocus,
      onMouseLeave: onLeave
    }, otherProps), /*#__PURE__*/_react["default"].createElement(_TabFocusTrap.TabFocusTrap, {
      className: styles['DropdownListItem__button__inner-wrapper']
    }, submenuToggleLabel)), children);
  }, [onClick, submenuToggleLabel, props]);
  var renderListItem = (0, _react.useCallback)(function () {
    var onMouseDown = props.onMouseDown,
        href = props.href,
        children = props.children,
        listItemRef = props.listItemRef,
        otherProps = (0, _objectWithoutProperties2["default"])(props, _excluded3);
    var isClickable = onClick || onMouseDown || href;

    if (isClickable) {
      var Element = href ? 'a' : 'button';
      var buttonProps = {
        disabled: isDisabled,
        'aria-disabled': isDisabled
      };
      var linkProps = {
        href: href
      };
      return /*#__PURE__*/_react["default"].createElement(Element, (0, _extends2["default"])({
        onClick: !isDisabled && onClick !== undefined ? onClick : undefined,
        onMouseDown: !isDisabled && onMouseDown !== undefined ? onMouseDown : undefined,
        type: "button"
      }, href ? linkProps : buttonProps, otherProps, {
        className: styles['DropdownListItem__button'],
        "data-test-id": "cf-ui-dropdown-list-item-button"
      }), /*#__PURE__*/_react["default"].createElement(_TabFocusTrap.TabFocusTrap, {
        className: styles['DropdownListItem__button__inner-wrapper']
      }, children));
    }

    return children;
  }, [isDisabled, onClick, props]);
  var className = props.className,
      listItemRef = props.listItemRef,
      onMouseDown = props.onMouseDown,
      href = props.href;
  var classNames = (0, _classnames["default"])(styles['DropdownListItem'], className, (_cn = {}, (0, _defineProperty2["default"])(_cn, styles['DropdownListItem__submenu-toggle'], submenuToggleLabel || onClick || onMouseDown || href), (0, _defineProperty2["default"])(_cn, styles['DropdownListItem--disabled'], isDisabled), (0, _defineProperty2["default"])(_cn, styles['DropdownListItem--active'], isActive), (0, _defineProperty2["default"])(_cn, styles['DropdownListItem--title'], isTitle), _cn));
  return /*#__PURE__*/_react["default"].createElement("li", {
    className: classNames,
    "data-test-id": testId,
    role: "menuitem",
    ref: function ref(node) {
      if (setReference) {
        setReference(node);
      }

      if (listItemRef) {
        listItemRef.current = node;
      }
    }
  }, submenuToggleLabel ? renderSubmenuToggle() : renderListItem());
});
exports.DropdownListItem = DropdownListItem;
DropdownListItem.displayName = 'DropdownListItem';