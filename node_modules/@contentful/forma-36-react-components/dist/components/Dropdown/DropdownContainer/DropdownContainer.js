"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DropdownContainer = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _useOnClickOutside = require("../../../utils/useOnClickOutside");

var _Portal = require("../../Portal");

var _excluded = ["children", "className", "getRef", "isOpen", "onClose", "openSubmenu", "style", "submenu", "testId", "usePortal", "nonClosingRefs", "focusContainerOnOpen"];
var styles = {
  "DropdownContainer": "DropdownContainer__DropdownContainer___3WlJM"
};
var DropdownContainer = /*#__PURE__*/(0, _react.forwardRef)(function DropdownContainer(_ref, refCallback) {
  var children = _ref.children,
      className = _ref.className,
      getRef = _ref.getRef,
      isOpen = _ref.isOpen,
      onClose = _ref.onClose,
      openSubmenu = _ref.openSubmenu,
      style = _ref.style,
      _ref$submenu = _ref.submenu,
      submenu = _ref$submenu === void 0 ? false : _ref$submenu,
      _ref$testId = _ref.testId,
      testId = _ref$testId === void 0 ? 'cf-ui-dropdown-portal' : _ref$testId,
      _ref$usePortal = _ref.usePortal,
      usePortal = _ref$usePortal === void 0 ? true : _ref$usePortal,
      nonClosingRefs = _ref.nonClosingRefs,
      focusContainerOnOpen = _ref.focusContainerOnOpen,
      props = (0, _objectWithoutProperties2["default"])(_ref, _excluded);
  // We're not dealing with React RefObjects but with useState (because we
  // want to re-render on all changes)
  var setReference = refCallback;
  var dropdown = (0, _react.useRef)(null);
  var classNames = (0, _classnames["default"])(className, styles['DropdownContainer']);
  var clickableRefs = [dropdown].concat((0, _toConsumableArray2["default"])(nonClosingRefs || []));
  (0, _useOnClickOutside.useOnClickOutside)(clickableRefs, function (event) {
    if (isOpen && onClose) {
      event.stopImmediatePropagation();
      onClose(event);
    }
  });
  (0, _react.useEffect)(function () {
    if (getRef && dropdown.current) {
      getRef(dropdown.current);
    }

    if (focusContainerOnOpen && dropdown.current) {
      dropdown.current.focus({
        preventScroll: true
      });
    }
  }, [getRef, focusContainerOnOpen]);

  var dropdownComponent = /*#__PURE__*/_react["default"].createElement("div", (0, _extends2["default"])({}, props, {
    className: classNames,
    "data-test-id": testId // tabIndex is Necessary to focus the container for keyboard accessibility
    // eslint-disable-next-line
    ,
    tabIndex: 0,
    onMouseEnter: function onMouseEnter() {
      if (openSubmenu) {
        openSubmenu(true);
      }
    },
    onFocus: function onFocus() {
      if (openSubmenu) {
        openSubmenu(true);
      }
    },
    onMouseLeave: function onMouseLeave() {
      if (openSubmenu) {
        openSubmenu(false);
      }
    },
    ref: function ref(node) {
      setReference(node);
      dropdown.current = node;
    },
    style: style
  }), children);

  return submenu || usePortal === false ? dropdownComponent : /*#__PURE__*/_react["default"].createElement(_Portal.Portal, null, dropdownComponent);
});
exports.DropdownContainer = DropdownContainer;
DropdownContainer.displayName = 'DropdownContainer';