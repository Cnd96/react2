"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ControlledInputField = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _FormLabel = require("../FormLabel");

var _HelpText = require("../HelpText");

var _ValidationMessage = require("../ValidationMessage");

var _ControlledInput = require("../ControlledInput/ControlledInput");

var _excluded = ["id", "labelIsLight", "testId", "required", "helpText", "disabled", "labelText", "helpTextProps", "formLabelProps", "className", "checked", "value", "validationMessage", "onChange", "children", "inputType", "inputProps", "name"];
var styles = {
  "ControlledInputField": "ControlledInputField__ControlledInputField___2uIG9",
  "ControlledInputField--disabled": "ControlledInputField__ControlledInputField--disabled___HDWt6",
  "ControlledInputField__input": "ControlledInputField__ControlledInputField__input___3OMYB",
  "ControlledInputField__label": "ControlledInputField__ControlledInputField__label___a9J52",
  "ControlledInputField__label--light": "ControlledInputField__ControlledInputField__label--light___2G2AZ"
};

var ControlledInputField = function ControlledInputField(_ref) {
  var id = _ref.id,
      _ref$labelIsLight = _ref.labelIsLight,
      labelIsLight = _ref$labelIsLight === void 0 ? false : _ref$labelIsLight,
      _ref$testId = _ref.testId,
      testId = _ref$testId === void 0 ? 'cf-ui-controlled-input-field' : _ref$testId,
      required = _ref.required,
      helpText = _ref.helpText,
      disabled = _ref.disabled,
      labelText = _ref.labelText,
      helpTextProps = _ref.helpTextProps,
      formLabelProps = _ref.formLabelProps,
      className = _ref.className,
      _ref$checked = _ref.checked,
      checked = _ref$checked === void 0 ? false : _ref$checked,
      value = _ref.value,
      validationMessage = _ref.validationMessage,
      onChange = _ref.onChange,
      children = _ref.children,
      _ref$inputType = _ref.inputType,
      inputType = _ref$inputType === void 0 ? 'checkbox' : _ref$inputType,
      inputProps = _ref.inputProps,
      name = _ref.name,
      otherProps = (0, _objectWithoutProperties2["default"])(_ref, _excluded);
  var classNames = (0, _classnames["default"])(styles['ControlledInputField'], className, (0, _defineProperty2["default"])({}, styles['ControlledInputField--disabled'], disabled));
  return /*#__PURE__*/_react["default"].createElement("div", (0, _extends2["default"])({
    "data-test-id": testId,
    className: classNames
  }, otherProps), /*#__PURE__*/_react["default"].createElement(_ControlledInput.ControlledInput, (0, _extends2["default"])({
    id: id,
    labelText: labelText,
    type: inputType,
    name: name,
    required: required,
    checked: checked,
    disabled: disabled,
    value: value,
    onChange: onChange,
    className: styles.ControlledInputField__input
  }, inputProps)), /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement(_FormLabel.FormLabel, (0, _extends2["default"])({
    className: (0, _classnames["default"])(styles.ControlledInputField__label, (0, _defineProperty2["default"])({}, styles['ControlledInputField__label--light'], labelIsLight)),
    required: required,
    htmlFor: id
  }, formLabelProps), labelText), validationMessage && /*#__PURE__*/_react["default"].createElement(_ValidationMessage.ValidationMessage, {
    className: styles['ControlledInputField__validation-message']
  }, validationMessage), helpText && /*#__PURE__*/_react["default"].createElement(_HelpText.HelpText, (0, _extends2["default"])({
    className: styles['ControlledInputField__help-text']
  }, helpTextProps), helpText)));
};

exports.ControlledInputField = ControlledInputField;