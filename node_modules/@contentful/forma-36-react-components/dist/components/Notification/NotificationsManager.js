"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NotificationsManager = NotificationsManager;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _NotificationItemContainer = require("./NotificationItemContainer");

var _useAsyncState3 = require("../../utils/useAsyncState");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var styles = {
  "NotificationsManager": "NotificationsManager__NotificationsManager___1uvY2",
  "NotificationsManager__container": "NotificationsManager__NotificationsManager__container___3U0e9",
  "NotificationsManager--top": "NotificationsManager__NotificationsManager--top___aRv7j"
};
var uniqueId = 0;

var getUniqueId = function getUniqueId() {
  uniqueId += 1;
  return uniqueId;
};

function NotificationsManager(_ref) {
  var register = _ref.register;

  var _useAsyncState = (0, _useAsyncState3.useAsyncState)([]),
      _useAsyncState2 = (0, _slicedToArray2["default"])(_useAsyncState, 2),
      items = _useAsyncState2[0],
      setItems = _useAsyncState2[1];

  var _useState = (0, _react.useState)('bottom'),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      position = _useState2[0],
      setPositionState = _useState2[1];

  var _useState3 = (0, _react.useState)(20),
      _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
      positionOffset = _useState4[0],
      setPositionOffset = _useState4[1];

  var _useState5 = (0, _react.useState)(6000),
      _useState6 = (0, _slicedToArray2["default"])(_useState5, 2),
      duration = _useState6[0],
      setDuration = _useState6[1];

  var setPosition = (0, _react.useCallback)(function (position, params) {
    if (position === 'bottom' || position === 'top') {
      var _positionOffset = params && params.offset ? params.offset : 20;

      setPositionState(position);
      setPositionOffset(_positionOffset);
    }
  }, []);
  var close = (0, _react.useCallback)(function (id) {
    setItems(items.current.map(function (item) {
      if (item.id !== id) {
        return item;
      }

      return _objectSpread(_objectSpread({}, item), {}, {
        isShown: false
      });
    }));
  }, [items, setItems]);
  var closeAndDelete = (0, _react.useCallback)(function (id) {
    setItems(items.current.filter(function (item) {
      return item.id !== id;
    }));
  }, [items, setItems]);
  var closeAll = (0, _react.useCallback)(function () {
    setItems(items.current.map(function (item) {
      return _objectSpread(_objectSpread({}, item), {}, {
        isShown: false
      });
    }));
  }, [items, setItems]);
  var show = (0, _react.useCallback)(function (text, settings) {
    var itemDuration = settings && typeof settings.duration !== 'undefined' // Needed as 0 is falsy but 0 is valid to disable auto-closing a notification
    ? settings.duration : duration;
    var intent = settings && settings.intent ? settings.intent : 'success';
    var canClose = settings && typeof settings.canClose !== 'undefined' ? settings.canClose : true;
    var notificationId = settings && settings.id ? settings.id : getUniqueId();
    var notification = {
      id: notificationId,
      text: text,
      close: function close() {
        return closeAndDelete(notificationId);
      },
      duration: itemDuration,
      canClose: canClose,
      isShown: true,
      intent: intent,
      title: settings && settings.title,
      cta: settings && settings.cta
    };
    var alreadyThere = items.current.find(function (item) {
      return item.id === notification.id;
    });

    if (alreadyThere) {
      return alreadyThere;
    }

    if (position === 'top') {
      setItems([notification].concat((0, _toConsumableArray2["default"])(items.current)));
    } else {
      setItems([].concat((0, _toConsumableArray2["default"])(items.current), [notification]));
    }

    return notification;
  }, [closeAndDelete, duration, items, position, setItems]);
  register('close', close);
  register('show', show);
  register('closeAll', closeAll);
  register('setPosition', setPosition);
  register('setDuration', setDuration);
  return /*#__PURE__*/_react["default"].createElement("div", {
    "data-test-id": "cf-notification-container",
    className: (0, _classnames["default"])(styles.NotificationsManager, (0, _defineProperty2["default"])({}, styles["NotificationsManager--top"], position === 'top')),
    style: (0, _defineProperty2["default"])({}, position, positionOffset)
  }, /*#__PURE__*/_react["default"].createElement("div", {
    className: styles.NotificationsManager__container
  }, items.current.map(function (item) {
    return /*#__PURE__*/_react["default"].createElement(_NotificationItemContainer.NotificationItemContainer, {
      intent: item.intent,
      duration: item.duration,
      key: item.id,
      hasCloseButton: item.canClose,
      onClose: item.close,
      isShown: item.isShown,
      title: item.title,
      cta: item.cta
    }, item.text);
  })));
}