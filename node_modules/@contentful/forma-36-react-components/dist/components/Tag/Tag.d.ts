import React from 'react';
export declare type TagType = 'primary' | 'primary-filled' | 'positive' | 'negative' | 'warning' | 'secondary' | 'featured' | 'muted';
declare type Status = 'published' | 'draft' | 'archived' | 'changed' | 'deleted' | 'new';
export interface TagProps {
    /**
     * prop, used for setting type of the component from
     */
    tagType?: TagType;
    /**
     * property to set size of the component */
    size?: 'small' | 'default';
    /**
     * style prop, for inline styles */
    style?: React.CSSProperties;
    /**
     * Class names to be appended to the className prop of the component
     */
    className?: string;
    /**
     * An ID used for testing purposes applied as a data attribute (data-test-id) */
    testId?: string;
    /**
     * Child nodes to be rendered in the component */
    children: React.ReactNode;
    /**
     * prop, used for setting status of the component which maps to TagType,
     * it is used more in the context of the status on the page, like published or archived,
     * Status options - published, draft, archived, changed, deleted, new */
    entityStatusType?: Status;
}
export declare function Tag({ className, children, tagType, size, entityStatusType, testId, ...otherProps }: TagProps): React.ReactElement;
export {};
