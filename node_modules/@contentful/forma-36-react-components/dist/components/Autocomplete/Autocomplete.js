"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Autocomplete = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _TextInput = require("../TextInput");

var _Dropdown = require("../Dropdown");

var _Skeleton = require("../Skeleton");

var _IconButton = require("../IconButton");

var _ValidationMessage = require("../ValidationMessage");

var _utils = require("./utils");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var styles = {
  "autocompleteDropdown": "Autocomplete__autocompleteDropdown___2Wsf1",
  "autocompleteInput": "Autocomplete__autocompleteInput___1WZ9i",
  "autocompleteInputNegative": "Autocomplete__autocompleteInputNegative___19uHF",
  "inputIconButton": "Autocomplete__inputIconButton___1ZS6d",
  "validationMessage": "Autocomplete__validationMessage___1j781"
};
var TOGGLED_LIST = 'TOGGLED_LIST';
var NAVIGATED_ITEMS = 'NAVIGATED_ITEMS';
var QUERY_CHANGED = 'QUERY_CHANGED';
var ITEM_SELECTED = 'ITEM_SELECTED';
var Direction;

(function (Direction) {
  Direction[Direction["DOWN"] = 1] = "DOWN";
  Direction[Direction["UP"] = -1] = "UP";
})(Direction || (Direction = {}));

var reducer = function reducer(state, action) {
  switch (action.type) {
    case TOGGLED_LIST:
      return _objectSpread(_objectSpread({}, state), {}, {
        isOpen: action.payload ? action.payload : !state.isOpen,
        highlightedItemIndex: null
      });

    case NAVIGATED_ITEMS:
      return _objectSpread(_objectSpread({}, state), {}, {
        isOpen: true,
        highlightedItemIndex: action.payload
      });

    case QUERY_CHANGED:
      return _objectSpread(_objectSpread({}, state), {}, {
        highlightedItemIndex: null,
        isOpen: true,
        query: action.payload
      });

    case ITEM_SELECTED:
      return _objectSpread({}, action.payload);

    default:
      return state;
  }
};

var Autocomplete = function Autocomplete(_ref) {
  var _dropdownProps$isOpen;

  var children = _ref.children,
      _ref$items = _ref.items,
      items = _ref$items === void 0 ? [] : _ref$items,
      disabled = _ref.disabled,
      onChange = _ref.onChange,
      onQueryChange = _ref.onQueryChange,
      _ref$placeholder = _ref.placeholder,
      placeholder = _ref$placeholder === void 0 ? 'Search' : _ref$placeholder,
      _ref$selectedItem = _ref.selectedItem,
      selectedItem = _ref$selectedItem === void 0 ? '' : _ref$selectedItem,
      _ref$name = _ref.name,
      name = _ref$name === void 0 ? 'Search' : _ref$name,
      width = _ref.width,
      className = _ref.className,
      maxHeight = _ref.maxHeight,
      isLoading = _ref.isLoading,
      _ref$emptyListMessage = _ref.emptyListMessage,
      emptyListMessage = _ref$emptyListMessage === void 0 ? 'No options' : _ref$emptyListMessage,
      _ref$noMatchesMessage = _ref.noMatchesMessage,
      noMatchesMessage = _ref$noMatchesMessage === void 0 ? 'No matches' : _ref$noMatchesMessage,
      willClearQueryOnClose = _ref.willClearQueryOnClose,
      dropdownProps = _ref.dropdownProps,
      renderToggleElement = _ref.renderToggleElement,
      validationMessage = _ref.validationMessage;
  var listRef = (0, _react.useRef)(null);
  var inputRef = (0, _react.useRef)(null);
  var initialState = {
    isOpen: (_dropdownProps$isOpen = dropdownProps === null || dropdownProps === void 0 ? void 0 : dropdownProps.isOpen) !== null && _dropdownProps$isOpen !== void 0 ? _dropdownProps$isOpen : false,
    query: '',
    highlightedItemIndex: null
  };

  var _useReducer = (0, _react.useReducer)(reducer, initialState),
      _useReducer2 = (0, _slicedToArray2["default"])(_useReducer, 2),
      _useReducer2$ = _useReducer2[0],
      isOpen = _useReducer2$.isOpen,
      query = _useReducer2$.query,
      highlightedItemIndex = _useReducer2$.highlightedItemIndex,
      dispatch = _useReducer2[1];

  var toggleList = function toggleList(isOpen) {
    dispatch({
      type: TOGGLED_LIST,
      payload: isOpen
    });
  };

  var selectItem = function selectItem(item) {
    dispatch({
      type: ITEM_SELECTED,
      payload: initialState
    });
    onQueryChange('');
    onChange(item);
  };

  var updateQuery = function updateQuery(value) {
    dispatch({
      type: QUERY_CHANGED,
      payload: value
    });
    onQueryChange(value);
  };

  var handleKeyDown = function handleKeyDown(event) {
    var isEnter = event.keyCode === _utils.KEY_CODE.ENTER;
    var isTab = event.keyCode === _utils.KEY_CODE.TAB || event.keyCode === _utils.KEY_CODE.TAB && event.shiftKey;
    var hasUserSelection = highlightedItemIndex !== null;
    var lastIndex = items.length ? items.length - 1 : 0;
    var direction = getNavigationDirection(event);

    if (isEnter) {
      event.preventDefault();
    }

    if (direction) {
      var newIndex = getNewIndex(highlightedItemIndex, direction, lastIndex);

      if (listRef.current) {
        scrollToItem(listRef.current, newIndex);
      }

      dispatch({
        type: NAVIGATED_ITEMS,
        payload: newIndex
      });
    } else if (isEnter && hasUserSelection) {
      var selected = items[highlightedItemIndex];
      selectItem(selected);
    } else if (isTab) {
      toggleList(false);
    }
  };

  var handleInputButtonClick = function handleInputButtonClick() {
    query ? updateQuery('') : toggleList();

    if (inputRef.current) {
      inputRef.current.focus();
    }
  };

  var options = (0, _react.useMemo)(function () {
    return children(items).map(function (child, index) {
      return {
        child: child,
        option: items[index]
      };
    });
  }, [children, items]);
  var dropdownClassNames = (0, _classnames["default"])(styles.autocompleteDropdown, className);
  var autocompleteClassNames = (0, _classnames["default"])(styles.autocompleteInput, (0, _defineProperty2["default"])({}, styles.autocompleteInputNegative, validationMessage));

  function renderDefaultToggleElement(toggleProps) {
    return /*#__PURE__*/_react["default"].createElement("div", {
      className: autocompleteClassNames
    }, /*#__PURE__*/_react["default"].createElement(_TextInput.TextInput, {
      value: toggleProps.selectedItem || toggleProps.query,
      onChange: function onChange(e) {
        return toggleProps.onChange(e.target.value);
      },
      onFocus: toggleProps.onFocus,
      onKeyDown: toggleProps.onKeyDown,
      disabled: toggleProps.disabled,
      placeholder: toggleProps.placeholder,
      width: toggleProps.width,
      inputRef: toggleProps.inputRef,
      testId: "autocomplete.input",
      type: "search",
      autoComplete: "off",
      "aria-label": toggleProps.name
    }), /*#__PURE__*/_react["default"].createElement(_IconButton.IconButton, {
      className: styles.inputIconButton,
      tabIndex: -1,
      disabled: toggleProps.disabled,
      buttonType: "muted",
      iconProps: {
        icon: toggleProps.query ? 'Close' : 'ChevronDown'
      },
      onClick: toggleProps.onToggle,
      label: toggleProps.query ? 'Clear' : 'Show list'
    }));
  }

  var toggleProps = {
    name: name,
    query: query,
    selectedItem: selectedItem,
    disabled: disabled,
    placeholder: placeholder,
    width: width,
    onChange: updateQuery,
    onFocus: function onFocus() {
      return toggleList(true);
    },
    onKeyDown: handleKeyDown,
    onToggle: handleInputButtonClick,
    inputRef: inputRef
  };
  var nonClosingRefs = [];

  if (dropdownProps && dropdownProps.nonClosingRefs) {
    nonClosingRefs = dropdownProps.nonClosingRefs;
    delete dropdownProps.nonClosingRefs;
  }

  var renderToggleElementFunction = renderToggleElement || renderDefaultToggleElement;
  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(_Dropdown.Dropdown, (0, _extends2["default"])({
    nonClosingRefs: [inputRef].concat((0, _toConsumableArray2["default"])(nonClosingRefs)),
    className: dropdownClassNames,
    onClose: function onClose() {
      willClearQueryOnClose && updateQuery('');
      dispatch({
        type: TOGGLED_LIST,
        payload: false
      });
    },
    toggleElement: renderToggleElementFunction(toggleProps),
    focusContainerOnOpen: false
  }, dropdownProps, {
    isOpen: isOpen
  }), /*#__PURE__*/_react["default"].createElement(_Dropdown.DropdownList, {
    testId: "autocomplete.dropdown-list",
    maxHeight: maxHeight
  }, /*#__PURE__*/_react["default"].createElement("div", {
    ref: listRef
  }, !options.length && !isLoading && /*#__PURE__*/_react["default"].createElement(_Dropdown.DropdownListItem, {
    isDisabled: true,
    testId: "autocomplete.empty-list-message"
  }, query ? noMatchesMessage : emptyListMessage), isLoading ? /*#__PURE__*/_react["default"].createElement(OptionSkeleton, null) : options.map(function (_ref2, index) {
    var child = _ref2.child,
        option = _ref2.option;
    var isActive = index === highlightedItemIndex;
    return /*#__PURE__*/_react["default"].createElement(_Dropdown.DropdownListItem, {
      key: index,
      isActive: isActive,
      "data-selected": isActive // this should be coming from the component library
      ,
      onClick: function onClick() {
        return selectItem(option);
      },
      testId: "autocomplete.dropdown-list-item"
    }, child);
  })))), validationMessage && /*#__PURE__*/_react["default"].createElement(_ValidationMessage.ValidationMessage, {
    className: styles.validationMessage
  }, validationMessage));
};

exports.Autocomplete = Autocomplete;

function OptionSkeleton() {
  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(_Dropdown.DropdownListItem, null, /*#__PURE__*/_react["default"].createElement(_Skeleton.SkeletonContainer, {
    svgWidth: "200",
    svgHeight: 20
  }, /*#__PURE__*/_react["default"].createElement(_Skeleton.SkeletonBodyText, {
    numberOfLines: 1
  }))), /*#__PURE__*/_react["default"].createElement(_Dropdown.DropdownListItem, null, /*#__PURE__*/_react["default"].createElement(_Skeleton.SkeletonContainer, {
    svgWidth: "100",
    svgHeight: 20
  }, /*#__PURE__*/_react["default"].createElement(_Skeleton.SkeletonBodyText, {
    numberOfLines: 1
  }))), /*#__PURE__*/_react["default"].createElement(_Dropdown.DropdownListItem, null, /*#__PURE__*/_react["default"].createElement(_Skeleton.SkeletonContainer, {
    svgWidth: "150",
    svgHeight: 20
  }, /*#__PURE__*/_react["default"].createElement(_Skeleton.SkeletonBodyText, {
    numberOfLines: 1
  }))));
}

function getNavigationDirection(event) {
  if (event.keyCode === _utils.KEY_CODE.ARROW_DOWN) {
    return Direction.DOWN;
  }

  if (event.keyCode === _utils.KEY_CODE.ARROW_UP) {
    return Direction.UP;
  }

  return null;
} // Get next navigation index based on current index and navigation direction


function getNewIndex(currentIndex, direction, lastIndex) {
  var isDown = direction === Direction.DOWN;
  var isUp = direction === Direction.UP;
  var hasNoUserSelection = currentIndex === null;
  var isLast = currentIndex === lastIndex;
  var isFirst = currentIndex === 0;

  if (isDown && (hasNoUserSelection || isLast)) {
    return 0;
  }

  if (isUp && (hasNoUserSelection || isFirst)) {
    return lastIndex;
  }

  return currentIndex + direction;
} // Find the DOM node at index and scroll if necessary


function scrollToItem(list, index) {
  if (!list || !list.children.length) {
    return;
  }

  var item = list.children[index];
  item.scrollIntoView({
    block: 'nearest'
  });
}