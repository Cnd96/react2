"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TextField = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _ValidationMessage = require("../ValidationMessage");

var _FormLabel = require("../FormLabel");

var _HelpText = require("../HelpText");

var _TextInput = require("../TextInput");

var _TextLink = require("../TextLink");

var _Textarea = require("../Textarea");

var _excluded = ["className", "countCharacters", "formLabelProps", "helpText", "id", "labelText", "name", "onBlur", "onChange", "onFocus", "required", "testId", "textarea", "textInputProps", "textLinkProps", "validationMessage", "value", "width"];
var styles = {
  "TextField": "TextField__TextField___Sf6eo",
  "TextField--small": "TextField__TextField--small___13h4C",
  "TextField--medium": "TextField__TextField--medium___1bB-F",
  "TextField--large": "TextField__TextField--large___3GaTm",
  "TextField--full": "TextField__TextField--full___11DBK",
  "TextField__label-wrapper": "TextField__TextField__label-wrapper___2-MJT",
  "TextField__label-link": "TextField__TextField__label-link___u94cw",
  "TextField__validation-message": "TextField__TextField__validation-message___1Idkl",
  "TextField__help-text": "TextField__TextField__help-text___p4rVf",
  "TextField__hints": "TextField__TextField__hints___3Di2P",
  "TextField__count": "TextField__TextField__count___jiTTs"
};

var TextField = function TextField(_ref) {
  var className = _ref.className,
      _ref$countCharacters = _ref.countCharacters,
      countCharacters = _ref$countCharacters === void 0 ? false : _ref$countCharacters,
      formLabelProps = _ref.formLabelProps,
      helpText = _ref.helpText,
      id = _ref.id,
      labelText = _ref.labelText,
      name = _ref.name,
      onBlur = _ref.onBlur,
      onChange = _ref.onChange,
      onFocus = _ref.onFocus,
      _ref$required = _ref.required,
      required = _ref$required === void 0 ? false : _ref$required,
      _ref$testId = _ref.testId,
      testId = _ref$testId === void 0 ? 'cf-ui-text-field' : _ref$testId,
      _ref$textarea = _ref.textarea,
      textarea = _ref$textarea === void 0 ? false : _ref$textarea,
      textInputProps = _ref.textInputProps,
      textLinkProps = _ref.textLinkProps,
      validationMessage = _ref.validationMessage,
      value = _ref.value,
      _ref$width = _ref.width,
      width = _ref$width === void 0 ? 'full' : _ref$width,
      otherProps = (0, _objectWithoutProperties2["default"])(_ref, _excluded);

  var _useState = (0, _react.useState)(value),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      valueState = _useState2[0],
      setValueState = _useState2[1]; // Store a copy of the value in state.
  // This is used by this component when the `countCharacters`
  // option is on


  var handleOnChange = (0, _react.useCallback)(function (e) {
    setValueState(e.target.value);
    if (onChange) onChange(e);
  }, [onChange]);
  var widthClass = "TextField--".concat(width);
  var classNames = (0, _classnames["default"])(styles['TextField'], styles[widthClass], className);
  var Element = textarea ? _Textarea.Textarea : _TextInput.TextInput;
  return /*#__PURE__*/_react["default"].createElement("div", (0, _extends2["default"])({
    className: classNames
  }, otherProps, {
    "data-test-id": testId
  }), /*#__PURE__*/_react["default"].createElement("div", {
    className: styles['TextField__label-wrapper']
  }, /*#__PURE__*/_react["default"].createElement(_FormLabel.FormLabel, (0, _extends2["default"])({}, formLabelProps, {
    htmlFor: id,
    required: required
  }), labelText), textLinkProps && /*#__PURE__*/_react["default"].createElement(_TextLink.TextLink, (0, _extends2["default"])({
    className: styles['TextField__label-link']
  }, textLinkProps), textLinkProps.text)), /*#__PURE__*/_react["default"].createElement(Element, (0, _extends2["default"])({
    error: !!validationMessage,
    name: name,
    id: id,
    onBlur: onBlur,
    onFocus: onFocus,
    onChange: handleOnChange,
    value: value,
    required: required,
    width: 'full'
  }, textInputProps)), (helpText || countCharacters) && /*#__PURE__*/_react["default"].createElement("div", {
    className: styles['TextField__hints']
  }, helpText && /*#__PURE__*/_react["default"].createElement(_HelpText.HelpText, {
    className: styles['TextField__help-text']
  }, helpText), countCharacters && textInputProps && textInputProps.maxLength && /*#__PURE__*/_react["default"].createElement(_HelpText.HelpText, {
    className: (0, _classnames["default"])(styles['TextField__help-text'], styles['TextField__count'])
  }, valueState ? valueState.length : 0, "/", textInputProps.maxLength)), validationMessage && /*#__PURE__*/_react["default"].createElement(_ValidationMessage.ValidationMessage, {
    className: styles['TextField__validation-message']
  }, validationMessage));
};

exports.TextField = TextField;