import React from 'react';
import { IconProps } from '../Icon';
export interface IconButtonProps extends React.HTMLAttributes<HTMLAnchorElement | HTMLButtonElement> {
    /**
     * It used to controls which icon to render and it accepts all props that you could pass in the Icon component.
     *
     * But the color prop won't work, since its value gets overwritten by the buttonType prop of the IconButton
     */
    iconProps: IconProps;
    /**
     * It controls the color of the button
     */
    buttonType?: 'primary' | 'positive' | 'negative' | 'secondary' | 'muted' | 'white';
    /**
     * It renders a label with the icon, making it look like the naked button
     */
    label?: string;
    /**
     * If true, it will render the Chevron icon to indicate that the button opens a dropdown
     */
    withDropdown?: boolean;
    /**
     * It puts the button in disabled state
     */
    disabled?: boolean;
    /**
     * Class names to be appended to the className prop of the Accordion wrapper
     */
    className?: string;
    /**
     * An ID used for testing purposes applied as a data attribute (data-test-id)
     */
    testId?: string;
    /**
     * Used to make the decision of either rendering as a <a> or as a <button> tag
     */
    href?: string;
    /**
     * Used with href to specify target attribute value
     */
    target?: React.AnchorHTMLAttributes<HTMLAnchorElement>['target'];
    /**
     * Used with href to define a relationship between a linked resource and the current document
     */
    rel?: string;
}
export declare const IconButton: ({ buttonType, className, disabled, href, iconProps, label, onClick, testId, withDropdown, target, rel, ...otherProps }: IconButtonProps) => JSX.Element;
