"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SkeletonText = SkeletonText;

var _react = _interopRequireWildcard(require("react"));

function SkeletonText(_ref) {
  var _ref$numberOfLines = _ref.numberOfLines,
      numberOfLines = _ref$numberOfLines === void 0 ? 1 : _ref$numberOfLines,
      _ref$offsetLeft = _ref.offsetLeft,
      offsetLeft = _ref$offsetLeft === void 0 ? 0 : _ref$offsetLeft,
      _ref$offsetTop = _ref.offsetTop,
      offsetTop = _ref$offsetTop === void 0 ? 0 : _ref$offsetTop,
      _ref$lineHeight = _ref.lineHeight,
      lineHeight = _ref$lineHeight === void 0 ? 21 : _ref$lineHeight,
      _ref$marginBottom = _ref.marginBottom,
      marginBottom = _ref$marginBottom === void 0 ? 20 : _ref$marginBottom,
      width = _ref.width;
  var getLineWidth = (0, _react.useCallback)(function (lastLine) {
    if (width) {
      return width;
    }

    return lastLine ? '80%' : '100%';
  }, [width]);
  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, Array.from(Array(numberOfLines)).map(function (_, index) {
    return /*#__PURE__*/_react["default"].createElement("rect", {
      key: "skeleton-display-text-".concat(index) // eslint-disable-line
      ,
      x: offsetLeft,
      y: index * (+lineHeight + +marginBottom) + +offsetTop // eslint-disable-line @typescript-eslint/no-non-null-assertion
      ,
      rx: "0",
      ry: "0",
      width: getLineWidth(numberOfLines > 1 && numberOfLines - index === 1 // eslint-disable-line @typescript-eslint/no-non-null-assertion
      ),
      height: lineHeight
    });
  }));
}