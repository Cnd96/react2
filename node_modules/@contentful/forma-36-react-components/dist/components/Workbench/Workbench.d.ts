import React, { HTMLProps } from 'react';
import type { ReactElement } from 'react';
export interface WorkbenchHeaderProps {
    title?: ReactElement | string;
    description?: ReactElement | string;
    icon?: ReactElement;
    actions?: ReactElement;
    onBack?: Function;
    className?: string;
    testId?: string;
}
export declare function WorkbenchHeader({ actions, className, description, icon, onBack, testId, title, }: WorkbenchHeaderProps): JSX.Element;
export declare namespace WorkbenchHeader {
    var displayName: string;
}
export interface WorkbenchSidebarProps extends HTMLProps<HTMLElement> {
    children?: React.ReactNode;
    className?: string;
    position?: 'left' | 'right';
    testId?: string;
    labelText?: string;
}
export declare function WorkbenchSidebar({ children, className, position, testId, labelText, ...otherProps }: WorkbenchSidebarProps): JSX.Element;
export interface WorkbenchContentProps extends HTMLProps<HTMLElement> {
    children?: React.ReactNode;
    type?: 'default' | 'text' | 'full';
    className?: string;
    testId?: string;
    labelText?: string;
}
export declare function WorkbenchContent({ children, className, testId, type, labelText, id, }: WorkbenchContentProps): JSX.Element;
export interface WorkbenchProps {
    /**
     * Class names to be appended to the className prop of the component
     */
    className?: string;
    /**
     * Child nodes to be rendered in the component
     */
    children?: React.ReactNode;
    /**
     * An ID used for testing purposes applied as a data attribute (data-test-id)
     */
    testId?: string;
}
export declare function Workbench({ className, children, testId, ...otherProps }: WorkbenchProps): ReactElement;
export declare namespace Workbench {
    var Header: typeof WorkbenchHeader;
    var Content: typeof WorkbenchContent;
    var Sidebar: typeof WorkbenchSidebar;
}
