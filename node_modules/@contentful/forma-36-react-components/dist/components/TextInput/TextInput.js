"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TextInput = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _CopyButton = require("../CopyButton");

var _excluded = ["className", "disabled", "error", "id", "inputRef", "isReadOnly", "maxLength", "name", "labelText", "onBlur", "onChange", "onCopy", "onKeyDown", "placeholder", "required", "testId", "type", "value", "width", "willBlurOnEsc", "withCopyButton"];
var styles = {
  "TextInput": "TextInput__TextInput___36-K-",
  "TextInput__input": "TextInput__TextInput__input___27vDB a11y__focus-border--default___60AXp",
  "TextInput--small": "TextInput__TextInput--small___19AFQ",
  "TextInput--medium": "TextInput__TextInput--medium___1bR2D",
  "TextInput--large": "TextInput__TextInput--large___KwY4O",
  "TextInput--full": "TextInput__TextInput--full___1EJEW",
  "TextInput--disabled": "TextInput__TextInput--disabled___2t7VS",
  "TextInput--negative": "TextInput__TextInput--negative___iVq__",
  "TextInput--with-copy-button": "TextInput__TextInput--with-copy-button___4ehAW",
  "TextInput__copy-button": "TextInput__TextInput__copy-button___3Sy2W"
};

var TextInput = function TextInput(_ref) {
  var _cn;

  var className = _ref.className,
      _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === void 0 ? false : _ref$disabled,
      error = _ref.error,
      id = _ref.id,
      inputRef = _ref.inputRef,
      _ref$isReadOnly = _ref.isReadOnly,
      isReadOnly = _ref$isReadOnly === void 0 ? false : _ref$isReadOnly,
      maxLength = _ref.maxLength,
      name = _ref.name,
      labelText = _ref.labelText,
      onBlur = _ref.onBlur,
      onChange = _ref.onChange,
      onCopy = _ref.onCopy,
      onKeyDown = _ref.onKeyDown,
      placeholder = _ref.placeholder,
      _ref$required = _ref.required,
      required = _ref$required === void 0 ? false : _ref$required,
      _ref$testId = _ref.testId,
      testId = _ref$testId === void 0 ? 'cf-ui-text-input' : _ref$testId,
      type = _ref.type,
      value = _ref.value,
      _ref$width = _ref.width,
      width = _ref$width === void 0 ? 'full' : _ref$width,
      _ref$willBlurOnEsc = _ref.willBlurOnEsc,
      willBlurOnEsc = _ref$willBlurOnEsc === void 0 ? true : _ref$willBlurOnEsc,
      _ref$withCopyButton = _ref.withCopyButton,
      withCopyButton = _ref$withCopyButton === void 0 ? false : _ref$withCopyButton,
      otherProps = (0, _objectWithoutProperties2["default"])(_ref, _excluded);

  var _useState = (0, _react.useState)(value),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      valueState = _useState2[0],
      setValueState = _useState2[1];

  var handleFocus = function handleFocus(e) {
    e.persist();

    if (disabled) {
      e.target.select();
    }
  };

  var handleChange = (0, _react.useCallback)(function (e) {
    e.persist();
    if (disabled || isReadOnly) return;

    if (onChange) {
      onChange(e);
    }

    setValueState(e.currentTarget.value);
  }, [onChange, disabled, isReadOnly]);
  var handleKeyDown = (0, _react.useCallback)(function (e) {
    e.persist();

    if (onKeyDown) {
      onKeyDown(e);
    }

    if (e.nativeEvent.code === 'Escape' && willBlurOnEsc) {
      e.currentTarget.blur();
    }
  }, [willBlurOnEsc, onKeyDown]);
  (0, _react.useEffect)(function () {
    setValueState(value);
  }, [value]);
  var widthClass = "TextInput--".concat(width);
  var classNames = (0, _classnames["default"])(styles['TextInput'], className, styles[widthClass], (_cn = {}, (0, _defineProperty2["default"])(_cn, styles['TextInput--disabled'], disabled), (0, _defineProperty2["default"])(_cn, styles['TextInput--negative'], error), (0, _defineProperty2["default"])(_cn, styles['TextInput--with-copy-button'], withCopyButton), _cn));
  return /*#__PURE__*/_react["default"].createElement("div", {
    className: classNames
  }, /*#__PURE__*/_react["default"].createElement("input", (0, _extends2["default"])({
    onKeyDown: handleKeyDown,
    "aria-label": labelText,
    className: styles['TextInput__input'],
    id: id,
    name: name,
    required: required,
    placeholder: placeholder,
    maxLength: maxLength,
    "data-test-id": testId,
    disabled: disabled,
    onBlur: onBlur,
    onFocus: handleFocus,
    onChange: handleChange,
    value: valueState,
    type: type,
    ref: inputRef
  }, otherProps)), withCopyButton && /*#__PURE__*/_react["default"].createElement(_CopyButton.CopyButton, {
    onCopy: onCopy,
    copyValue: valueState,
    className: styles['TextInput__copy-button']
  }));
};

exports.TextInput = TextInput;