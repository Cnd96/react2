"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ModalLauncher = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _reactDom = _interopRequireDefault(require("react-dom"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var getRoot = function getRoot(rootElId) {
  // Reuse the container if we find it
  var rootDom = document.getElementById(rootElId);

  if (rootDom !== null) {
    return rootDom;
  } // Otherwise create it


  rootDom = document.createElement('div');
  rootDom.setAttribute('id', rootElId);
  document.body.appendChild(rootDom);
  return rootDom;
};

var openModalsIds = new Map();

function closeAll() {
  openModalsIds.forEach( /*#__PURE__*/function () {
    var _ref2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(_ref, rootElId) {
      var render, currentConfig, delay, config;
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              render = _ref.render, currentConfig = _ref.currentConfig, delay = _ref.delay;
              config = _objectSpread(_objectSpread({}, currentConfig), {}, {
                isShown: false
              });
              render(config);
              _context.next = 5;
              return new Promise(function (resolveDelay) {
                return setTimeout(resolveDelay, delay);
              });

            case 5:
              _reactDom["default"].unmountComponentAtNode(getRoot(rootElId));

              openModalsIds["delete"](rootElId);

            case 7:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x, _x2) {
      return _ref2.apply(this, arguments);
    };
  }());
} // eslint-disable-next-line @typescript-eslint/no-explicit-any


function open(componentRenderer) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  options = _objectSpread({
    delay: 300
  }, options); // Allow components to specify if they wish to reuse the modal container

  var rootElId = "modals-root".concat(options.modalId || Date.now());
  var rootDom = getRoot(rootElId);
  return new Promise(function (resolve) {
    var currentConfig = {
      onClose: onClose,
      isShown: true
    };

    function render(_ref3) {
      var onClose = _ref3.onClose,
          isShown = _ref3.isShown;

      _reactDom["default"].render(componentRenderer({
        onClose: onClose,
        isShown: isShown
      }), rootDom);
    }

    function onClose(_x3) {
      return _onClose.apply(this, arguments);
    }

    function _onClose() {
      _onClose = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(arg) {
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                currentConfig = _objectSpread(_objectSpread({}, currentConfig), {}, {
                  isShown: false
                });
                render(currentConfig);
                _context2.next = 4;
                return new Promise(function (resolveDelay) {
                  return setTimeout(resolveDelay, options.delay);
                });

              case 4:
                _reactDom["default"].unmountComponentAtNode(rootDom);

                rootDom.remove();
                openModalsIds["delete"](rootElId);
                resolve(arg);

              case 8:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));
      return _onClose.apply(this, arguments);
    }

    render(currentConfig);
    openModalsIds.set(rootElId, {
      render: render,
      currentConfig: currentConfig,
      delay: options.delay
    });
  });
}

var ModalLauncher = {
  open: open,
  closeAll: closeAll
};
exports.ModalLauncher = ModalLauncher;