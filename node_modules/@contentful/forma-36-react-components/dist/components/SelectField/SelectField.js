"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SelectField = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _ValidationMessage = require("../ValidationMessage");

var _FormLabel = require("../FormLabel");

var _HelpText = require("../HelpText");

var _Select = require("../Select");

var _TextLink = require("../TextLink");

var _excluded = ["children", "className", "formLabelProps", "helpText", "id", "labelText", "name", "onBlur", "onChange", "required", "selectProps", "testId", "textLinkProps", "validationMessage", "value"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var styles = {
  "SelectField": "SelectField__SelectField___kbQlf",
  "SelectField__label-wrapper": "SelectField__SelectField__label-wrapper___3jGwo",
  "SelectField__label-link": "SelectField__SelectField__label-link___2bZnM",
  "SelectField__validation-message": "SelectField__SelectField__validation-message___1yelf",
  "SelectField__help-text": "SelectField__SelectField__help-text___H0RZB"
};

var SelectField = function SelectField(_ref) {
  var children = _ref.children,
      className = _ref.className,
      formLabelProps = _ref.formLabelProps,
      helpText = _ref.helpText,
      id = _ref.id,
      labelText = _ref.labelText,
      name = _ref.name,
      onBlur = _ref.onBlur,
      onChange = _ref.onChange,
      _ref$required = _ref.required,
      required = _ref$required === void 0 ? false : _ref$required,
      selectProps = _ref.selectProps,
      _ref$testId = _ref.testId,
      testId = _ref$testId === void 0 ? 'cf-ui-select-field' : _ref$testId,
      textLinkProps = _ref.textLinkProps,
      validationMessage = _ref.validationMessage,
      value = _ref.value,
      otherProps = (0, _objectWithoutProperties2["default"])(_ref, _excluded);

  var _useState = (0, _react.useState)(value),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      valueState = _useState2[0],
      setValueState = _useState2[1]; // Store a copy of the value in state.
  // This is used by this component when the `countCharacters`
  // option is on


  var handleOnChange = function handleOnChange(e) {
    e.persist();
    setValueState(e.currentTarget.value);

    if (onChange) {
      onChange(e);
    }
  };

  (0, _react.useEffect)(function () {
    setValueState(value);
  }, [value]);
  var classNames = (0, _classnames["default"])(styles['SelectField'], className);
  return /*#__PURE__*/_react["default"].createElement("div", (0, _extends2["default"])({
    className: classNames
  }, otherProps, {
    "data-test-id": testId
  }), /*#__PURE__*/_react["default"].createElement("div", {
    className: styles['SelectField__label-wrapper']
  }, /*#__PURE__*/_react["default"].createElement(_FormLabel.FormLabel, _objectSpread(_objectSpread({}, formLabelProps), {}, {
    htmlFor: id,
    required: required
  }), labelText), textLinkProps && /*#__PURE__*/_react["default"].createElement(_TextLink.TextLink, (0, _extends2["default"])({
    className: styles['SelectField__label-link']
  }, textLinkProps), textLinkProps.text)), /*#__PURE__*/_react["default"].createElement(_Select.Select, (0, _extends2["default"])({
    hasError: !!validationMessage,
    name: name,
    id: id,
    onBlur: onBlur,
    onChange: handleOnChange,
    value: valueState,
    required: required
  }, selectProps), children), helpText && /*#__PURE__*/_react["default"].createElement("div", {
    className: styles['SelectField__hints']
  }, helpText && /*#__PURE__*/_react["default"].createElement(_HelpText.HelpText, {
    className: styles['SelectField__help-text']
  }, helpText)), validationMessage && /*#__PURE__*/_react["default"].createElement(_ValidationMessage.ValidationMessage, {
    className: styles['SelectField__validation-message']
  }, validationMessage));
};

exports.SelectField = SelectField;