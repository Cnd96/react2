{"version":3,"file":"contentful-slatejs-adapter.es5.js","sources":["../src/helpers.ts","../src/schema.ts","../src/contentful-to-slatejs-adapter.ts","../src/slatejs-to-contentful-adapter.ts"],"sourcesContent":["/**\n * Ensures that data defaults to an empty object.\n */\nexport const getDataOfDefault = (value?: Record<string, any>) => value || {};\n","import get from 'lodash.get';\nimport * as Contentful from '@contentful/rich-text-types';\nimport { ContentfulNonTextNodes } from './types';\n\nconst defaultSchema: SchemaJSON = {};\n\n/**\n * SlateJS Schema definition v0.33.x\n *\n * @export\n * @interface SchemaJSON\n */\nexport interface SchemaJSON {\n  blocks?: Record<string, SchemaValue>;\n  inlines?: Record<string, SchemaValue>;\n}\nexport interface Schema extends SchemaJSON {\n  isVoid(node: ContentfulNonTextNodes): boolean;\n}\n\nexport interface SchemaValue {\n  isVoid?: boolean;\n  // tslint:disable-next-line:no-any\n  [k: string]: any;\n}\n\n/**\n * Creates an instance of Schema from json.\n *\n * @export\n * @param {SchemaJSON} [schema=defaultSchema]\n * @returns {Schema}\n */\nexport function fromJSON(schema: SchemaJSON = defaultSchema): Schema {\n  return {\n    /**\n     * Check if a `node` is void based on the schema rules.\n     *\n     * @param {ContentfulNonTextNodes} node\n     * @returns\n     */\n    isVoid(node: ContentfulNonTextNodes) {\n      const root = Object.values(Contentful.BLOCKS).includes(node.nodeType) ? 'blocks' : 'inlines';\n      return get(schema, [root, node.nodeType as string, 'isVoid'], false);\n    },\n  };\n}\n","import flatmap from 'lodash.flatmap';\n\nimport * as Contentful from '@contentful/rich-text-types';\nimport { ContentfulNode, SlateNode, ContentfulNonTextNodes } from './types';\nimport { getDataOfDefault } from './helpers';\nimport { SchemaJSON, fromJSON, Schema } from './schema';\n\nexport interface ToSlatejsDocumentProperties {\n  document: Contentful.Document;\n  schema?: SchemaJSON;\n}\n\nexport default function toSlatejsDocument({\n  document,\n  schema,\n}: ToSlatejsDocumentProperties): Slate.Document {\n  return {\n    object: 'document',\n    data: getDataOfDefault(document.data),\n    nodes: flatmap(document.content, node => convertNode(node, fromJSON(schema))) as Slate.Block[],\n  };\n}\n\nfunction convertNode(node: ContentfulNode, schema: Schema): SlateNode[] {\n  const nodes: SlateNode[] = [];\n\n  if (node.nodeType === 'text') {\n    const slateText = convertTextNode(node);\n\n    nodes.push(slateText);\n  } else {\n    const contentfulNode = node as ContentfulNonTextNodes;\n    const childNodes = flatmap(contentfulNode.content, childNode => convertNode(childNode, schema));\n\n    const object = getSlateNodeObjectValue(contentfulNode.nodeType);\n    let slateNode: SlateNode;\n    if (object === 'inline') {\n      slateNode = createInlineNode(contentfulNode, childNodes, schema);\n    } else if (object === 'block') {\n      slateNode = createBlockNode(contentfulNode, childNodes, schema);\n    } else {\n      throw new Error(`Unexpected slate object '${object}'`);\n    }\n    nodes.push(slateNode);\n  }\n  return nodes;\n}\n\nfunction createBlockNode(\n  contentfulBlock: ContentfulNonTextNodes,\n  childNodes: SlateNode[],\n  schema: Schema,\n): Slate.Block {\n  return {\n    object: 'block',\n    type: contentfulBlock.nodeType,\n    nodes: childNodes,\n    isVoid: schema.isVoid(contentfulBlock),\n    data: getDataOfDefault(contentfulBlock.data),\n  } as Slate.Block;\n}\n\nfunction createInlineNode(\n  contentfulBlock: ContentfulNonTextNodes,\n  childNodes: SlateNode[],\n  schema: Schema,\n): Slate.Inline {\n  return {\n    object: 'inline',\n    type: contentfulBlock.nodeType,\n    nodes: childNodes,\n    isVoid: schema.isVoid(contentfulBlock),\n    data: getDataOfDefault(contentfulBlock.data),\n  } as Slate.Inline;\n}\n\nfunction convertTextNode(node: ContentfulNode): Slate.Text {\n  const { marks = [], value, data } = node as Contentful.Text;\n  const slateText: Slate.Text = {\n    object: 'text',\n    leaves: [\n      {\n        object: 'leaf',\n        text: value,\n        marks: marks.map(mark => ({\n          ...mark,\n          data: {},\n          object: 'mark',\n        })),\n      } as Slate.TextLeaf,\n    ],\n    data: getDataOfDefault(data),\n  };\n  return slateText;\n}\n\nfunction getSlateNodeObjectValue(nodeType: string): 'inline' | 'block' {\n  if (Object.values(Contentful.BLOCKS).includes(nodeType)) {\n    return 'block';\n  } else if (Object.values(Contentful.INLINES).includes(nodeType)) {\n    return 'inline';\n  } else {\n    throw new Error(`Unexpected contentful nodeType '${nodeType}'`);\n  }\n}\n","import flatMap from 'lodash.flatmap';\nimport * as Contentful from '@contentful/rich-text-types';\nimport { ContentfulNode, SlateNode } from './types';\nimport { getDataOfDefault } from './helpers';\nimport { SchemaJSON, Schema, fromJSON } from './schema';\n\nexport interface ToContentfulDocumentProperties {\n  document: Slate.Document;\n  schema?: SchemaJSON;\n}\n\nexport default function toContentfulDocument({\n  document,\n  schema,\n}: ToContentfulDocumentProperties): Contentful.Document {\n  return {\n    nodeType: Contentful.BLOCKS.DOCUMENT,\n    data: getDataOfDefault(document.data),\n    content: flatMap(\n      document.nodes,\n      node => convertNode(node, fromJSON(schema)) as Contentful.Block[],\n    ),\n  };\n}\n\nfunction convertNode(node: SlateNode, schema: Schema): ContentfulNode[] {\n  const nodes: ContentfulNode[] = [];\n  switch (node.object) {\n    case 'block':\n    case 'inline':\n      const slateNode = node as Slate.Block;\n      const content = flatMap(slateNode.nodes, childNode => convertNode(childNode, schema));\n      if (!slateNode.type) {\n        throw new Error(`Unexpected slate node ${JSON.stringify(slateNode)}`);\n      }\n\n      const contentfulBlock: Contentful.Block = {\n        nodeType: slateNode.type,\n        content: [],\n        data: getDataOfDefault(slateNode.data),\n      };\n\n      if (!schema.isVoid(contentfulBlock)) {\n        contentfulBlock.content = content;\n      }\n      nodes.push(contentfulBlock);\n      break;\n    case 'text':\n      convertText(node as Slate.Text).forEach(childNode => nodes.push(childNode));\n      break;\n    default:\n      assertUnreachable(node);\n      break;\n  }\n\n  return nodes;\n}\n\nfunction convertText(node: Slate.Text): Contentful.Text[] {\n  return node.leaves.map<Contentful.Text>(leaf => ({\n    nodeType: 'text',\n    value: leaf.text,\n    marks: leaf.marks ? leaf.marks.map(mark => ({ type: mark.type })) : [],\n    data: getDataOfDefault(node.data),\n  }));\n}\n\nfunction assertUnreachable(object: never): never {\n  throw new Error(`Unexpected slate object ${object}`);\n}\n"],"names":["Contentful.BLOCKS","Contentful.INLINES","flatMap","convertNode"],"mappings":"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"}