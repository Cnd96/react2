"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var lodash_flatmap_1 = require("lodash.flatmap");
var Contentful = require("@contentful/rich-text-types");
var helpers_1 = require("./helpers");
var schema_1 = require("./schema");
function toSlatejsDocument(_a) {
    var document = _a.document, schema = _a.schema;
    return {
        object: 'document',
        data: helpers_1.getDataOfDefault(document.data),
        nodes: lodash_flatmap_1.default(document.content, function (node) { return convertNode(node, schema_1.fromJSON(schema)); }),
    };
}
exports.default = toSlatejsDocument;
function convertNode(node, schema) {
    var nodes = [];
    if (node.nodeType === 'text') {
        var slateText = convertTextNode(node);
        nodes.push(slateText);
    }
    else {
        var contentfulNode = node;
        var childNodes = lodash_flatmap_1.default(contentfulNode.content, function (childNode) { return convertNode(childNode, schema); });
        var object = getSlateNodeObjectValue(contentfulNode.nodeType);
        var slateNode = void 0;
        if (object === 'inline') {
            slateNode = createInlineNode(contentfulNode, childNodes, schema);
        }
        else if (object === 'block') {
            slateNode = createBlockNode(contentfulNode, childNodes, schema);
        }
        else {
            throw new Error("Unexpected slate object '" + object + "'");
        }
        nodes.push(slateNode);
    }
    return nodes;
}
function createBlockNode(contentfulBlock, childNodes, schema) {
    return {
        object: 'block',
        type: contentfulBlock.nodeType,
        nodes: childNodes,
        isVoid: schema.isVoid(contentfulBlock),
        data: helpers_1.getDataOfDefault(contentfulBlock.data),
    };
}
function createInlineNode(contentfulBlock, childNodes, schema) {
    return {
        object: 'inline',
        type: contentfulBlock.nodeType,
        nodes: childNodes,
        isVoid: schema.isVoid(contentfulBlock),
        data: helpers_1.getDataOfDefault(contentfulBlock.data),
    };
}
function convertTextNode(node) {
    var _a = node, _b = _a.marks, marks = _b === void 0 ? [] : _b, value = _a.value, data = _a.data;
    var slateText = {
        object: 'text',
        leaves: [
            {
                object: 'leaf',
                text: value,
                marks: marks.map(function (mark) { return (__assign({}, mark, { data: {}, object: 'mark' })); }),
            },
        ],
        data: helpers_1.getDataOfDefault(data),
    };
    return slateText;
}
function getSlateNodeObjectValue(nodeType) {
    if (Object.values(Contentful.BLOCKS).includes(nodeType)) {
        return 'block';
    }
    else if (Object.values(Contentful.INLINES).includes(nodeType)) {
        return 'inline';
    }
    else {
        throw new Error("Unexpected contentful nodeType '" + nodeType + "'");
    }
}
//# sourceMappingURL=contentful-to-slatejs-adapter.js.map